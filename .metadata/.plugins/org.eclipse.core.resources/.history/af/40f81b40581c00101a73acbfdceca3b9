/*
 * menue_handler.c
 *
 *  Created on: Apr 18, 2025
 *      Author: hanif
 */

#include "main.h"


uint32_t extract_command (command_t *cmd){
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting (q_data);
	if (!status) return -1;
	uint8_t i = 0;

	do {
		status = xQueueReceive (q_data, &item, 0);
		if (status == pdTRUE) cmd->payload[i++] = item;
	} while (item != '\n');

	cmd->payload[i-1] = '\0';
	cmd->len = i-1; //save the length of the command excluding null char
	return 0;
}




void Process_Command (command_t *cmd){
	extract_command (cmd);
	switch (current_state){
	case sMainMenu:
		xTaskNotify (menu_task_Handle, (uint32_t) cmd , eSetValueWithOverwrite);
	break;

	case sLEDEffect:
		xTaskNotify (led_task_Handle, (uint32_t) cmd , eSetValueWithOverwrite);

	break;

	case sRTCReport:
		xTaskNotify (rtc_task_Handle, (uint32_t) cmd , eSetValueWithOverwrite);

		break;

	case sRTCMenu:

		break;

	case sRTCTimeConfig:

			break;

	case sRTCDateConfig:

			break;


	}



}




 void (Menu_Task_Handler) (void* parameters) {

	while (1){


	}
	}

 void (Command_Task_Handler) (void* parameters) {
	 BaseType_t returnValue;

	 command_t cmd;

	while (1){
		//initially it is blocked using notify wait. If notification is sent, it will unblock and ready to run
		returnValue= xTaskNotifyWait(0,0, NULL,portMAX_DELAY );

		//when notification is received or gets the command from the usart, it will process the data
		if (returnValue == pdTRUE){
			Process_Command (&cmd);
		}

		//Notify the relevant task according to the command

	}
	}

 void (Print_Task_Handler) (void* parameters) {

	while (1){


	}
	}

 void (LED_Task_Handler) (void* parameters) {

	while (1){


	}
	}

 void (RTC_Task_Handler) (void* parameters) {

	while (1){


	}
	}
