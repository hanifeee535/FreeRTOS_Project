/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

/* Write a FreeRTOS application that takes input from the user over UART and handles LED and RTC peripheral
 * of the microcontroller.
 * This application implements:
 * 1. Processing user sent commands over UART
 * FreeRTOS queues handling
 * FreeRTOS software timers
 *
 *  */


#include "main.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


TaskHandle_t menu_task_Handle;
TaskHandle_t commmand_task_Handle;
TaskHandle_t print_task_Handle;
TaskHandle_t led_task_Handle;
TaskHandle_t rtc_task_Handle;

QueueHandle_t q_data;
QueueHandle_t q_print;

TaskHandle_t volatile NextTask_To_Handle = NULL;
BaseType_t status;







int main(void){

	SystemClock_Config();
	NVIC_SetPriorityGrouping(NVIC_PRIORITY_GROUP_0); // 0 bits for subpriority, 4 bits for preemption


	//configure gpio pins
	Config_GPIO(portC, 0, output_50Mhz, gp_output );
	Config_GPIO(portC, 1, output_50Mhz, gp_output );
	Config_GPIO(portB, 0, output_50Mhz, gp_output );
	Config_GPIO(portA, 4, output_50Mhz, gp_output );

	//configure_gpio_interrupt(13, INT_PORT_C, FALLING, 6);
	init_USART ( USART_2, 115200 );
	init_usart_receive_interrupt(USART_2, 115200, 6);





    // Task Creation
    status = xTaskCreate(Menu_Task_Handler, "Menu_Task", 200, NULL, 2, &menu_task_Handle);
    configASSERT(status == pdPASS);

    status = xTaskCreate(Command_Task_Handler, "Command_Task", 200, NULL, 2, &commmand_task_Handle);
    configASSERT(status == pdPASS);

    status = xTaskCreate(Print_Task_Handler, "Print_Task", 200, NULL, 2, &print_task_Handle);
    configASSERT(status == pdPASS);

    status = xTaskCreate(LED_Task_Handler, "LED_Task", 200, NULL, 2, &led_task_Handle);
    configASSERT(status == pdPASS);

    status = xTaskCreate(RTC_Task_Handler, "RTC_Task", 200, NULL, 2, &rtc_task_Handle);
    configASSERT(status == pdPASS);


    //creating the queues:
    q_data = xQueueCreate (10, sizeof(char));
    configASSERT(q_data != NULL);

    q_print = xQueueCreate (10, sizeof(size_t));
    configASSERT(q_print != NULL);


    vTaskStartScheduler();



    /* Loop forever */
	for(;;){}
}
