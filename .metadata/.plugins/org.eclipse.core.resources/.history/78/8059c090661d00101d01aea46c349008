/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include "main.h"
#include <stdint.h>
#include "stm32f103Driver.h"
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"



TimerHandle_t handle_led_timer ;
TaskHandle_t menu_task_Handle;
TaskHandle_t commmand_task_Handle;
TaskHandle_t print_task_Handle;
TaskHandle_t led_task_Handle;

QueueHandle_t q_data;
QueueHandle_t q_print;
BaseType_t status;


void USART2_IRQHandler (){


	uint8_t byte = USART_receive (2);
	xQueueSendFromISR (q_data,&byte, NULL ); //enqueue data byte
	xTaskNotifyFromISR (commmand_task_Handle, 0, eNoAction, NULL);
}





#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void){

	SystemClock_Config();
	NVIC_SetPriorityGrouping(NVIC_PRIORITY_GROUP_0); // 0 bits for subpriority, 4 bits for preemption


	for (int i = 0; i<9; i++){
		Config_GPIO(portC, i, output_50Mhz, gp_output );
	}


	//configuring usart 2 priority for priority level - 6
	init_usart_receive_interrupt(USART_2, 115200, 6);
	USART_transmit(2, 'h');




    // Task Creation
    status = xTaskCreate(Menu_Task_Handler, "Menu_Task", 200, NULL, 2, &menu_task_Handle);
    configASSERT(status == pdPASS);

    status = xTaskCreate(Command_Task_Handler, "Command_Task", 200, NULL, 2, &commmand_task_Handle);
    configASSERT(status == pdPASS);

    status = xTaskCreate(Print_Task_Handler, "Print_Task", 200, NULL, 2, &print_task_Handle);
    configASSERT(status == pdPASS);

    status = xTaskCreate(LED_Task_Handler, "LED_Task", 200, NULL, 2, &led_task_Handle);
    configASSERT(status == pdPASS);


    //creating the queues:
    q_data = xQueueCreate (1, sizeof(char));
    configASSERT(q_data != NULL);

    q_print = xQueueCreate (10, sizeof(size_t));
    configASSERT(q_print != NULL);

    //configuring the software timer
	handle_led_timer = xTimerCreate("LED_Timer", pdMS_TO_TICKS(200), pdTRUE, NULL, led_timer_callback);


	vTaskStartScheduler();


    /* Loop forever */
	for(;;){}
}
