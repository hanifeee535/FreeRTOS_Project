/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "stm32f103Driver.h"
#include "FreeRTOS.h"
#include "task.h"


#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


TaskHandle_t task1_Handle;
TaskHandle_t task2_Handle;
TaskHandle_t task3_Handle;
TaskHandle_t task4_Handle;

TaskHandle_t volatile NextTask_To_Handle = NULL;
BaseType_t status;


static void (Task1_Handler) (void* parameters) {
	//TickType_t last_wakeup_time;
	//last_wakeup_time = xTaskGetTickCount();
	BaseType_t status;
	while (1){
		toggle_gpio (portC, 0);
		//vTaskDelay(pdMS_TO_TICKS(1000));
		//vTaskDelayUntil( &last_wakeup_time, pdMS_TO_TICKS(1000));
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000) );
		if(status == pdTRUE){
			Write_GPIO (portC , 0 ,  HIGH);
			vTaskSuspendAll();
			NextTask_To_Handle = task2_Handle;
			xTaskResumeAll();
			vTaskDelete(NULL);
		}

	}
	}

static void (Task2_Handler) (void* parameters) {

	//TickType_t last_wakeup_time;
	//last_wakeup_time = xTaskGetTickCount();
	BaseType_t status;
	while (1){
		toggle_gpio (portC, 1);
		//vTaskDelay(pdMS_TO_TICKS(800));
		//vTaskDelayUntil( &last_wakeup_time, pdMS_TO_TICKS(1000));
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800) );
		if(status == pdTRUE){
			Write_GPIO (portC , 1 ,  HIGH);
			vTaskSuspendAll();
			NextTask_To_Handle = task3_Handle;
			xTaskResumeAll();

			vTaskDelete(NULL);
			}
	}
	}

static void (Task3_Handler) (void* parameters) {

	//TickType_t last_wakeup_time;
	//last_wakeup_time = xTaskGetTickCount();
	BaseType_t status;
	while (1){
		toggle_gpio (portB, 0);
		//vTaskDelay(pdMS_TO_TICKS(400));
		//vTaskDelayUntil( &last_wakeup_time, pdMS_TO_TICKS(1000));
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400) );
		if(status == pdTRUE){
			Write_GPIO (portB , 0 ,  HIGH);
			vTaskSuspendAll();
			NextTask_To_Handle = NULL;
			xTaskResumeAll();
			vTaskDelete(task4_Handle);
			vTaskDelete(NULL);

			}
	}
	}

//static void (Task3_Handler) (void* parameters) {
//
//	TickType_t last_wakeup_time;
//	last_wakeup_time = xTaskGetTickCount();
//	while (1){
//		toggle_gpio (portB, 0);
//		//vTaskDelay(pdMS_TO_TICKS(400));
//		vTaskDelayUntil( &last_wakeup_time, pdMS_TO_TICKS(1000));
//	}
//	}

static void Task4_Handler(void* parameters) {
    uint8_t btn_previous = 1;  // Track previous state
    uint8_t btn_current;

    while (1) {
        btn_current = Read_GPIO_Pin(portC, 13);

        // Trigger only on falling edge (button press)
        if (btn_previous == 1 && btn_current == 0) {
            if (NextTask_To_Handle != NULL) {
                xTaskNotify(NextTask_To_Handle, 0, eSetValueWithOverwrite);
            }

        }

        btn_previous = btn_current;
        vTaskDelay(pdMS_TO_TICKS(20));  // Debounce
    }
}

int main(void){
	SystemClock_Config();
	NVIC_SetPriorityGrouping(NVIC_PRIORITY_GROUP_0); // 0 bits for subpriority, 4 bits for preemption


	//configure gpio pins
	Config_GPIO(portC, 0, output_50Mhz, gp_output );
	Config_GPIO(portC, 1, output_50Mhz, gp_output );
	Config_GPIO(portB, 0, output_50Mhz, gp_output );
	Config_GPIO(portC, 13, input, pp_in );





    // Task Creation
    status = xTaskCreate(Task1_Handler, "Green LED", 128, NULL, 3, &task1_Handle);
    configASSERT(status == pdPASS);

    status = xTaskCreate(Task2_Handler, "RED_LED", 128, NULL, 2, &task2_Handle);
    configASSERT(status == pdPASS);

    status = xTaskCreate(Task3_Handler, "Blue_LED", 128, NULL, 1, &task3_Handle);
    configASSERT(status == pdPASS);

    status = xTaskCreate(Task4_Handler, "User_Button", 128, NULL, 4, &task4_Handle);
    configASSERT(status == pdPASS);
    NextTask_To_Handle = task1_Handle;

    vTaskStartScheduler();



    /* Loop forever */
	for(;;){

//		toggle_gpio (portC, 0);
//		delay_miliSecond(1, 100);
//		toggle_gpio (portC, 1);
//		delay_miliSecond(1, 100);
//		toggle_gpio (portB, 0);
//		delay_miliSecond(1, 100);

	}
}
