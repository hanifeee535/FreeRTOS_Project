
002_Free_RTOS_Interuupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023b0  08000130  08000130  00001130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080024e0  080024e0  000034e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002508  08002508  00004008  2**0
                  CONTENTS
  4 .ARM          00000000  08002508  08002508  00004008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002508  08002508  00004008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002508  08002508  00003508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800250c  0800250c  0000350c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  08002510  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000315c  20000008  08002518  00004008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003164  08002518  00004164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004dce  00000000  00000000  00004031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ed1  00000000  00000000  00008dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000578  00000000  00000000  00009cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000043d  00000000  00000000  0000a248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000347f  00000000  00000000  0000a685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005eda  00000000  00000000  0000db04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00015ec7  00000000  00000000  000139de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000298a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015e4  00000000  00000000  000298e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0002aecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	080024c8 	.word	0x080024c8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	080024c8 	.word	0x080024c8

08000170 <SystemClock_Config>:

#include <stdint.h>
#include "stm32f103Driver.h"


void SystemClock_Config(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
      //enable HSE (8 MHz external crystal)
      RCC->CR |= (1<<16);
 8000174:	4b20      	ldr	r3, [pc, #128]	@ (80001f8 <SystemClock_Config+0x88>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a1f      	ldr	r2, [pc, #124]	@ (80001f8 <SystemClock_Config+0x88>)
 800017a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800017e:	6013      	str	r3, [r2, #0]
      while (!(RCC->CR & (1 << 17)));
 8000180:	bf00      	nop
 8000182:	4b1d      	ldr	r3, [pc, #116]	@ (80001f8 <SystemClock_Config+0x88>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800018a:	2b00      	cmp	r3, #0
 800018c:	d0f9      	beq.n	8000182 <SystemClock_Config+0x12>

      // Set Flash latency for 72 MHz
      FLASH->ACR |= (0x2 << 0) ;//flash latency 2
 800018e:	4b1b      	ldr	r3, [pc, #108]	@ (80001fc <SystemClock_Config+0x8c>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a1a      	ldr	r2, [pc, #104]	@ (80001fc <SystemClock_Config+0x8c>)
 8000194:	f043 0302 	orr.w	r3, r3, #2
 8000198:	6013      	str	r3, [r2, #0]

      // Configure PLL: HSE (8MHz) ×9 = 72 MHz
      RCC->CFGR |=  (0x1 << 16) |(0x7 << 18); //HSE as PLL input| PLL multiplier ×9
 800019a:	4b17      	ldr	r3, [pc, #92]	@ (80001f8 <SystemClock_Config+0x88>)
 800019c:	685b      	ldr	r3, [r3, #4]
 800019e:	4a16      	ldr	r2, [pc, #88]	@ (80001f8 <SystemClock_Config+0x88>)
 80001a0:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 80001a4:	6053      	str	r3, [r2, #4]

    // Enable PLL and wait until ready
    RCC->CR |= (1 << 24);   // PLL enable
 80001a6:	4b14      	ldr	r3, [pc, #80]	@ (80001f8 <SystemClock_Config+0x88>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a13      	ldr	r2, [pc, #76]	@ (80001f8 <SystemClock_Config+0x88>)
 80001ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001b0:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & (1 << 25)  )); // PLL ready flag
 80001b2:	bf00      	nop
 80001b4:	4b10      	ldr	r3, [pc, #64]	@ (80001f8 <SystemClock_Config+0x88>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d0f9      	beq.n	80001b4 <SystemClock_Config+0x44>

    // Switch to PLL system clock
    RCC->CFGR |=  (0x2 << 0) ; // PLL as system clock
 80001c0:	4b0d      	ldr	r3, [pc, #52]	@ (80001f8 <SystemClock_Config+0x88>)
 80001c2:	685b      	ldr	r3, [r3, #4]
 80001c4:	4a0c      	ldr	r2, [pc, #48]	@ (80001f8 <SystemClock_Config+0x88>)
 80001c6:	f043 0302 	orr.w	r3, r3, #2
 80001ca:	6053      	str	r3, [r2, #4]
    while (((RCC->CFGR) & (0x2 << 2)) != (0x2 << 2));
 80001cc:	bf00      	nop
 80001ce:	4b0a      	ldr	r3, [pc, #40]	@ (80001f8 <SystemClock_Config+0x88>)
 80001d0:	685b      	ldr	r3, [r3, #4]
 80001d2:	f003 0308 	and.w	r3, r3, #8
 80001d6:	2b08      	cmp	r3, #8
 80001d8:	d1f9      	bne.n	80001ce <SystemClock_Config+0x5e>

    // APB1 Prescaler: HCLK divided by 2 (36 MHz for USART2/3)
    RCC->CFGR |= (0x4 << 8); // PPRE1 = 0b100 (HCLK/2)
 80001da:	4b07      	ldr	r3, [pc, #28]	@ (80001f8 <SystemClock_Config+0x88>)
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	4a06      	ldr	r2, [pc, #24]	@ (80001f8 <SystemClock_Config+0x88>)
 80001e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001e4:	6053      	str	r3, [r2, #4]
    // APB2 Prescaler: HCLK not divided (72 MHz for USART1)
    RCC->CFGR |= (0x0 << 11); // PPRE2 = 0b000 (HCLK/1)
 80001e6:	4b04      	ldr	r3, [pc, #16]	@ (80001f8 <SystemClock_Config+0x88>)
 80001e8:	4a03      	ldr	r2, [pc, #12]	@ (80001f8 <SystemClock_Config+0x88>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	6053      	str	r3, [r2, #4]



   }
 80001ee:	bf00      	nop
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	40021000 	.word	0x40021000
 80001fc:	40022000 	.word	0x40022000

08000200 <NVIC_SetPriorityGrouping>:
}



/* Set Priority Grouping */
 void NVIC_SetPriorityGrouping(uint32_t priority_group) {
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
    uint32_t reg_value;

    reg_value  = SCB_AIRCR;
 8000208:	4b0b      	ldr	r3, [pc, #44]	@ (8000238 <NVIC_SetPriorityGrouping+0x38>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	60fb      	str	r3, [r7, #12]
    reg_value &= ~(SCB_AIRCR_VECTKEY_MASK | SCB_AIRCR_PRIGROUP_MASK); // Clear fields
 800020e:	68fa      	ldr	r2, [r7, #12]
 8000210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000214:	4013      	ands	r3, r2
 8000216:	60fb      	str	r3, [r7, #12]
    reg_value |= (SCB_AIRCR_VECTKEY | priority_group);                // Set key and group
 8000218:	687a      	ldr	r2, [r7, #4]
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	4313      	orrs	r3, r2
 800021e:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000222:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000226:	60fb      	str	r3, [r7, #12]
    SCB_AIRCR  = reg_value;
 8000228:	4a03      	ldr	r2, [pc, #12]	@ (8000238 <NVIC_SetPriorityGrouping+0x38>)
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	6013      	str	r3, [r2, #0]
}
 800022e:	bf00      	nop
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	e000ed0c 	.word	0xe000ed0c

0800023c <Select_GPIO>:
/**********************************************************/
/*************************__GPIO__*************************/
/**********************************************************/

// Function to select GPIO port
GPIO_TypeDef* Select_GPIO(uint8_t port) {
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
    switch (port) {
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	3b01      	subs	r3, #1
 800024a:	2b04      	cmp	r3, #4
 800024c:	d816      	bhi.n	800027c <Select_GPIO+0x40>
 800024e:	a201      	add	r2, pc, #4	@ (adr r2, 8000254 <Select_GPIO+0x18>)
 8000250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000254:	08000269 	.word	0x08000269
 8000258:	0800026d 	.word	0x0800026d
 800025c:	08000271 	.word	0x08000271
 8000260:	08000275 	.word	0x08000275
 8000264:	08000279 	.word	0x08000279
        case 1: return GPIOA;
 8000268:	4b07      	ldr	r3, [pc, #28]	@ (8000288 <Select_GPIO+0x4c>)
 800026a:	e008      	b.n	800027e <Select_GPIO+0x42>
        case 2: return GPIOB;
 800026c:	4b07      	ldr	r3, [pc, #28]	@ (800028c <Select_GPIO+0x50>)
 800026e:	e006      	b.n	800027e <Select_GPIO+0x42>
        case 3: return GPIOC;
 8000270:	4b07      	ldr	r3, [pc, #28]	@ (8000290 <Select_GPIO+0x54>)
 8000272:	e004      	b.n	800027e <Select_GPIO+0x42>
        case 4: return GPIOD;
 8000274:	4b07      	ldr	r3, [pc, #28]	@ (8000294 <Select_GPIO+0x58>)
 8000276:	e002      	b.n	800027e <Select_GPIO+0x42>
        case 5: return GPIOE;
 8000278:	4b07      	ldr	r3, [pc, #28]	@ (8000298 <Select_GPIO+0x5c>)
 800027a:	e000      	b.n	800027e <Select_GPIO+0x42>
        default: return 0; // Return NULL for invalid port
 800027c:	2300      	movs	r3, #0
    }
}
 800027e:	4618      	mov	r0, r3
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr
 8000288:	40010800 	.word	0x40010800
 800028c:	40010c00 	.word	0x40010c00
 8000290:	40011000 	.word	0x40011000
 8000294:	40011400 	.word	0x40011400
 8000298:	40011800 	.word	0x40011800

0800029c <Config_GPIO>:




// Function to configure GPIO 
void Config_GPIO(uint8_t port, uint8_t pin, uint8_t mode, uint8_t config) {
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b087      	sub	sp, #28
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4604      	mov	r4, r0
 80002a4:	4608      	mov	r0, r1
 80002a6:	4611      	mov	r1, r2
 80002a8:	461a      	mov	r2, r3
 80002aa:	4623      	mov	r3, r4
 80002ac:	71fb      	strb	r3, [r7, #7]
 80002ae:	4603      	mov	r3, r0
 80002b0:	71bb      	strb	r3, [r7, #6]
 80002b2:	460b      	mov	r3, r1
 80002b4:	717b      	strb	r3, [r7, #5]
 80002b6:	4613      	mov	r3, r2
 80002b8:	713b      	strb	r3, [r7, #4]
    GPIO_TypeDef *GPIOx = Select_GPIO(port);
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ffbd 	bl	800023c <Select_GPIO>
 80002c2:	6178      	str	r0, [r7, #20]
    if (!GPIOx) return; // Return if invalid port
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d031      	beq.n	800032e <Config_GPIO+0x92>

    // Enable the corresponding GPIO clock
    RCC->APB2ENR |= (1 << (port + 1));
 80002ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000338 <Config_GPIO+0x9c>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	79fa      	ldrb	r2, [r7, #7]
 80002d0:	3201      	adds	r2, #1
 80002d2:	2101      	movs	r1, #1
 80002d4:	fa01 f202 	lsl.w	r2, r1, r2
 80002d8:	4611      	mov	r1, r2
 80002da:	4a17      	ldr	r2, [pc, #92]	@ (8000338 <Config_GPIO+0x9c>)
 80002dc:	430b      	orrs	r3, r1
 80002de:	6193      	str	r3, [r2, #24]

    volatile uint32_t *reg = (pin < 8) ? &GPIOx->CRL : &GPIOx->CRH;
 80002e0:	79bb      	ldrb	r3, [r7, #6]
 80002e2:	2b07      	cmp	r3, #7
 80002e4:	d801      	bhi.n	80002ea <Config_GPIO+0x4e>
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	e001      	b.n	80002ee <Config_GPIO+0x52>
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	3304      	adds	r3, #4
 80002ee:	613b      	str	r3, [r7, #16]
    uint8_t pos = (pin % 8) * 4;
 80002f0:	79bb      	ldrb	r3, [r7, #6]
 80002f2:	f003 0307 	and.w	r3, r3, #7
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	73fb      	strb	r3, [r7, #15]

    *reg &= ~(0xF << pos); // Clear bits
 80002fc:	693b      	ldr	r3, [r7, #16]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	7bfa      	ldrb	r2, [r7, #15]
 8000302:	210f      	movs	r1, #15
 8000304:	fa01 f202 	lsl.w	r2, r1, r2
 8000308:	43d2      	mvns	r2, r2
 800030a:	401a      	ands	r2, r3
 800030c:	693b      	ldr	r3, [r7, #16]
 800030e:	601a      	str	r2, [r3, #0]
    *reg |= ((mode) << pos) | ((config) << (pos + 2)); // Set mode and config
 8000310:	693b      	ldr	r3, [r7, #16]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	7979      	ldrb	r1, [r7, #5]
 8000316:	7bfa      	ldrb	r2, [r7, #15]
 8000318:	4091      	lsls	r1, r2
 800031a:	7938      	ldrb	r0, [r7, #4]
 800031c:	7bfa      	ldrb	r2, [r7, #15]
 800031e:	3202      	adds	r2, #2
 8000320:	fa00 f202 	lsl.w	r2, r0, r2
 8000324:	430a      	orrs	r2, r1
 8000326:	431a      	orrs	r2, r3
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	e000      	b.n	8000330 <Config_GPIO+0x94>
    if (!GPIOx) return; // Return if invalid port
 800032e:	bf00      	nop
}
 8000330:	371c      	adds	r7, #28
 8000332:	46bd      	mov	sp, r7
 8000334:	bd90      	pop	{r4, r7, pc}
 8000336:	bf00      	nop
 8000338:	40021000 	.word	0x40021000

0800033c <Write_GPIO>:

//function to write into gpio pin
void Write_GPIO (uint8_t port, uint8_t pin, uint8_t state){
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
 8000346:	460b      	mov	r3, r1
 8000348:	71bb      	strb	r3, [r7, #6]
 800034a:	4613      	mov	r3, r2
 800034c:	717b      	strb	r3, [r7, #5]
	
		GPIO_TypeDef *GPIOx = Select_GPIO(port);
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff73 	bl	800023c <Select_GPIO>
 8000356:	60f8      	str	r0, [r7, #12]
    
		volatile uint32_t *odr = &GPIOx ->ODR;
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	330c      	adds	r3, #12
 800035c:	60bb      	str	r3, [r7, #8]
		
		//write the desired state to the desired pin
		state ? ((*odr |= 1 << pin)) : ((*odr &= ~(1 << pin)));
 800035e:	797b      	ldrb	r3, [r7, #5]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d009      	beq.n	8000378 <Write_GPIO+0x3c>
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	79ba      	ldrb	r2, [r7, #6]
 800036a:	2101      	movs	r1, #1
 800036c:	fa01 f202 	lsl.w	r2, r1, r2
 8000370:	431a      	orrs	r2, r3
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	601a      	str	r2, [r3, #0]

	
}
 8000376:	e009      	b.n	800038c <Write_GPIO+0x50>
		state ? ((*odr |= 1 << pin)) : ((*odr &= ~(1 << pin)));
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	79ba      	ldrb	r2, [r7, #6]
 800037e:	2101      	movs	r1, #1
 8000380:	fa01 f202 	lsl.w	r2, r1, r2
 8000384:	43d2      	mvns	r2, r2
 8000386:	401a      	ands	r2, r3
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	601a      	str	r2, [r3, #0]
}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <toggle_gpio>:
		return *idr;
		
}

//function to toggle gpio pin
void toggle_gpio (uint8_t port, uint8_t pin){
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	460a      	mov	r2, r1
 800039e:	71fb      	strb	r3, [r7, #7]
 80003a0:	4613      	mov	r3, r2
 80003a2:	71bb      	strb	r3, [r7, #6]
	GPIO_TypeDef *GPIOx = Select_GPIO(port);  
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff ff48 	bl	800023c <Select_GPIO>
 80003ac:	60f8      	str	r0, [r7, #12]
  // toggle the bit in the Output Data Register (ODR)
  GPIOx->ODR ^= (1 << pin);
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	68db      	ldr	r3, [r3, #12]
 80003b2:	79ba      	ldrb	r2, [r7, #6]
 80003b4:	2101      	movs	r1, #1
 80003b6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ba:	405a      	eors	r2, r3
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	60da      	str	r2, [r3, #12]
}
 80003c0:	bf00      	nop
 80003c2:	3710      	adds	r7, #16
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <NVIC_SetPriority>:

/**********************************************************/
/*************************__NVIC Priority Set__*************************/
/**********************************************************/

void NVIC_SetPriority(uint8_t irq_number, uint8_t priority_level) {
 80003c8:	b480      	push	{r7}
 80003ca:	b089      	sub	sp, #36	@ 0x24
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	460a      	mov	r2, r1
 80003d2:	71fb      	strb	r3, [r7, #7]
 80003d4:	4613      	mov	r3, r2
 80003d6:	71bb      	strb	r3, [r7, #6]
    // Mask priority to 4 bits
    priority_level &= 0x0F;
 80003d8:	79bb      	ldrb	r3, [r7, #6]
 80003da:	f003 030f 	and.w	r3, r3, #15
 80003de:	71bb      	strb	r3, [r7, #6]

    // Calculate IPR register index and position
    uint32_t ipr_index = irq_number / 4;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	089b      	lsrs	r3, r3, #2
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	61fb      	str	r3, [r7, #28]
    uint8_t byte_pos = irq_number % 4;
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	f003 0303 	and.w	r3, r3, #3
 80003ee:	76fb      	strb	r3, [r7, #27]
    uint32_t shift = (byte_pos * 8) + 4;  // Upper nibble of each byte
 80003f0:	7efb      	ldrb	r3, [r7, #27]
 80003f2:	00db      	lsls	r3, r3, #3
 80003f4:	3304      	adds	r3, #4
 80003f6:	617b      	str	r3, [r7, #20]

    // Get pointer to the NVIC_IPR register
    volatile uint32_t *nvic_ipr = (volatile uint32_t *)(0xE000E400 + (ipr_index * 4));
 80003f8:	69fb      	ldr	r3, [r7, #28]
 80003fa:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 80003fe:	f503 5364 	add.w	r3, r3, #14592	@ 0x3900
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	613b      	str	r3, [r7, #16]

    // Apply priority (only upper 4 bits used in each byte)
    uint32_t mask = 0x0F << shift;
 8000406:	220f      	movs	r2, #15
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	fa02 f303 	lsl.w	r3, r2, r3
 800040e:	60fb      	str	r3, [r7, #12]
    *nvic_ipr = (*nvic_ipr & ~mask) | ((priority_level & 0x0F) << shift);
 8000410:	693b      	ldr	r3, [r7, #16]
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	43db      	mvns	r3, r3
 8000418:	4013      	ands	r3, r2
 800041a:	79ba      	ldrb	r2, [r7, #6]
 800041c:	f002 010f 	and.w	r1, r2, #15
 8000420:	697a      	ldr	r2, [r7, #20]
 8000422:	fa01 f202 	lsl.w	r2, r1, r2
 8000426:	431a      	orrs	r2, r3
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	601a      	str	r2, [r3, #0]
}
 800042c:	bf00      	nop
 800042e:	3724      	adds	r7, #36	@ 0x24
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
	...

08000438 <configure_gpio_interrupt>:

/**********************************************************/
/*************************__GPIO_EXTI__*************************/
/**********************************************************/

void configure_gpio_interrupt(uint8_t pin, uint8_t port, uint8_t trigger_type,  uint8_t priority_level){
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	4604      	mov	r4, r0
 8000440:	4608      	mov	r0, r1
 8000442:	4611      	mov	r1, r2
 8000444:	461a      	mov	r2, r3
 8000446:	4623      	mov	r3, r4
 8000448:	71fb      	strb	r3, [r7, #7]
 800044a:	4603      	mov	r3, r0
 800044c:	71bb      	strb	r3, [r7, #6]
 800044e:	460b      	mov	r3, r1
 8000450:	717b      	strb	r3, [r7, #5]
 8000452:	4613      	mov	r3, r2
 8000454:	713b      	strb	r3, [r7, #4]
	__disableinterrupt();
 8000456:	b672      	cpsid	i
	volatile uint32_t *EXTI_X ;
	//Configuring the RCC register for AFIO
	RCC->APB2ENR |= (1<<0);
 8000458:	4b60      	ldr	r3, [pc, #384]	@ (80005dc <configure_gpio_interrupt+0x1a4>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a5f      	ldr	r2, [pc, #380]	@ (80005dc <configure_gpio_interrupt+0x1a4>)
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	6193      	str	r3, [r2, #24]
	if (pin <4){
 8000464:	79fb      	ldrb	r3, [r7, #7]
 8000466:	2b03      	cmp	r3, #3
 8000468:	d802      	bhi.n	8000470 <configure_gpio_interrupt+0x38>
		EXTI_X = &AFIO->EXTI_1;
 800046a:	4b5d      	ldr	r3, [pc, #372]	@ (80005e0 <configure_gpio_interrupt+0x1a8>)
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	e00d      	b.n	800048c <configure_gpio_interrupt+0x54>
	}
	else if (pin <8){
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	2b07      	cmp	r3, #7
 8000474:	d802      	bhi.n	800047c <configure_gpio_interrupt+0x44>
		EXTI_X = &AFIO->EXTI_2;
 8000476:	4b5b      	ldr	r3, [pc, #364]	@ (80005e4 <configure_gpio_interrupt+0x1ac>)
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	e007      	b.n	800048c <configure_gpio_interrupt+0x54>
	}
	else if (pin <12){
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	2b0b      	cmp	r3, #11
 8000480:	d802      	bhi.n	8000488 <configure_gpio_interrupt+0x50>
		EXTI_X = &AFIO->EXTI_3;
 8000482:	4b59      	ldr	r3, [pc, #356]	@ (80005e8 <configure_gpio_interrupt+0x1b0>)
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	e001      	b.n	800048c <configure_gpio_interrupt+0x54>
	}
	else { EXTI_X = &AFIO->EXTI_4; }
 8000488:	4b58      	ldr	r3, [pc, #352]	@ (80005ec <configure_gpio_interrupt+0x1b4>)
 800048a:	60fb      	str	r3, [r7, #12]
	
	*EXTI_X &= ~(0xF << ((pin % 4) * 4));  // Clear the 4 bits for the line
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	79fa      	ldrb	r2, [r7, #7]
 8000492:	f002 0203 	and.w	r2, r2, #3
 8000496:	0092      	lsls	r2, r2, #2
 8000498:	210f      	movs	r1, #15
 800049a:	fa01 f202 	lsl.w	r2, r1, r2
 800049e:	43d2      	mvns	r2, r2
 80004a0:	401a      	ands	r2, r3
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	601a      	str	r2, [r3, #0]
	*EXTI_X  |= (port << ((pin % 4) * 4));  // Set the new port value
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	79b9      	ldrb	r1, [r7, #6]
 80004ac:	79fa      	ldrb	r2, [r7, #7]
 80004ae:	f002 0203 	and.w	r2, r2, #3
 80004b2:	0092      	lsls	r2, r2, #2
 80004b4:	fa01 f202 	lsl.w	r2, r1, r2
 80004b8:	431a      	orrs	r2, r3
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	601a      	str	r2, [r3, #0]
	
	//enable the interrupt mask for the corresponding EXTI line
	EXTI->IMR |= (1<<pin);
 80004be:	4b4c      	ldr	r3, [pc, #304]	@ (80005f0 <configure_gpio_interrupt+0x1b8>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	79fa      	ldrb	r2, [r7, #7]
 80004c4:	2101      	movs	r1, #1
 80004c6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a48      	ldr	r2, [pc, #288]	@ (80005f0 <configure_gpio_interrupt+0x1b8>)
 80004ce:	430b      	orrs	r3, r1
 80004d0:	6013      	str	r3, [r2, #0]
	
	//configuring the trigger type
	if (trigger_type == 0) { //rising edge
 80004d2:	797b      	ldrb	r3, [r7, #5]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d115      	bne.n	8000504 <configure_gpio_interrupt+0xcc>
		EXTI->RTSR |= (1 << pin); 
 80004d8:	4b45      	ldr	r3, [pc, #276]	@ (80005f0 <configure_gpio_interrupt+0x1b8>)
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	79fa      	ldrb	r2, [r7, #7]
 80004de:	2101      	movs	r1, #1
 80004e0:	fa01 f202 	lsl.w	r2, r1, r2
 80004e4:	4611      	mov	r1, r2
 80004e6:	4a42      	ldr	r2, [pc, #264]	@ (80005f0 <configure_gpio_interrupt+0x1b8>)
 80004e8:	430b      	orrs	r3, r1
 80004ea:	6093      	str	r3, [r2, #8]
		EXTI->FTSR &= ~(1 << pin);  // Ensure falling edge is disabled
 80004ec:	4b40      	ldr	r3, [pc, #256]	@ (80005f0 <configure_gpio_interrupt+0x1b8>)
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	79fa      	ldrb	r2, [r7, #7]
 80004f2:	2101      	movs	r1, #1
 80004f4:	fa01 f202 	lsl.w	r2, r1, r2
 80004f8:	43d2      	mvns	r2, r2
 80004fa:	4611      	mov	r1, r2
 80004fc:	4a3c      	ldr	r2, [pc, #240]	@ (80005f0 <configure_gpio_interrupt+0x1b8>)
 80004fe:	400b      	ands	r3, r1
 8000500:	60d3      	str	r3, [r2, #12]
 8000502:	e017      	b.n	8000534 <configure_gpio_interrupt+0xfc>
	}

	else if (trigger_type == 1) { //falling edge
 8000504:	797b      	ldrb	r3, [r7, #5]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d114      	bne.n	8000534 <configure_gpio_interrupt+0xfc>
		EXTI->FTSR  |= (1 << pin); 
 800050a:	4b39      	ldr	r3, [pc, #228]	@ (80005f0 <configure_gpio_interrupt+0x1b8>)
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	79fa      	ldrb	r2, [r7, #7]
 8000510:	2101      	movs	r1, #1
 8000512:	fa01 f202 	lsl.w	r2, r1, r2
 8000516:	4611      	mov	r1, r2
 8000518:	4a35      	ldr	r2, [pc, #212]	@ (80005f0 <configure_gpio_interrupt+0x1b8>)
 800051a:	430b      	orrs	r3, r1
 800051c:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(1 << pin);  // Ensure rising edge is disabled
 800051e:	4b34      	ldr	r3, [pc, #208]	@ (80005f0 <configure_gpio_interrupt+0x1b8>)
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	79fa      	ldrb	r2, [r7, #7]
 8000524:	2101      	movs	r1, #1
 8000526:	fa01 f202 	lsl.w	r2, r1, r2
 800052a:	43d2      	mvns	r2, r2
 800052c:	4611      	mov	r1, r2
 800052e:	4a30      	ldr	r2, [pc, #192]	@ (80005f0 <configure_gpio_interrupt+0x1b8>)
 8000530:	400b      	ands	r3, r1
 8000532:	6093      	str	r3, [r2, #8]
	}
	if (trigger_type == 2) { //both edge
 8000534:	797b      	ldrb	r3, [r7, #5]
 8000536:	2b02      	cmp	r3, #2
 8000538:	d113      	bne.n	8000562 <configure_gpio_interrupt+0x12a>
		EXTI->RTSR |= (1 << pin); 
 800053a:	4b2d      	ldr	r3, [pc, #180]	@ (80005f0 <configure_gpio_interrupt+0x1b8>)
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	79fa      	ldrb	r2, [r7, #7]
 8000540:	2101      	movs	r1, #1
 8000542:	fa01 f202 	lsl.w	r2, r1, r2
 8000546:	4611      	mov	r1, r2
 8000548:	4a29      	ldr	r2, [pc, #164]	@ (80005f0 <configure_gpio_interrupt+0x1b8>)
 800054a:	430b      	orrs	r3, r1
 800054c:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << pin);  
 800054e:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <configure_gpio_interrupt+0x1b8>)
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	79fa      	ldrb	r2, [r7, #7]
 8000554:	2101      	movs	r1, #1
 8000556:	fa01 f202 	lsl.w	r2, r1, r2
 800055a:	4611      	mov	r1, r2
 800055c:	4a24      	ldr	r2, [pc, #144]	@ (80005f0 <configure_gpio_interrupt+0x1b8>)
 800055e:	430b      	orrs	r3, r1
 8000560:	60d3      	str	r3, [r2, #12]
	}
	
	
	//Enabling the NVIC interrupt for the exti line (lines 0–15 correspond to IRQ numbers 6–22)
	uint32_t irq_number;
	if (pin <= 4) {
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	2b04      	cmp	r3, #4
 8000566:	d80e      	bhi.n	8000586 <configure_gpio_interrupt+0x14e>
		irq_number = pin + 6;
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	3306      	adds	r3, #6
 800056c:	60bb      	str	r3, [r7, #8]
        NVIC_ISER0 |= (1 << (pin + 6));
 800056e:	4b21      	ldr	r3, [pc, #132]	@ (80005f4 <configure_gpio_interrupt+0x1bc>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	79fa      	ldrb	r2, [r7, #7]
 8000574:	3206      	adds	r2, #6
 8000576:	2101      	movs	r1, #1
 8000578:	fa01 f202 	lsl.w	r2, r1, r2
 800057c:	4611      	mov	r1, r2
 800057e:	4a1d      	ldr	r2, [pc, #116]	@ (80005f4 <configure_gpio_interrupt+0x1bc>)
 8000580:	430b      	orrs	r3, r1
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	e01f      	b.n	80005c6 <configure_gpio_interrupt+0x18e>
    }
		else if (pin > 4 && pin <=9){
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b04      	cmp	r3, #4
 800058a:	d90b      	bls.n	80005a4 <configure_gpio_interrupt+0x16c>
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	2b09      	cmp	r3, #9
 8000590:	d808      	bhi.n	80005a4 <configure_gpio_interrupt+0x16c>
			 irq_number = 23;
 8000592:	2317      	movs	r3, #23
 8000594:	60bb      	str	r3, [r7, #8]
			NVIC_ISER0 |= (1 << 23);
 8000596:	4b17      	ldr	r3, [pc, #92]	@ (80005f4 <configure_gpio_interrupt+0x1bc>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a16      	ldr	r2, [pc, #88]	@ (80005f4 <configure_gpio_interrupt+0x1bc>)
 800059c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80005a0:	6013      	str	r3, [r2, #0]
 80005a2:	e010      	b.n	80005c6 <configure_gpio_interrupt+0x18e>
		}
		else if (pin > 9 && pin <=15){
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2b09      	cmp	r3, #9
 80005a8:	d90b      	bls.n	80005c2 <configure_gpio_interrupt+0x18a>
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b0f      	cmp	r3, #15
 80005ae:	d808      	bhi.n	80005c2 <configure_gpio_interrupt+0x18a>
			irq_number = 40;
 80005b0:	2328      	movs	r3, #40	@ 0x28
 80005b2:	60bb      	str	r3, [r7, #8]
			NVIC_ISER1 |= (1 << 8);
 80005b4:	4b10      	ldr	r3, [pc, #64]	@ (80005f8 <configure_gpio_interrupt+0x1c0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0f      	ldr	r2, [pc, #60]	@ (80005f8 <configure_gpio_interrupt+0x1c0>)
 80005ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	e001      	b.n	80005c6 <configure_gpio_interrupt+0x18e>
		}
		else {
		        __enableinterrupt();
 80005c2:	b662      	cpsie	i
		        return; // Invalid pin
 80005c4:	e007      	b.n	80005d6 <configure_gpio_interrupt+0x19e>
		    }

	NVIC_SetPriority(irq_number ,priority_level );
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	793a      	ldrb	r2, [r7, #4]
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff fefa 	bl	80003c8 <NVIC_SetPriority>

	    __enableinterrupt();
 80005d4:	b662      	cpsie	i

}
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd90      	pop	{r4, r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010008 	.word	0x40010008
 80005e4:	4001000c 	.word	0x4001000c
 80005e8:	40010010 	.word	0x40010010
 80005ec:	40010014 	.word	0x40010014
 80005f0:	40010400 	.word	0x40010400
 80005f4:	e000e100 	.word	0xe000e100
 80005f8:	e000e104 	.word	0xe000e104

080005fc <EXTI15_10_IRQHandler>:

TaskHandle_t volatile NextTask_To_Handle = NULL;
BaseType_t status;


void EXTI15_10_IRQHandler (void){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken = pdFALSE;
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
	xTaskNotifyFromISR (NextTask_To_Handle,0,eNoAction, &pxHigherPriorityTaskWoken );
 8000606:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <EXTI15_10_IRQHandler+0x4c>)
 8000608:	6818      	ldr	r0, [r3, #0]
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2300      	movs	r3, #0
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	2200      	movs	r2, #0
 8000616:	2100      	movs	r1, #0
 8000618:	f001 f886 	bl	8001728 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR (pxHigherPriorityTaskWoken);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d007      	beq.n	8000632 <EXTI15_10_IRQHandler+0x36>
 8000622:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <EXTI15_10_IRQHandler+0x50>)
 8000624:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	f3bf 8f4f 	dsb	sy
 800062e:	f3bf 8f6f 	isb	sy

	EXTI->PR |= (1 << 13); // Clearing the interrupt flag
 8000632:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <EXTI15_10_IRQHandler+0x54>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a06      	ldr	r2, [pc, #24]	@ (8000650 <EXTI15_10_IRQHandler+0x54>)
 8000638:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800063c:	6153      	str	r3, [r2, #20]
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000034 	.word	0x20000034
 800064c:	e000ed04 	.word	0xe000ed04
 8000650:	40010400 	.word	0x40010400

08000654 <Task1_Handler>:


static void (Task1_Handler) (void* parameters) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af02      	add	r7, sp, #8
 800065a:	6078      	str	r0, [r7, #4]

	BaseType_t status;
	while (1){
		toggle_gpio (portC, 0);
 800065c:	2100      	movs	r1, #0
 800065e:	2003      	movs	r0, #3
 8000660:	f7ff fe98 	bl	8000394 <toggle_gpio>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000) );
 8000664:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	2200      	movs	r2, #0
 800066e:	2100      	movs	r1, #0
 8000670:	2000      	movs	r0, #0
 8000672:	f000 ffc1 	bl	80015f8 <xTaskGenericNotifyWait>
 8000676:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d1ee      	bne.n	800065c <Task1_Handler+0x8>
			portENTER_CRITICAL();
 800067e:	f001 fb7b 	bl	8001d78 <vPortEnterCritical>
			NextTask_To_Handle = task2_Handle;
 8000682:	4b07      	ldr	r3, [pc, #28]	@ (80006a0 <Task1_Handler+0x4c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a07      	ldr	r2, [pc, #28]	@ (80006a4 <Task1_Handler+0x50>)
 8000688:	6013      	str	r3, [r2, #0]
			Write_GPIO (portC , 0 ,  HIGH);
 800068a:	2201      	movs	r2, #1
 800068c:	2100      	movs	r1, #0
 800068e:	2003      	movs	r0, #3
 8000690:	f7ff fe54 	bl	800033c <Write_GPIO>
			portEXIT_CRITICAL();
 8000694:	f001 fba0 	bl	8001dd8 <vPortExitCritical>

			vTaskDelete(NULL);
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fb47 	bl	8000d2c <vTaskDelete>
		toggle_gpio (portC, 0);
 800069e:	e7dd      	b.n	800065c <Task1_Handler+0x8>
 80006a0:	20000028 	.word	0x20000028
 80006a4:	20000034 	.word	0x20000034

080006a8 <Task2_Handler>:
		}

	}
	}

static void (Task2_Handler) (void* parameters) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af02      	add	r7, sp, #8
 80006ae:	6078      	str	r0, [r7, #4]


	BaseType_t status;
	while (1){
		toggle_gpio (portC, 1);
 80006b0:	2101      	movs	r1, #1
 80006b2:	2003      	movs	r0, #3
 80006b4:	f7ff fe6e 	bl	8000394 <toggle_gpio>

		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800) );
 80006b8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2300      	movs	r3, #0
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 ff97 	bl	80015f8 <xTaskGenericNotifyWait>
 80006ca:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d1ee      	bne.n	80006b0 <Task2_Handler+0x8>
			portENTER_CRITICAL();
 80006d2:	f001 fb51 	bl	8001d78 <vPortEnterCritical>
			NextTask_To_Handle = task3_Handle;
 80006d6:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <Task2_Handler+0x4c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a07      	ldr	r2, [pc, #28]	@ (80006f8 <Task2_Handler+0x50>)
 80006dc:	6013      	str	r3, [r2, #0]
			Write_GPIO (portC , 1 ,  HIGH);
 80006de:	2201      	movs	r2, #1
 80006e0:	2101      	movs	r1, #1
 80006e2:	2003      	movs	r0, #3
 80006e4:	f7ff fe2a 	bl	800033c <Write_GPIO>
			portEXIT_CRITICAL();
 80006e8:	f001 fb76 	bl	8001dd8 <vPortExitCritical>
			vTaskDelete(NULL);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f000 fb1d 	bl	8000d2c <vTaskDelete>
		toggle_gpio (portC, 1);
 80006f2:	e7dd      	b.n	80006b0 <Task2_Handler+0x8>
 80006f4:	2000002c 	.word	0x2000002c
 80006f8:	20000034 	.word	0x20000034

080006fc <Task3_Handler>:
			}
	}
	}

static void (Task3_Handler) (void* parameters) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af02      	add	r7, sp, #8
 8000702:	6078      	str	r0, [r7, #4]


	BaseType_t status;
	while (1){
		toggle_gpio (portB, 0);
 8000704:	2100      	movs	r1, #0
 8000706:	2002      	movs	r0, #2
 8000708:	f7ff fe44 	bl	8000394 <toggle_gpio>

		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400) );
 800070c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2300      	movs	r3, #0
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	2000      	movs	r0, #0
 800071a:	f000 ff6d 	bl	80015f8 <xTaskGenericNotifyWait>
 800071e:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d1ee      	bne.n	8000704 <Task3_Handler+0x8>

			portENTER_CRITICAL();
 8000726:	f001 fb27 	bl	8001d78 <vPortEnterCritical>
			NextTask_To_Handle = NULL;
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <Task3_Handler+0x54>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
			Write_GPIO (portB , 0 ,  HIGH);
 8000730:	2201      	movs	r2, #1
 8000732:	2100      	movs	r1, #0
 8000734:	2002      	movs	r0, #2
 8000736:	f7ff fe01 	bl	800033c <Write_GPIO>
			portEXIT_CRITICAL();
 800073a:	f001 fb4d 	bl	8001dd8 <vPortExitCritical>
			vTaskDelete(task4_Handle);
 800073e:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <Task3_Handler+0x58>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	f000 faf2 	bl	8000d2c <vTaskDelete>
			vTaskDelete(NULL);
 8000748:	2000      	movs	r0, #0
 800074a:	f000 faef 	bl	8000d2c <vTaskDelete>
		toggle_gpio (portB, 0);
 800074e:	e7d9      	b.n	8000704 <Task3_Handler+0x8>
 8000750:	20000034 	.word	0x20000034
 8000754:	20000030 	.word	0x20000030

08000758 <main>:
	}




int main(void){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af02      	add	r7, sp, #8

	SystemClock_Config();
 800075e:	f7ff fd07 	bl	8000170 <SystemClock_Config>
	NVIC_SetPriorityGrouping(NVIC_PRIORITY_GROUP_0); // 0 bits for subpriority, 4 bits for preemption
 8000762:	2000      	movs	r0, #0
 8000764:	f7ff fd4c 	bl	8000200 <NVIC_SetPriorityGrouping>


	//configure gpio pins
	Config_GPIO(portC, 0, output_50Mhz, gp_output );
 8000768:	2300      	movs	r3, #0
 800076a:	2203      	movs	r2, #3
 800076c:	2100      	movs	r1, #0
 800076e:	2003      	movs	r0, #3
 8000770:	f7ff fd94 	bl	800029c <Config_GPIO>
	Config_GPIO(portC, 1, output_50Mhz, gp_output );
 8000774:	2300      	movs	r3, #0
 8000776:	2203      	movs	r2, #3
 8000778:	2101      	movs	r1, #1
 800077a:	2003      	movs	r0, #3
 800077c:	f7ff fd8e 	bl	800029c <Config_GPIO>
	Config_GPIO(portB, 0, output_50Mhz, gp_output );
 8000780:	2300      	movs	r3, #0
 8000782:	2203      	movs	r2, #3
 8000784:	2100      	movs	r1, #0
 8000786:	2002      	movs	r0, #2
 8000788:	f7ff fd88 	bl	800029c <Config_GPIO>

	configure_gpio_interrupt(13, INT_PORT_C, FALLING, 6);
 800078c:	2306      	movs	r3, #6
 800078e:	2201      	movs	r2, #1
 8000790:	2102      	movs	r1, #2
 8000792:	200d      	movs	r0, #13
 8000794:	f7ff fe50 	bl	8000438 <configure_gpio_interrupt>




    // Task Creation
    status = xTaskCreate(Task1_Handler, "Green LED", 128, NULL, 3, &task1_Handle);
 8000798:	4b2f      	ldr	r3, [pc, #188]	@ (8000858 <main+0x100>)
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	2303      	movs	r3, #3
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2300      	movs	r3, #0
 80007a2:	2280      	movs	r2, #128	@ 0x80
 80007a4:	492d      	ldr	r1, [pc, #180]	@ (800085c <main+0x104>)
 80007a6:	482e      	ldr	r0, [pc, #184]	@ (8000860 <main+0x108>)
 80007a8:	f000 f980 	bl	8000aac <xTaskCreate>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4a2d      	ldr	r2, [pc, #180]	@ (8000864 <main+0x10c>)
 80007b0:	6013      	str	r3, [r2, #0]
    configASSERT(status == pdPASS);
 80007b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000864 <main+0x10c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d00b      	beq.n	80007d2 <main+0x7a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80007ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007be:	f383 8811 	msr	BASEPRI, r3
 80007c2:	f3bf 8f6f 	isb	sy
 80007c6:	f3bf 8f4f 	dsb	sy
 80007ca:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	e7fd      	b.n	80007ce <main+0x76>

    status = xTaskCreate(Task2_Handler, "RED_LED", 128, NULL, 2, &task2_Handle);
 80007d2:	4b25      	ldr	r3, [pc, #148]	@ (8000868 <main+0x110>)
 80007d4:	9301      	str	r3, [sp, #4]
 80007d6:	2302      	movs	r3, #2
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	2300      	movs	r3, #0
 80007dc:	2280      	movs	r2, #128	@ 0x80
 80007de:	4923      	ldr	r1, [pc, #140]	@ (800086c <main+0x114>)
 80007e0:	4823      	ldr	r0, [pc, #140]	@ (8000870 <main+0x118>)
 80007e2:	f000 f963 	bl	8000aac <xTaskCreate>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4a1e      	ldr	r2, [pc, #120]	@ (8000864 <main+0x10c>)
 80007ea:	6013      	str	r3, [r2, #0]
    configASSERT(status == pdPASS);
 80007ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000864 <main+0x10c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d00b      	beq.n	800080c <main+0xb4>
    __asm volatile
 80007f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007f8:	f383 8811 	msr	BASEPRI, r3
 80007fc:	f3bf 8f6f 	isb	sy
 8000800:	f3bf 8f4f 	dsb	sy
 8000804:	60bb      	str	r3, [r7, #8]
}
 8000806:	bf00      	nop
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <main+0xb0>

    status = xTaskCreate(Task3_Handler, "Blue_LED", 128, NULL, 1, &task3_Handle);
 800080c:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <main+0x11c>)
 800080e:	9301      	str	r3, [sp, #4]
 8000810:	2301      	movs	r3, #1
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2300      	movs	r3, #0
 8000816:	2280      	movs	r2, #128	@ 0x80
 8000818:	4917      	ldr	r1, [pc, #92]	@ (8000878 <main+0x120>)
 800081a:	4818      	ldr	r0, [pc, #96]	@ (800087c <main+0x124>)
 800081c:	f000 f946 	bl	8000aac <xTaskCreate>
 8000820:	4603      	mov	r3, r0
 8000822:	4a10      	ldr	r2, [pc, #64]	@ (8000864 <main+0x10c>)
 8000824:	6013      	str	r3, [r2, #0]
    configASSERT(status == pdPASS);
 8000826:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <main+0x10c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d00b      	beq.n	8000846 <main+0xee>
    __asm volatile
 800082e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000832:	f383 8811 	msr	BASEPRI, r3
 8000836:	f3bf 8f6f 	isb	sy
 800083a:	f3bf 8f4f 	dsb	sy
 800083e:	607b      	str	r3, [r7, #4]
}
 8000840:	bf00      	nop
 8000842:	bf00      	nop
 8000844:	e7fd      	b.n	8000842 <main+0xea>


    NextTask_To_Handle = task1_Handle;
 8000846:	4b04      	ldr	r3, [pc, #16]	@ (8000858 <main+0x100>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a0d      	ldr	r2, [pc, #52]	@ (8000880 <main+0x128>)
 800084c:	6013      	str	r3, [r2, #0]

    vTaskStartScheduler();
 800084e:	f000 fb59 	bl	8000f04 <vTaskStartScheduler>



    /* Loop forever */
	for(;;){}
 8000852:	bf00      	nop
 8000854:	e7fd      	b.n	8000852 <main+0xfa>
 8000856:	bf00      	nop
 8000858:	20000024 	.word	0x20000024
 800085c:	080024e0 	.word	0x080024e0
 8000860:	08000655 	.word	0x08000655
 8000864:	20000038 	.word	0x20000038
 8000868:	20000028 	.word	0x20000028
 800086c:	080024ec 	.word	0x080024ec
 8000870:	080006a9 	.word	0x080006a9
 8000874:	2000002c 	.word	0x2000002c
 8000878:	080024f4 	.word	0x080024f4
 800087c:	080006fd 	.word	0x080006fd
 8000880:	20000034 	.word	0x20000034

08000884 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000884:	480d      	ldr	r0, [pc, #52]	@ (80008bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000886:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000888:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800088c:	480c      	ldr	r0, [pc, #48]	@ (80008c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800088e:	490d      	ldr	r1, [pc, #52]	@ (80008c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000890:	4a0d      	ldr	r2, [pc, #52]	@ (80008c8 <LoopForever+0xe>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000894:	e002      	b.n	800089c <LoopCopyDataInit>

08000896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089a:	3304      	adds	r3, #4

0800089c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800089c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a0:	d3f9      	bcc.n	8000896 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a2:	4a0a      	ldr	r2, [pc, #40]	@ (80008cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a4:	4c0a      	ldr	r4, [pc, #40]	@ (80008d0 <LoopForever+0x16>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a8:	e001      	b.n	80008ae <LoopFillZerobss>

080008aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ac:	3204      	adds	r2, #4

080008ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b0:	d3fb      	bcc.n	80008aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008b2:	f001 fde5 	bl	8002480 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b6:	f7ff ff4f 	bl	8000758 <main>

080008ba <LoopForever>:

LoopForever:
  b LoopForever
 80008ba:	e7fe      	b.n	80008ba <LoopForever>
  ldr   r0, =_estack
 80008bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80008c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c4:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80008c8:	08002510 	.word	0x08002510
  ldr r2, =_sbss
 80008cc:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80008d0:	20003164 	.word	0x20003164

080008d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC1_2_IRQHandler>

080008d6 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f103 0208 	add.w	r2, r3, #8
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f04f 32ff 	mov.w	r2, #4294967295
 80008ee:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f103 0208 	add.w	r2, r3, #8
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f103 0208 	add.w	r2, r3, #8
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	689a      	ldr	r2, [r3, #8]
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	683a      	ldr	r2, [r7, #0]
 8000950:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr

08000972 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000972:	b480      	push	{r7}
 8000974:	b085      	sub	sp, #20
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000988:	d103      	bne.n	8000992 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	691b      	ldr	r3, [r3, #16]
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	e00c      	b.n	80009ac <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3308      	adds	r3, #8
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	e002      	b.n	80009a0 <vListInsert+0x2e>
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d2f6      	bcs.n	800099a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	685a      	ldr	r2, [r3, #4]
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	683a      	ldr	r2, [r7, #0]
 80009c6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr

080009e2 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80009e2:	b480      	push	{r7}
 80009e4:	b085      	sub	sp, #20
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	6892      	ldr	r2, [r2, #8]
 80009f8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	6852      	ldr	r2, [r2, #4]
 8000a02:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d103      	bne.n	8000a16 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	689a      	ldr	r2, [r3, #8]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	1e5a      	subs	r2, r3, #1
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	@ 0x28
 8000a38:	af04      	add	r7, sp, #16
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
 8000a40:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fa92 	bl	8001f70 <pvPortMalloc>
 8000a4c:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d013      	beq.n	8000a7c <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000a54:	2054      	movs	r0, #84	@ 0x54
 8000a56:	f001 fa8b 	bl	8001f70 <pvPortMalloc>
 8000a5a:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d008      	beq.n	8000a74 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000a62:	2254      	movs	r2, #84	@ 0x54
 8000a64:	2100      	movs	r1, #0
 8000a66:	6978      	ldr	r0, [r7, #20]
 8000a68:	f001 fd02 	bl	8002470 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a72:	e005      	b.n	8000a80 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000a74:	6938      	ldr	r0, [r7, #16]
 8000a76:	f001 fbad 	bl	80021d4 <vPortFree>
 8000a7a:	e001      	b.n	8000a80 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00d      	beq.n	8000aa2 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000a86:	2300      	movs	r3, #0
 8000a88:	9303      	str	r3, [sp, #12]
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	9302      	str	r3, [sp, #8]
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	6a3b      	ldr	r3, [r7, #32]
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	68b9      	ldr	r1, [r7, #8]
 8000a9c:	68f8      	ldr	r0, [r7, #12]
 8000a9e:	f000 f828 	bl	8000af2 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8000aa2:	697b      	ldr	r3, [r7, #20]
    }
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af02      	add	r7, sp, #8
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
 8000ab8:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8000aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	6a3b      	ldr	r3, [r7, #32]
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	68b9      	ldr	r1, [r7, #8]
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	f7ff ffb3 	bl	8000a34 <prvCreateTask>
 8000ace:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d005      	beq.n	8000ae2 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8000ad6:	6938      	ldr	r0, [r7, #16]
 8000ad8:	f000 f894 	bl	8000c04 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000adc:	2301      	movs	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e002      	b.n	8000ae8 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8000ae8:	697b      	ldr	r3, [r7, #20]
    }
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b088      	sub	sp, #32
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8000b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	4413      	add	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	f023 0307 	bic.w	r3, r3, #7
 8000b18:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	f003 0307 	and.w	r3, r3, #7
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00b      	beq.n	8000b3c <prvInitialiseNewTask+0x4a>
    __asm volatile
 8000b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b28:	f383 8811 	msr	BASEPRI, r3
 8000b2c:	f3bf 8f6f 	isb	sy
 8000b30:	f3bf 8f4f 	dsb	sy
 8000b34:	617b      	str	r3, [r7, #20]
}
 8000b36:	bf00      	nop
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d01e      	beq.n	8000b80 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
 8000b46:	e012      	b.n	8000b6e <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000b48:	68ba      	ldr	r2, [r7, #8]
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	7819      	ldrb	r1, [r3, #0]
 8000b50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	4413      	add	r3, r2
 8000b56:	3334      	adds	r3, #52	@ 0x34
 8000b58:	460a      	mov	r2, r1
 8000b5a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000b5c:	68ba      	ldr	r2, [r7, #8]
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	4413      	add	r3, r2
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d006      	beq.n	8000b76 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	61fb      	str	r3, [r7, #28]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d9e9      	bls.n	8000b48 <prvInitialiseNewTask+0x56>
 8000b74:	e000      	b.n	8000b78 <prvInitialiseNewTask+0x86>
            {
                break;
 8000b76:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8000b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	d90b      	bls.n	8000b9e <prvInitialiseNewTask+0xac>
    __asm volatile
 8000b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b8a:	f383 8811 	msr	BASEPRI, r3
 8000b8e:	f3bf 8f6f 	isb	sy
 8000b92:	f3bf 8f4f 	dsb	sy
 8000b96:	613b      	str	r3, [r7, #16]
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	e7fd      	b.n	8000b9a <prvInitialiseNewTask+0xa8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	d901      	bls.n	8000ba8 <prvInitialiseNewTask+0xb6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000baa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000bac:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000bb2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff feab 	bl	8000914 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bc0:	3318      	adds	r3, #24
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fea6 	bl	8000914 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bcc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8000bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bd0:	f1c3 0205 	rsb	r2, r3, #5
 8000bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bd6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bdc:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	68f9      	ldr	r1, [r7, #12]
 8000be2:	69b8      	ldr	r0, [r7, #24]
 8000be4:	f000 ff8a 	bl	8001afc <pxPortInitialiseStack>
 8000be8:	4602      	mov	r2, r0
 8000bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bec:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8000bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <prvInitialiseNewTask+0x108>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bf8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000bfa:	bf00      	nop
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8000c0c:	f001 f8b4 	bl	8001d78 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8000c10:	4b3f      	ldr	r3, [pc, #252]	@ (8000d10 <prvAddNewTaskToReadyList+0x10c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	3301      	adds	r3, #1
 8000c16:	4a3e      	ldr	r2, [pc, #248]	@ (8000d10 <prvAddNewTaskToReadyList+0x10c>)
 8000c18:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8000c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d14 <prvAddNewTaskToReadyList+0x110>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d109      	bne.n	8000c36 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8000c22:	4a3c      	ldr	r2, [pc, #240]	@ (8000d14 <prvAddNewTaskToReadyList+0x110>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000c28:	4b39      	ldr	r3, [pc, #228]	@ (8000d10 <prvAddNewTaskToReadyList+0x10c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d110      	bne.n	8000c52 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8000c30:	f000 fc4a 	bl	80014c8 <prvInitialiseTaskLists>
 8000c34:	e00d      	b.n	8000c52 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8000c36:	4b38      	ldr	r3, [pc, #224]	@ (8000d18 <prvAddNewTaskToReadyList+0x114>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d109      	bne.n	8000c52 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000c3e:	4b35      	ldr	r3, [pc, #212]	@ (8000d14 <prvAddNewTaskToReadyList+0x110>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d802      	bhi.n	8000c52 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8000c4c:	4a31      	ldr	r2, [pc, #196]	@ (8000d14 <prvAddNewTaskToReadyList+0x110>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8000c52:	4b32      	ldr	r3, [pc, #200]	@ (8000d1c <prvAddNewTaskToReadyList+0x118>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3301      	adds	r3, #1
 8000c58:	4a30      	ldr	r2, [pc, #192]	@ (8000d1c <prvAddNewTaskToReadyList+0x118>)
 8000c5a:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c60:	2201      	movs	r2, #1
 8000c62:	409a      	lsls	r2, r3
 8000c64:	4b2e      	ldr	r3, [pc, #184]	@ (8000d20 <prvAddNewTaskToReadyList+0x11c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	4a2d      	ldr	r2, [pc, #180]	@ (8000d20 <prvAddNewTaskToReadyList+0x11c>)
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c72:	492c      	ldr	r1, [pc, #176]	@ (8000d24 <prvAddNewTaskToReadyList+0x120>)
 8000c74:	4613      	mov	r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	3304      	adds	r3, #4
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	689a      	ldr	r2, [r3, #8]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	3204      	adds	r2, #4
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	1d1a      	adds	r2, r3, #4
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ca8:	4613      	mov	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d24 <prvAddNewTaskToReadyList+0x120>)
 8000cb2:	441a      	add	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	615a      	str	r2, [r3, #20]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cbc:	4919      	ldr	r1, [pc, #100]	@ (8000d24 <prvAddNewTaskToReadyList+0x120>)
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000cce:	1c59      	adds	r1, r3, #1
 8000cd0:	4814      	ldr	r0, [pc, #80]	@ (8000d24 <prvAddNewTaskToReadyList+0x120>)
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4403      	add	r3, r0
 8000cdc:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8000cde:	f001 f87b 	bl	8001dd8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <prvAddNewTaskToReadyList+0x114>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00e      	beq.n	8000d08 <prvAddNewTaskToReadyList+0x104>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8000cea:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <prvAddNewTaskToReadyList+0x110>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d207      	bcs.n	8000d08 <prvAddNewTaskToReadyList+0x104>
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <prvAddNewTaskToReadyList+0x124>)
 8000cfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	f3bf 8f4f 	dsb	sy
 8000d04:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000114 	.word	0x20000114
 8000d14:	2000003c 	.word	0x2000003c
 8000d18:	20000120 	.word	0x20000120
 8000d1c:	20000130 	.word	0x20000130
 8000d20:	2000011c 	.word	0x2000011c
 8000d24:	20000040 	.word	0x20000040
 8000d28:	e000ed04 	.word	0xe000ed04

08000d2c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8000d38:	f001 f81e 	bl	8001d78 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <vTaskDelete+0x1c>
 8000d42:	4b41      	ldr	r3, [pc, #260]	@ (8000e48 <vTaskDelete+0x11c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	e000      	b.n	8000d4a <vTaskDelete+0x1e>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	3304      	adds	r3, #4
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fe46 	bl	80009e2 <uxListRemove>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d115      	bne.n	8000d88 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d60:	493a      	ldr	r1, [pc, #232]	@ (8000e4c <vTaskDelete+0x120>)
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10a      	bne.n	8000d88 <vTaskDelete+0x5c>
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d76:	2201      	movs	r2, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43da      	mvns	r2, r3
 8000d7e:	4b34      	ldr	r3, [pc, #208]	@ (8000e50 <vTaskDelete+0x124>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4013      	ands	r3, r2
 8000d84:	4a32      	ldr	r2, [pc, #200]	@ (8000e50 <vTaskDelete+0x124>)
 8000d86:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d004      	beq.n	8000d9a <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	3318      	adds	r3, #24
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fe24 	bl	80009e2 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e54 <vTaskDelete+0x128>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	4a2c      	ldr	r2, [pc, #176]	@ (8000e54 <vTaskDelete+0x128>)
 8000da2:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8000da4:	4b28      	ldr	r3, [pc, #160]	@ (8000e48 <vTaskDelete+0x11c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d101      	bne.n	8000db2 <vTaskDelete+0x86>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e000      	b.n	8000db4 <vTaskDelete+0x88>
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8000db6:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <vTaskDelete+0x12c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d010      	beq.n	8000de0 <vTaskDelete+0xb4>
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d00d      	beq.n	8000de0 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4824      	ldr	r0, [pc, #144]	@ (8000e5c <vTaskDelete+0x130>)
 8000dcc:	f7ff fdae 	bl	800092c <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8000dd0:	4b23      	ldr	r3, [pc, #140]	@ (8000e60 <vTaskDelete+0x134>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	4a22      	ldr	r2, [pc, #136]	@ (8000e60 <vTaskDelete+0x134>)
 8000dd8:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e006      	b.n	8000dee <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8000de0:	4b20      	ldr	r3, [pc, #128]	@ (8000e64 <vTaskDelete+0x138>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	3b01      	subs	r3, #1
 8000de6:	4a1f      	ldr	r2, [pc, #124]	@ (8000e64 <vTaskDelete+0x138>)
 8000de8:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8000dea:	f000 fbeb 	bl	80015c4 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8000dee:	f000 fff3 	bl	8001dd8 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d002      	beq.n	8000dfe <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 8000df8:	6938      	ldr	r0, [r7, #16]
 8000dfa:	f000 fbd3 	bl	80015a4 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <vTaskDelete+0x12c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d01c      	beq.n	8000e40 <vTaskDelete+0x114>
            {
                if( pxTCB == pxCurrentTCB )
 8000e06:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <vTaskDelete+0x11c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d117      	bne.n	8000e40 <vTaskDelete+0x114>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8000e10:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <vTaskDelete+0x13c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00b      	beq.n	8000e30 <vTaskDelete+0x104>
    __asm volatile
 8000e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e1c:	f383 8811 	msr	BASEPRI, r3
 8000e20:	f3bf 8f6f 	isb	sy
 8000e24:	f3bf 8f4f 	dsb	sy
 8000e28:	60bb      	str	r3, [r7, #8]
}
 8000e2a:	bf00      	nop
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <vTaskDelete+0x100>
                    taskYIELD_WITHIN_API();
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <vTaskDelete+0x140>)
 8000e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	f3bf 8f4f 	dsb	sy
 8000e3c:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 8000e40:	bf00      	nop
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000003c 	.word	0x2000003c
 8000e4c:	20000040 	.word	0x20000040
 8000e50:	2000011c 	.word	0x2000011c
 8000e54:	20000130 	.word	0x20000130
 8000e58:	20000120 	.word	0x20000120
 8000e5c:	200000e8 	.word	0x200000e8
 8000e60:	200000fc 	.word	0x200000fc
 8000e64:	20000114 	.word	0x20000114
 8000e68:	2000013c 	.word	0x2000013c
 8000e6c:	e000ed04 	.word	0xe000ed04

08000e70 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	e011      	b.n	8000ea8 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8000e84:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef8 <prvCreateIdleTasks+0x88>)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	4413      	add	r3, r2
 8000e8a:	7819      	ldrb	r1, [r3, #0]
 8000e8c:	463a      	mov	r2, r7
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	4413      	add	r3, r2
 8000e92:	460a      	mov	r2, r1
 8000e94:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8000e96:	463a      	mov	r2, r7
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d006      	beq.n	8000eb0 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	2b0f      	cmp	r3, #15
 8000eac:	ddea      	ble.n	8000e84 <prvCreateIdleTasks+0x14>
 8000eae:	e000      	b.n	8000eb2 <prvCreateIdleTasks+0x42>
        {
            break;
 8000eb0:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
 8000eb6:	e015      	b.n	8000ee4 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8000eb8:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <prvCreateIdleTasks+0x8c>)
 8000eba:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4a0f      	ldr	r2, [pc, #60]	@ (8000f00 <prvCreateIdleTasks+0x90>)
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4639      	mov	r1, r7
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	2280      	movs	r2, #128	@ 0x80
 8000ed0:	6938      	ldr	r0, [r7, #16]
 8000ed2:	f7ff fdeb 	bl	8000aac <xTaskCreate>
 8000ed6:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d006      	beq.n	8000eec <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	dde6      	ble.n	8000eb8 <prvCreateIdleTasks+0x48>
 8000eea:	e000      	b.n	8000eee <prvCreateIdleTasks+0x7e>
        {
            break;
 8000eec:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8000eee:	69fb      	ldr	r3, [r7, #28]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	08002500 	.word	0x08002500
 8000efc:	08001499 	.word	0x08001499
 8000f00:	20000138 	.word	0x20000138

08000f04 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8000f0a:	f7ff ffb1 	bl	8000e70 <prvCreateIdleTasks>
 8000f0e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d116      	bne.n	8000f44 <vTaskStartScheduler+0x40>
    __asm volatile
 8000f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f1a:	f383 8811 	msr	BASEPRI, r3
 8000f1e:	f3bf 8f6f 	isb	sy
 8000f22:	f3bf 8f4f 	dsb	sy
 8000f26:	60bb      	str	r3, [r7, #8]
}
 8000f28:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <vTaskStartScheduler+0x6c>)
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000f32:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <vTaskStartScheduler+0x70>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <vTaskStartScheduler+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8000f3e:	f000 fe5d 	bl	8001bfc <xPortStartScheduler>
 8000f42:	e00f      	b.n	8000f64 <vTaskStartScheduler+0x60>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f4a:	d10b      	bne.n	8000f64 <vTaskStartScheduler+0x60>
    __asm volatile
 8000f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f50:	f383 8811 	msr	BASEPRI, r3
 8000f54:	f3bf 8f6f 	isb	sy
 8000f58:	f3bf 8f4f 	dsb	sy
 8000f5c:	607b      	str	r3, [r7, #4]
}
 8000f5e:	bf00      	nop
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <vTaskStartScheduler+0x5c>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <vTaskStartScheduler+0x78>)
 8000f66:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000134 	.word	0x20000134
 8000f74:	20000120 	.word	0x20000120
 8000f78:	20000118 	.word	0x20000118
 8000f7c:	20000000 	.word	0x20000000

08000f80 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8000f84:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <vTaskSuspendAll+0x18>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	4a03      	ldr	r2, [pc, #12]	@ (8000f98 <vTaskSuspendAll+0x18>)
 8000f8c:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	2000013c 	.word	0x2000013c

08000f9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8000faa:	f000 fee5 	bl	8001d78 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8000fb2:	4b75      	ldr	r3, [pc, #468]	@ (8001188 <xTaskResumeAll+0x1ec>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10b      	bne.n	8000fd2 <xTaskResumeAll+0x36>
    __asm volatile
 8000fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fbe:	f383 8811 	msr	BASEPRI, r3
 8000fc2:	f3bf 8f6f 	isb	sy
 8000fc6:	f3bf 8f4f 	dsb	sy
 8000fca:	603b      	str	r3, [r7, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	e7fd      	b.n	8000fce <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8000fd2:	4b6d      	ldr	r3, [pc, #436]	@ (8001188 <xTaskResumeAll+0x1ec>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	4a6b      	ldr	r2, [pc, #428]	@ (8001188 <xTaskResumeAll+0x1ec>)
 8000fda:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8000fdc:	4b6a      	ldr	r3, [pc, #424]	@ (8001188 <xTaskResumeAll+0x1ec>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f040 80ca 	bne.w	800117a <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000fe6:	4b69      	ldr	r3, [pc, #420]	@ (800118c <xTaskResumeAll+0x1f0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 80c5 	beq.w	800117a <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ff0:	e08e      	b.n	8001110 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8000ff2:	4b67      	ldr	r3, [pc, #412]	@ (8001190 <xTaskResumeAll+0x1f4>)
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	69fa      	ldr	r2, [r7, #28]
 8001006:	6a12      	ldr	r2, [r2, #32]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	69d2      	ldr	r2, [r2, #28]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	3318      	adds	r3, #24
 800101c:	429a      	cmp	r2, r3
 800101e:	d103      	bne.n	8001028 <xTaskResumeAll+0x8c>
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	6a1a      	ldr	r2, [r3, #32]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	2200      	movs	r2, #0
 800102c:	629a      	str	r2, [r3, #40]	@ 0x28
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	1e5a      	subs	r2, r3, #1
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	69fa      	ldr	r2, [r7, #28]
 8001044:	68d2      	ldr	r2, [r2, #12]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	6892      	ldr	r2, [r2, #8]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	429a      	cmp	r2, r3
 800105c:	d103      	bne.n	8001066 <xTaskResumeAll+0xca>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	2200      	movs	r2, #0
 800106a:	615a      	str	r2, [r3, #20]
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	1e5a      	subs	r2, r3, #1
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800107a:	2201      	movs	r2, #1
 800107c:	409a      	lsls	r2, r3
 800107e:	4b45      	ldr	r3, [pc, #276]	@ (8001194 <xTaskResumeAll+0x1f8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4313      	orrs	r3, r2
 8001084:	4a43      	ldr	r2, [pc, #268]	@ (8001194 <xTaskResumeAll+0x1f8>)
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800108c:	4942      	ldr	r1, [pc, #264]	@ (8001198 <xTaskResumeAll+0x1fc>)
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	3304      	adds	r3, #4
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	3204      	adds	r2, #4
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	1d1a      	adds	r2, r3, #4
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4a33      	ldr	r2, [pc, #204]	@ (8001198 <xTaskResumeAll+0x1fc>)
 80010cc:	441a      	add	r2, r3
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	615a      	str	r2, [r3, #20]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010d6:	4930      	ldr	r1, [pc, #192]	@ (8001198 <xTaskResumeAll+0x1fc>)
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	69fa      	ldr	r2, [r7, #28]
 80010e6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80010e8:	1c59      	adds	r1, r3, #1
 80010ea:	482b      	ldr	r0, [pc, #172]	@ (8001198 <xTaskResumeAll+0x1fc>)
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4403      	add	r3, r0
 80010f6:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010fc:	4b27      	ldr	r3, [pc, #156]	@ (800119c <xTaskResumeAll+0x200>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001102:	429a      	cmp	r2, r3
 8001104:	d904      	bls.n	8001110 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8001106:	4a26      	ldr	r2, [pc, #152]	@ (80011a0 <xTaskResumeAll+0x204>)
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	2101      	movs	r1, #1
 800110c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001110:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <xTaskResumeAll+0x1f4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	f47f af6c 	bne.w	8000ff2 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001120:	f000 fa50 	bl	80015c4 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001124:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <xTaskResumeAll+0x208>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d012      	beq.n	8001156 <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001130:	f000 f83c 	bl	80011ac <xTaskIncrementTick>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800113a:	4a19      	ldr	r2, [pc, #100]	@ (80011a0 <xTaskResumeAll+0x204>)
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	2101      	movs	r1, #1
 8001140:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3b01      	subs	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1ef      	bne.n	8001130 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <xTaskResumeAll+0x208>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8001156:	4a12      	ldr	r2, [pc, #72]	@ (80011a0 <xTaskResumeAll+0x204>)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00b      	beq.n	800117a <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001162:	2301      	movs	r3, #1
 8001164:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8001166:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <xTaskResumeAll+0x200>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <xTaskResumeAll+0x20c>)
 800116c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	f3bf 8f4f 	dsb	sy
 8001176:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800117a:	f000 fe2d 	bl	8001dd8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 800117e:	69bb      	ldr	r3, [r7, #24]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000013c 	.word	0x2000013c
 800118c:	20000114 	.word	0x20000114
 8001190:	200000d4 	.word	0x200000d4
 8001194:	2000011c 	.word	0x2000011c
 8001198:	20000040 	.word	0x20000040
 800119c:	2000003c 	.word	0x2000003c
 80011a0:	20000128 	.word	0x20000128
 80011a4:	20000124 	.word	0x20000124
 80011a8:	e000ed04 	.word	0xe000ed04

080011ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80011b6:	4b7f      	ldr	r3, [pc, #508]	@ (80013b4 <xTaskIncrementTick+0x208>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f040 80ef 	bne.w	800139e <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80011c0:	4b7d      	ldr	r3, [pc, #500]	@ (80013b8 <xTaskIncrementTick+0x20c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80011c8:	4a7b      	ldr	r2, [pc, #492]	@ (80013b8 <xTaskIncrementTick+0x20c>)
 80011ca:	6a3b      	ldr	r3, [r7, #32]
 80011cc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d121      	bne.n	8001218 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80011d4:	4b79      	ldr	r3, [pc, #484]	@ (80013bc <xTaskIncrementTick+0x210>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00b      	beq.n	80011f6 <xTaskIncrementTick+0x4a>
    __asm volatile
 80011de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011e2:	f383 8811 	msr	BASEPRI, r3
 80011e6:	f3bf 8f6f 	isb	sy
 80011ea:	f3bf 8f4f 	dsb	sy
 80011ee:	607b      	str	r3, [r7, #4]
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	e7fd      	b.n	80011f2 <xTaskIncrementTick+0x46>
 80011f6:	4b71      	ldr	r3, [pc, #452]	@ (80013bc <xTaskIncrementTick+0x210>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	4b70      	ldr	r3, [pc, #448]	@ (80013c0 <xTaskIncrementTick+0x214>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a6e      	ldr	r2, [pc, #440]	@ (80013bc <xTaskIncrementTick+0x210>)
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4a6e      	ldr	r2, [pc, #440]	@ (80013c0 <xTaskIncrementTick+0x214>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b6e      	ldr	r3, [pc, #440]	@ (80013c4 <xTaskIncrementTick+0x218>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	4a6c      	ldr	r2, [pc, #432]	@ (80013c4 <xTaskIncrementTick+0x218>)
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	f000 f9d6 	bl	80015c4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001218:	4b6b      	ldr	r3, [pc, #428]	@ (80013c8 <xTaskIncrementTick+0x21c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6a3a      	ldr	r2, [r7, #32]
 800121e:	429a      	cmp	r2, r3
 8001220:	f0c0 80a8 	bcc.w	8001374 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001224:	4b65      	ldr	r3, [pc, #404]	@ (80013bc <xTaskIncrementTick+0x210>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d104      	bne.n	8001238 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800122e:	4b66      	ldr	r3, [pc, #408]	@ (80013c8 <xTaskIncrementTick+0x21c>)
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	601a      	str	r2, [r3, #0]
                    break;
 8001236:	e09d      	b.n	8001374 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001238:	4b60      	ldr	r3, [pc, #384]	@ (80013bc <xTaskIncrementTick+0x210>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001248:	6a3a      	ldr	r2, [r7, #32]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	d203      	bcs.n	8001258 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001250:	4a5d      	ldr	r2, [pc, #372]	@ (80013c8 <xTaskIncrementTick+0x21c>)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	6013      	str	r3, [r2, #0]
                        break;
 8001256:	e08d      	b.n	8001374 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	68d2      	ldr	r2, [r2, #12]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	6892      	ldr	r2, [r2, #8]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	3304      	adds	r3, #4
 800127a:	429a      	cmp	r2, r3
 800127c:	d103      	bne.n	8001286 <xTaskIncrementTick+0xda>
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	68da      	ldr	r2, [r3, #12]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	2200      	movs	r2, #0
 800128a:	615a      	str	r2, [r3, #20]
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	1e5a      	subs	r2, r3, #1
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800129a:	2b00      	cmp	r3, #0
 800129c:	d01e      	beq.n	80012dc <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	6a12      	ldr	r2, [r2, #32]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	69d2      	ldr	r2, [r2, #28]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	3318      	adds	r3, #24
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d103      	bne.n	80012cc <xTaskIncrementTick+0x120>
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6a1a      	ldr	r2, [r3, #32]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	2200      	movs	r2, #0
 80012d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1e5a      	subs	r2, r3, #1
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e0:	2201      	movs	r2, #1
 80012e2:	409a      	lsls	r2, r3
 80012e4:	4b39      	ldr	r3, [pc, #228]	@ (80013cc <xTaskIncrementTick+0x220>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	4a38      	ldr	r2, [pc, #224]	@ (80013cc <xTaskIncrementTick+0x220>)
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012f2:	4937      	ldr	r1, [pc, #220]	@ (80013d0 <xTaskIncrementTick+0x224>)
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	3304      	adds	r3, #4
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	3204      	adds	r2, #4
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	1d1a      	adds	r2, r3, #4
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4a27      	ldr	r2, [pc, #156]	@ (80013d0 <xTaskIncrementTick+0x224>)
 8001332:	441a      	add	r2, r3
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	615a      	str	r2, [r3, #20]
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800133c:	4924      	ldr	r1, [pc, #144]	@ (80013d0 <xTaskIncrementTick+0x224>)
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800134e:	1c59      	adds	r1, r3, #1
 8001350:	481f      	ldr	r0, [pc, #124]	@ (80013d0 <xTaskIncrementTick+0x224>)
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4403      	add	r3, r0
 800135c:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001362:	4b1c      	ldr	r3, [pc, #112]	@ (80013d4 <xTaskIncrementTick+0x228>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001368:	429a      	cmp	r2, r3
 800136a:	f67f af5b 	bls.w	8001224 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 800136e:	2301      	movs	r3, #1
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001372:	e757      	b.n	8001224 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8001374:	4b17      	ldr	r3, [pc, #92]	@ (80013d4 <xTaskIncrementTick+0x228>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800137a:	4915      	ldr	r1, [pc, #84]	@ (80013d0 <xTaskIncrementTick+0x224>)
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d901      	bls.n	8001390 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 800138c:	2301      	movs	r3, #1
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8001390:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <xTaskIncrementTick+0x22c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d007      	beq.n	80013a8 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8001398:	2301      	movs	r3, #1
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
 800139c:	e004      	b.n	80013a8 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800139e:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <xTaskIncrementTick+0x230>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <xTaskIncrementTick+0x230>)
 80013a6:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80013a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3728      	adds	r7, #40	@ 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2000013c 	.word	0x2000013c
 80013b8:	20000118 	.word	0x20000118
 80013bc:	200000cc 	.word	0x200000cc
 80013c0:	200000d0 	.word	0x200000d0
 80013c4:	2000012c 	.word	0x2000012c
 80013c8:	20000134 	.word	0x20000134
 80013cc:	2000011c 	.word	0x2000011c
 80013d0:	20000040 	.word	0x20000040
 80013d4:	2000003c 	.word	0x2000003c
 80013d8:	20000128 	.word	0x20000128
 80013dc:	20000124 	.word	0x20000124

080013e0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80013e0:	b480      	push	{r7}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80013e6:	4b27      	ldr	r3, [pc, #156]	@ (8001484 <vTaskSwitchContext+0xa4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80013ee:	4b26      	ldr	r3, [pc, #152]	@ (8001488 <vTaskSwitchContext+0xa8>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80013f4:	e041      	b.n	800147a <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 80013f6:	4b24      	ldr	r3, [pc, #144]	@ (8001488 <vTaskSwitchContext+0xa8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80013fc:	4b23      	ldr	r3, [pc, #140]	@ (800148c <vTaskSwitchContext+0xac>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	fab3 f383 	clz	r3, r3
 8001408:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800140a:	7afb      	ldrb	r3, [r7, #11]
 800140c:	f1c3 031f 	rsb	r3, r3, #31
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	491f      	ldr	r1, [pc, #124]	@ (8001490 <vTaskSwitchContext+0xb0>)
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10b      	bne.n	800143e <vTaskSwitchContext+0x5e>
    __asm volatile
 8001426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800142a:	f383 8811 	msr	BASEPRI, r3
 800142e:	f3bf 8f6f 	isb	sy
 8001432:	f3bf 8f4f 	dsb	sy
 8001436:	607b      	str	r3, [r7, #4]
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	e7fd      	b.n	800143a <vTaskSwitchContext+0x5a>
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4a11      	ldr	r2, [pc, #68]	@ (8001490 <vTaskSwitchContext+0xb0>)
 800144a:	4413      	add	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	3308      	adds	r3, #8
 8001460:	429a      	cmp	r2, r3
 8001462:	d103      	bne.n	800146c <vTaskSwitchContext+0x8c>
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	4a08      	ldr	r2, [pc, #32]	@ (8001494 <vTaskSwitchContext+0xb4>)
 8001474:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8001476:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <vTaskSwitchContext+0xb4>)
 8001478:	681b      	ldr	r3, [r3, #0]
    }
 800147a:	bf00      	nop
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	2000013c 	.word	0x2000013c
 8001488:	20000128 	.word	0x20000128
 800148c:	2000011c 	.word	0x2000011c
 8001490:	20000040 	.word	0x20000040
 8001494:	2000003c 	.word	0x2000003c

08001498 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80014a0:	f000 f852 	bl	8001548 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <prvIdleTask+0x28>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d9f9      	bls.n	80014a0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <prvIdleTask+0x2c>)
 80014ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	f3bf 8f4f 	dsb	sy
 80014b8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80014bc:	e7f0      	b.n	80014a0 <prvIdleTask+0x8>
 80014be:	bf00      	nop
 80014c0:	20000040 	.word	0x20000040
 80014c4:	e000ed04 	.word	0xe000ed04

080014c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	e00c      	b.n	80014ee <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4a12      	ldr	r2, [pc, #72]	@ (8001528 <prvInitialiseTaskLists+0x60>)
 80014e0:	4413      	add	r3, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f9f7 	bl	80008d6 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3301      	adds	r3, #1
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d9ef      	bls.n	80014d4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80014f4:	480d      	ldr	r0, [pc, #52]	@ (800152c <prvInitialiseTaskLists+0x64>)
 80014f6:	f7ff f9ee 	bl	80008d6 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80014fa:	480d      	ldr	r0, [pc, #52]	@ (8001530 <prvInitialiseTaskLists+0x68>)
 80014fc:	f7ff f9eb 	bl	80008d6 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001500:	480c      	ldr	r0, [pc, #48]	@ (8001534 <prvInitialiseTaskLists+0x6c>)
 8001502:	f7ff f9e8 	bl	80008d6 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001506:	480c      	ldr	r0, [pc, #48]	@ (8001538 <prvInitialiseTaskLists+0x70>)
 8001508:	f7ff f9e5 	bl	80008d6 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800150c:	480b      	ldr	r0, [pc, #44]	@ (800153c <prvInitialiseTaskLists+0x74>)
 800150e:	f7ff f9e2 	bl	80008d6 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <prvInitialiseTaskLists+0x78>)
 8001514:	4a05      	ldr	r2, [pc, #20]	@ (800152c <prvInitialiseTaskLists+0x64>)
 8001516:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001518:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <prvInitialiseTaskLists+0x7c>)
 800151a:	4a05      	ldr	r2, [pc, #20]	@ (8001530 <prvInitialiseTaskLists+0x68>)
 800151c:	601a      	str	r2, [r3, #0]
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000040 	.word	0x20000040
 800152c:	200000a4 	.word	0x200000a4
 8001530:	200000b8 	.word	0x200000b8
 8001534:	200000d4 	.word	0x200000d4
 8001538:	200000e8 	.word	0x200000e8
 800153c:	20000100 	.word	0x20000100
 8001540:	200000cc 	.word	0x200000cc
 8001544:	200000d0 	.word	0x200000d0

08001548 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800154e:	e019      	b.n	8001584 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8001550:	f000 fc12 	bl	8001d78 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001554:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <prvCheckTasksWaitingTermination+0x50>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3304      	adds	r3, #4
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fa3e 	bl	80009e2 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8001566:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <prvCheckTasksWaitingTermination+0x54>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	3b01      	subs	r3, #1
 800156c:	4a0b      	ldr	r2, [pc, #44]	@ (800159c <prvCheckTasksWaitingTermination+0x54>)
 800156e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8001570:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <prvCheckTasksWaitingTermination+0x58>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	3b01      	subs	r3, #1
 8001576:	4a0a      	ldr	r2, [pc, #40]	@ (80015a0 <prvCheckTasksWaitingTermination+0x58>)
 8001578:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800157a:	f000 fc2d 	bl	8001dd8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f810 	bl	80015a4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <prvCheckTasksWaitingTermination+0x58>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1e1      	bne.n	8001550 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200000e8 	.word	0x200000e8
 800159c:	20000114 	.word	0x20000114
 80015a0:	200000fc 	.word	0x200000fc

080015a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b0:	4618      	mov	r0, r3
 80015b2:	f000 fe0f 	bl	80021d4 <vPortFree>
            vPortFree( pxTCB );
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 fe0c 	bl	80021d4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015c8:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <prvResetNextTaskUnblockTime+0x2c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d104      	bne.n	80015dc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80015d2:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <prvResetNextTaskUnblockTime+0x30>)
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295
 80015d8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80015da:	e005      	b.n	80015e8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80015dc:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <prvResetNextTaskUnblockTime+0x2c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a03      	ldr	r2, [pc, #12]	@ (80015f4 <prvResetNextTaskUnblockTime+0x30>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	200000cc 	.word	0x200000cc
 80015f4:	20000134 	.word	0x20000134

080015f8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00b      	beq.n	8001628 <xTaskGenericNotifyWait+0x30>
    __asm volatile
 8001610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001614:	f383 8811 	msr	BASEPRI, r3
 8001618:	f3bf 8f6f 	isb	sy
 800161c:	f3bf 8f4f 	dsb	sy
 8001620:	613b      	str	r3, [r7, #16]
}
 8001622:	bf00      	nop
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <xTaskGenericNotifyWait+0x2c>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8001628:	f7ff fcaa 	bl	8000f80 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 800162c:	f000 fba4 	bl	8001d78 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8001630:	4b3b      	ldr	r3, [pc, #236]	@ (8001720 <xTaskGenericNotifyWait+0x128>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	3350      	adds	r3, #80	@ 0x50
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d01a      	beq.n	8001678 <xTaskGenericNotifyWait+0x80>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8001642:	4b37      	ldr	r3, [pc, #220]	@ (8001720 <xTaskGenericNotifyWait+0x128>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3312      	adds	r3, #18
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	43db      	mvns	r3, r3
 8001654:	4019      	ands	r1, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3312      	adds	r3, #18
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8001660:	4b2f      	ldr	r3, [pc, #188]	@ (8001720 <xTaskGenericNotifyWait+0x128>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	3350      	adds	r3, #80	@ 0x50
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 800166e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <xTaskGenericNotifyWait+0x80>
                    {
                        xShouldBlock = pdTRUE;
 8001674:	2301      	movs	r3, #1
 8001676:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8001678:	f000 fbae 	bl	8001dd8 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d103      	bne.n	800168a <xTaskGenericNotifyWait+0x92>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001682:	2101      	movs	r1, #1
 8001684:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001686:	f000 f9b7 	bl	80019f8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800168a:	f7ff fc87 	bl	8000f9c <xTaskResumeAll>
 800168e:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d10a      	bne.n	80016ac <xTaskGenericNotifyWait+0xb4>
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d107      	bne.n	80016ac <xTaskGenericNotifyWait+0xb4>
        {
            taskYIELD_WITHIN_API();
 800169c:	4b21      	ldr	r3, [pc, #132]	@ (8001724 <xTaskGenericNotifyWait+0x12c>)
 800169e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	f3bf 8f4f 	dsb	sy
 80016a8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80016ac:	f000 fb64 	bl	8001d78 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d008      	beq.n	80016c8 <xTaskGenericNotifyWait+0xd0>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 80016b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <xTaskGenericNotifyWait+0x128>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3312      	adds	r3, #18
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80016c8:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <xTaskGenericNotifyWait+0x128>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4413      	add	r3, r2
 80016d0:	3350      	adds	r3, #80	@ 0x50
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d002      	beq.n	80016e0 <xTaskGenericNotifyWait+0xe8>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	e010      	b.n	8001702 <xTaskGenericNotifyWait+0x10a>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <xTaskGenericNotifyWait+0x128>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3312      	adds	r3, #18
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	6859      	ldr	r1, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	4019      	ands	r1, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3312      	adds	r3, #18
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 80016fe:	2301      	movs	r3, #1
 8001700:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8001702:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <xTaskGenericNotifyWait+0x128>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4413      	add	r3, r2
 800170a:	3350      	adds	r3, #80	@ 0x50
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001710:	f000 fb62 	bl	8001dd8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8001714:	69fb      	ldr	r3, [r7, #28]
    }
 8001716:	4618      	mov	r0, r3
 8001718:	3720      	adds	r7, #32
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000003c 	.word	0x2000003c
 8001724:	e000ed04 	.word	0xe000ed04

08001728 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8001728:	b580      	push	{r7, lr}
 800172a:	b092      	sub	sp, #72	@ 0x48
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8001736:	2301      	movs	r3, #1
 8001738:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10b      	bne.n	8001758 <xTaskGenericNotifyFromISR+0x30>
    __asm volatile
 8001740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001744:	f383 8811 	msr	BASEPRI, r3
 8001748:	f3bf 8f6f 	isb	sy
 800174c:	f3bf 8f4f 	dsb	sy
 8001750:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001752:	bf00      	nop
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00b      	beq.n	8001776 <xTaskGenericNotifyFromISR+0x4e>
    __asm volatile
 800175e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001762:	f383 8811 	msr	BASEPRI, r3
 8001766:	f3bf 8f6f 	isb	sy
 800176a:	f3bf 8f4f 	dsb	sy
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	e7fd      	b.n	8001772 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001776:	f000 fbbb 	bl	8001ef0 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	643b      	str	r3, [r7, #64]	@ 0x40

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 800177e:	f3ef 8211 	mrs	r2, BASEPRI
 8001782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001786:	f383 8811 	msr	BASEPRI, r3
 800178a:	f3bf 8f6f 	isb	sy
 800178e:	f3bf 8f4f 	dsb	sy
 8001792:	623a      	str	r2, [r7, #32]
 8001794:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8001796:	6a3b      	ldr	r3, [r7, #32]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8001798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 800179a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <xTaskGenericNotifyFromISR+0x88>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80017a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	3312      	adds	r3, #18
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017ae:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80017b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	4413      	add	r3, r2
 80017b6:	3350      	adds	r3, #80	@ 0x50
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80017be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	4413      	add	r3, r2
 80017c4:	3350      	adds	r3, #80	@ 0x50
 80017c6:	2202      	movs	r2, #2
 80017c8:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d841      	bhi.n	8001854 <xTaskGenericNotifyFromISR+0x12c>
 80017d0:	a201      	add	r2, pc, #4	@ (adr r2, 80017d8 <xTaskGenericNotifyFromISR+0xb0>)
 80017d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d6:	bf00      	nop
 80017d8:	08001875 	.word	0x08001875
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	0800180b 	.word	0x0800180b
 80017e4:	08001827 	.word	0x08001827
 80017e8:	08001837 	.word	0x08001837
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80017ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	3312      	adds	r3, #18
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	431a      	orrs	r2, r3
 80017fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	3312      	adds	r3, #18
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	605a      	str	r2, [r3, #4]
                    break;
 8001808:	e037      	b.n	800187a <xTaskGenericNotifyFromISR+0x152>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800180a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	3312      	adds	r3, #18
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	3312      	adds	r3, #18
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	605a      	str	r2, [r3, #4]
                    break;
 8001824:	e029      	b.n	800187a <xTaskGenericNotifyFromISR+0x152>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001826:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	3312      	adds	r3, #18
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	605a      	str	r2, [r3, #4]
                    break;
 8001834:	e021      	b.n	800187a <xTaskGenericNotifyFromISR+0x152>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001836:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800183a:	2b02      	cmp	r3, #2
 800183c:	d007      	beq.n	800184e <xTaskGenericNotifyFromISR+0x126>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800183e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	3312      	adds	r3, #18
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800184c:	e015      	b.n	800187a <xTaskGenericNotifyFromISR+0x152>
                        xReturn = pdFAIL;
 800184e:	2300      	movs	r3, #0
 8001850:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8001852:	e012      	b.n	800187a <xTaskGenericNotifyFromISR+0x152>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001854:	4b61      	ldr	r3, [pc, #388]	@ (80019dc <xTaskGenericNotifyFromISR+0x2b4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00d      	beq.n	8001878 <xTaskGenericNotifyFromISR+0x150>
    __asm volatile
 800185c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001860:	f383 8811 	msr	BASEPRI, r3
 8001864:	f3bf 8f6f 	isb	sy
 8001868:	f3bf 8f4f 	dsb	sy
 800186c:	61bb      	str	r3, [r7, #24]
}
 800186e:	bf00      	nop
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <xTaskGenericNotifyFromISR+0x148>
                    break;
 8001874:	bf00      	nop
 8001876:	e000      	b.n	800187a <xTaskGenericNotifyFromISR+0x152>
                    break;
 8001878:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800187a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800187e:	2b01      	cmp	r3, #1
 8001880:	f040 80a1 	bne.w	80019c6 <xTaskGenericNotifyFromISR+0x29e>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8001884:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00b      	beq.n	80018a4 <xTaskGenericNotifyFromISR+0x17c>
    __asm volatile
 800188c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001890:	f383 8811 	msr	BASEPRI, r3
 8001894:	f3bf 8f6f 	isb	sy
 8001898:	f3bf 8f4f 	dsb	sy
 800189c:	617b      	str	r3, [r7, #20]
}
 800189e:	bf00      	nop
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <xTaskGenericNotifyFromISR+0x178>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80018a4:	4b4e      	ldr	r3, [pc, #312]	@ (80019e0 <xTaskGenericNotifyFromISR+0x2b8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d160      	bne.n	800196e <xTaskGenericNotifyFromISR+0x246>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80018ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80018b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80018b8:	68d2      	ldr	r2, [r2, #12]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80018c2:	6892      	ldr	r2, [r2, #8]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018cc:	3304      	adds	r3, #4
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d103      	bne.n	80018da <xTaskGenericNotifyFromISR+0x1b2>
 80018d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018dc:	2200      	movs	r2, #0
 80018de:	615a      	str	r2, [r3, #20]
 80018e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	1e5a      	subs	r2, r3, #1
 80018e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018e8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80018ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ee:	2201      	movs	r2, #1
 80018f0:	409a      	lsls	r2, r3
 80018f2:	4b3c      	ldr	r3, [pc, #240]	@ (80019e4 <xTaskGenericNotifyFromISR+0x2bc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	4a3a      	ldr	r2, [pc, #232]	@ (80019e4 <xTaskGenericNotifyFromISR+0x2bc>)
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001900:	4939      	ldr	r1, [pc, #228]	@ (80019e8 <xTaskGenericNotifyFromISR+0x2c0>)
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	3304      	adds	r3, #4
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001914:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001926:	3204      	adds	r2, #4
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800192c:	1d1a      	adds	r2, r3, #4
 800192e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4a2a      	ldr	r2, [pc, #168]	@ (80019e8 <xTaskGenericNotifyFromISR+0x2c0>)
 8001940:	441a      	add	r2, r3
 8001942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001944:	615a      	str	r2, [r3, #20]
 8001946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800194a:	4927      	ldr	r1, [pc, #156]	@ (80019e8 <xTaskGenericNotifyFromISR+0x2c0>)
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800195a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800195c:	1c59      	adds	r1, r3, #1
 800195e:	4822      	ldr	r0, [pc, #136]	@ (80019e8 <xTaskGenericNotifyFromISR+0x2c0>)
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4403      	add	r3, r0
 800196a:	6019      	str	r1, [r3, #0]
 800196c:	e01b      	b.n	80019a6 <xTaskGenericNotifyFromISR+0x27e>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800196e:	4b1f      	ldr	r3, [pc, #124]	@ (80019ec <xTaskGenericNotifyFromISR+0x2c4>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	637b      	str	r3, [r7, #52]	@ 0x34
 8001974:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001976:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001978:	61da      	str	r2, [r3, #28]
 800197a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001980:	621a      	str	r2, [r3, #32]
 8001982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001988:	3218      	adds	r2, #24
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800198e:	f103 0218 	add.w	r2, r3, #24
 8001992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001998:	4a14      	ldr	r2, [pc, #80]	@ (80019ec <xTaskGenericNotifyFromISR+0x2c4>)
 800199a:	629a      	str	r2, [r3, #40]	@ 0x28
 800199c:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <xTaskGenericNotifyFromISR+0x2c4>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	4a12      	ldr	r2, [pc, #72]	@ (80019ec <xTaskGenericNotifyFromISR+0x2c4>)
 80019a4:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80019a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019aa:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <xTaskGenericNotifyFromISR+0x2c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d908      	bls.n	80019c6 <xTaskGenericNotifyFromISR+0x29e>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80019b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <xTaskGenericNotifyFromISR+0x298>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80019ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <xTaskGenericNotifyFromISR+0x2cc>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019c8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80019d0:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 80019d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 80019d4:	4618      	mov	r0, r3
 80019d6:	3748      	adds	r7, #72	@ 0x48
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000118 	.word	0x20000118
 80019e0:	2000013c 	.word	0x2000013c
 80019e4:	2000011c 	.word	0x2000011c
 80019e8:	20000040 	.word	0x20000040
 80019ec:	200000d4 	.word	0x200000d4
 80019f0:	2000003c 	.word	0x2000003c
 80019f4:	20000128 	.word	0x20000128

080019f8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001a02:	4b37      	ldr	r3, [pc, #220]	@ (8001ae0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8001a08:	4b36      	ldr	r3, [pc, #216]	@ (8001ae4 <prvAddCurrentTaskToDelayedList+0xec>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8001a0e:	4b36      	ldr	r3, [pc, #216]	@ (8001ae8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a14:	4b35      	ldr	r3, [pc, #212]	@ (8001aec <prvAddCurrentTaskToDelayedList+0xf4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe ffe1 	bl	80009e2 <uxListRemove>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10b      	bne.n	8001a3e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001a26:	4b31      	ldr	r3, [pc, #196]	@ (8001aec <prvAddCurrentTaskToDelayedList+0xf4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	4b2e      	ldr	r3, [pc, #184]	@ (8001af0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001af0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001a3c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a44:	d124      	bne.n	8001a90 <prvAddCurrentTaskToDelayedList+0x98>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d021      	beq.n	8001a90 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a4c:	4b29      	ldr	r3, [pc, #164]	@ (8001af4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b26      	ldr	r3, [pc, #152]	@ (8001aec <prvAddCurrentTaskToDelayedList+0xf4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	4b24      	ldr	r3, [pc, #144]	@ (8001aec <prvAddCurrentTaskToDelayedList+0xf4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	6892      	ldr	r2, [r2, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	4b21      	ldr	r3, [pc, #132]	@ (8001aec <prvAddCurrentTaskToDelayedList+0xf4>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	3204      	adds	r2, #4
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	4b1e      	ldr	r3, [pc, #120]	@ (8001aec <prvAddCurrentTaskToDelayedList+0xf4>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	1d1a      	adds	r2, r3, #4
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <prvAddCurrentTaskToDelayedList+0xf4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001af4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001a80:	615a      	str	r2, [r3, #20]
 8001a82:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	3301      	adds	r3, #1
 8001a88:	4a1a      	ldr	r2, [pc, #104]	@ (8001af4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001a8e:	e022      	b.n	8001ad6 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001a98:	4b14      	ldr	r3, [pc, #80]	@ (8001aec <prvAddCurrentTaskToDelayedList+0xf4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d207      	bcs.n	8001ab8 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8001aa8:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <prvAddCurrentTaskToDelayedList+0xf4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	3304      	adds	r3, #4
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6978      	ldr	r0, [r7, #20]
 8001ab2:	f7fe ff5e 	bl	8000972 <vListInsert>
}
 8001ab6:	e00e      	b.n	8001ad6 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8001aec <prvAddCurrentTaskToDelayedList+0xf4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	3304      	adds	r3, #4
 8001abe:	4619      	mov	r1, r3
 8001ac0:	69b8      	ldr	r0, [r7, #24]
 8001ac2:	f7fe ff56 	bl	8000972 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <prvAddCurrentTaskToDelayedList+0x100>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d202      	bcs.n	8001ad6 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8001ad0:	4a09      	ldr	r2, [pc, #36]	@ (8001af8 <prvAddCurrentTaskToDelayedList+0x100>)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6013      	str	r3, [r2, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	3720      	adds	r7, #32
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000118 	.word	0x20000118
 8001ae4:	200000cc 	.word	0x200000cc
 8001ae8:	200000d0 	.word	0x200000d0
 8001aec:	2000003c 	.word	0x2000003c
 8001af0:	2000011c 	.word	0x2000011c
 8001af4:	20000100 	.word	0x20000100
 8001af8:	20000134 	.word	0x20000134

08001afc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	3b04      	subs	r3, #4
 8001b0c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b14:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3b04      	subs	r3, #4
 8001b1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f023 0201 	bic.w	r2, r3, #1
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3b04      	subs	r3, #4
 8001b2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001b2c:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <pxPortInitialiseStack+0x54>)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3b14      	subs	r3, #20
 8001b36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3b20      	subs	r3, #32
 8001b42:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001b44:	68fb      	ldr	r3, [r7, #12]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	08001b55 	.word	0x08001b55

08001b54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001b5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ba8 <prvTaskExitError+0x54>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b66:	d00b      	beq.n	8001b80 <prvTaskExitError+0x2c>
    __asm volatile
 8001b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b6c:	f383 8811 	msr	BASEPRI, r3
 8001b70:	f3bf 8f6f 	isb	sy
 8001b74:	f3bf 8f4f 	dsb	sy
 8001b78:	60fb      	str	r3, [r7, #12]
}
 8001b7a:	bf00      	nop
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <prvTaskExitError+0x28>
    __asm volatile
 8001b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b84:	f383 8811 	msr	BASEPRI, r3
 8001b88:	f3bf 8f6f 	isb	sy
 8001b8c:	f3bf 8f4f 	dsb	sy
 8001b90:	60bb      	str	r3, [r7, #8]
}
 8001b92:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001b94:	bf00      	nop
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0fc      	beq.n	8001b96 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	20000004 	.word	0x20000004
 8001bac:	00000000 	.word	0x00000000

08001bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001bb0:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <pxCurrentTCBConst2>)
 8001bb2:	6819      	ldr	r1, [r3, #0]
 8001bb4:	6808      	ldr	r0, [r1, #0]
 8001bb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001bba:	f380 8809 	msr	PSP, r0
 8001bbe:	f3bf 8f6f 	isb	sy
 8001bc2:	f04f 0000 	mov.w	r0, #0
 8001bc6:	f380 8811 	msr	BASEPRI, r0
 8001bca:	f04e 0e0d 	orr.w	lr, lr, #13
 8001bce:	4770      	bx	lr

08001bd0 <pxCurrentTCBConst2>:
 8001bd0:	2000003c 	.word	0x2000003c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop

08001bd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001bd8:	4806      	ldr	r0, [pc, #24]	@ (8001bf4 <prvPortStartFirstTask+0x1c>)
 8001bda:	6800      	ldr	r0, [r0, #0]
 8001bdc:	6800      	ldr	r0, [r0, #0]
 8001bde:	f380 8808 	msr	MSP, r0
 8001be2:	b662      	cpsie	i
 8001be4:	b661      	cpsie	f
 8001be6:	f3bf 8f4f 	dsb	sy
 8001bea:	f3bf 8f6f 	isb	sy
 8001bee:	df00      	svc	0
 8001bf0:	bf00      	nop
 8001bf2:	0000      	.short	0x0000
 8001bf4:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop

08001bfc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	@ 0x28
 8001c00:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8001c02:	4b54      	ldr	r3, [pc, #336]	@ (8001d54 <xPortStartScheduler+0x158>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8001c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0a:	332c      	adds	r3, #44	@ 0x2c
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a52      	ldr	r2, [pc, #328]	@ (8001d58 <xPortStartScheduler+0x15c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00b      	beq.n	8001c2c <xPortStartScheduler+0x30>
    __asm volatile
 8001c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c18:	f383 8811 	msr	BASEPRI, r3
 8001c1c:	f3bf 8f6f 	isb	sy
 8001c20:	f3bf 8f4f 	dsb	sy
 8001c24:	61fb      	str	r3, [r7, #28]
}
 8001c26:	bf00      	nop
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <xPortStartScheduler+0x2c>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2e:	3338      	adds	r3, #56	@ 0x38
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a4a      	ldr	r2, [pc, #296]	@ (8001d5c <xPortStartScheduler+0x160>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00b      	beq.n	8001c50 <xPortStartScheduler+0x54>
    __asm volatile
 8001c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c3c:	f383 8811 	msr	BASEPRI, r3
 8001c40:	f3bf 8f6f 	isb	sy
 8001c44:	f3bf 8f4f 	dsb	sy
 8001c48:	61bb      	str	r3, [r7, #24]
}
 8001c4a:	bf00      	nop
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <xPortStartScheduler+0x50>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001c54:	4b42      	ldr	r3, [pc, #264]	@ (8001d60 <xPortStartScheduler+0x164>)
 8001c56:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	22ff      	movs	r2, #255	@ 0xff
 8001c64:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	4b3a      	ldr	r3, [pc, #232]	@ (8001d64 <xPortStartScheduler+0x168>)
 8001c7a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8001c7c:	4b39      	ldr	r3, [pc, #228]	@ (8001d64 <xPortStartScheduler+0x168>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10b      	bne.n	8001c9c <xPortStartScheduler+0xa0>
    __asm volatile
 8001c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c88:	f383 8811 	msr	BASEPRI, r3
 8001c8c:	f3bf 8f6f 	isb	sy
 8001c90:	f3bf 8f4f 	dsb	sy
 8001c94:	617b      	str	r3, [r7, #20]
}
 8001c96:	bf00      	nop
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <xPortStartScheduler+0x9c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d013      	beq.n	8001cd2 <xPortStartScheduler+0xd6>
    __asm volatile
 8001caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cae:	f383 8811 	msr	BASEPRI, r3
 8001cb2:	f3bf 8f6f 	isb	sy
 8001cb6:	f3bf 8f4f 	dsb	sy
 8001cba:	613b      	str	r3, [r7, #16]
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	e7fd      	b.n	8001cbe <xPortStartScheduler+0xc2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cda:	2b80      	cmp	r3, #128	@ 0x80
 8001cdc:	d0f1      	beq.n	8001cc2 <xPortStartScheduler+0xc6>
        }

        if( ulImplementedPrioBits == 8 )
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d103      	bne.n	8001cec <xPortStartScheduler+0xf0>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8001ce4:	4b20      	ldr	r3, [pc, #128]	@ (8001d68 <xPortStartScheduler+0x16c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	e004      	b.n	8001cf6 <xPortStartScheduler+0xfa>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d68 <xPortStartScheduler+0x16c>)
 8001cf4:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d68 <xPortStartScheduler+0x16c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8001d68 <xPortStartScheduler+0x16c>)
 8001cfe:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001d00:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <xPortStartScheduler+0x16c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001d08:	4a17      	ldr	r2, [pc, #92]	@ (8001d68 <xPortStartScheduler+0x16c>)
 8001d0a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001d14:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <xPortStartScheduler+0x170>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a14      	ldr	r2, [pc, #80]	@ (8001d6c <xPortStartScheduler+0x170>)
 8001d1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d1e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001d20:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <xPortStartScheduler+0x170>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a11      	ldr	r2, [pc, #68]	@ (8001d6c <xPortStartScheduler+0x170>)
 8001d26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d2a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8001d2c:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <xPortStartScheduler+0x174>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001d32:	f000 f8c3 	bl	8001ebc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001d36:	4b0f      	ldr	r3, [pc, #60]	@ (8001d74 <xPortStartScheduler+0x178>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001d3c:	f7ff ff4c 	bl	8001bd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001d40:	f7ff fb4e 	bl	80013e0 <vTaskSwitchContext>
    prvTaskExitError();
 8001d44:	f7ff ff06 	bl	8001b54 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3728      	adds	r7, #40	@ 0x28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	e000ed08 	.word	0xe000ed08
 8001d58:	08001bb1 	.word	0x08001bb1
 8001d5c:	08001e31 	.word	0x08001e31
 8001d60:	e000e400 	.word	0xe000e400
 8001d64:	20000140 	.word	0x20000140
 8001d68:	20000144 	.word	0x20000144
 8001d6c:	e000ed20 	.word	0xe000ed20
 8001d70:	e000ed1c 	.word	0xe000ed1c
 8001d74:	20000004 	.word	0x20000004

08001d78 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
    __asm volatile
 8001d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d82:	f383 8811 	msr	BASEPRI, r3
 8001d86:	f3bf 8f6f 	isb	sy
 8001d8a:	f3bf 8f4f 	dsb	sy
 8001d8e:	607b      	str	r3, [r7, #4]
}
 8001d90:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001d92:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <vPortEnterCritical+0x58>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	3301      	adds	r3, #1
 8001d98:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd0 <vPortEnterCritical+0x58>)
 8001d9a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <vPortEnterCritical+0x58>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d110      	bne.n	8001dc6 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001da4:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd4 <vPortEnterCritical+0x5c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00b      	beq.n	8001dc6 <vPortEnterCritical+0x4e>
    __asm volatile
 8001dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001db2:	f383 8811 	msr	BASEPRI, r3
 8001db6:	f3bf 8f6f 	isb	sy
 8001dba:	f3bf 8f4f 	dsb	sy
 8001dbe:	603b      	str	r3, [r7, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	e7fd      	b.n	8001dc2 <vPortEnterCritical+0x4a>
    }
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	20000004 	.word	0x20000004
 8001dd4:	e000ed04 	.word	0xe000ed04

08001dd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001dde:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <vPortExitCritical+0x50>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10b      	bne.n	8001dfe <vPortExitCritical+0x26>
    __asm volatile
 8001de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dea:	f383 8811 	msr	BASEPRI, r3
 8001dee:	f3bf 8f6f 	isb	sy
 8001df2:	f3bf 8f4f 	dsb	sy
 8001df6:	607b      	str	r3, [r7, #4]
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	e7fd      	b.n	8001dfa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <vPortExitCritical+0x50>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	4a08      	ldr	r2, [pc, #32]	@ (8001e28 <vPortExitCritical+0x50>)
 8001e06:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001e08:	4b07      	ldr	r3, [pc, #28]	@ (8001e28 <vPortExitCritical+0x50>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d105      	bne.n	8001e1c <vPortExitCritical+0x44>
 8001e10:	2300      	movs	r3, #0
 8001e12:	603b      	str	r3, [r7, #0]
    __asm volatile
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f383 8811 	msr	BASEPRI, r3
}
 8001e1a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000004 	.word	0x20000004
 8001e2c:	00000000 	.word	0x00000000

08001e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001e30:	f3ef 8009 	mrs	r0, PSP
 8001e34:	f3bf 8f6f 	isb	sy
 8001e38:	4b0d      	ldr	r3, [pc, #52]	@ (8001e70 <pxCurrentTCBConst>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e40:	6010      	str	r0, [r2, #0]
 8001e42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001e46:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001e4a:	f380 8811 	msr	BASEPRI, r0
 8001e4e:	f7ff fac7 	bl	80013e0 <vTaskSwitchContext>
 8001e52:	f04f 0000 	mov.w	r0, #0
 8001e56:	f380 8811 	msr	BASEPRI, r0
 8001e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001e5e:	6819      	ldr	r1, [r3, #0]
 8001e60:	6808      	ldr	r0, [r1, #0]
 8001e62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e66:	f380 8809 	msr	PSP, r0
 8001e6a:	f3bf 8f6f 	isb	sy
 8001e6e:	4770      	bx	lr

08001e70 <pxCurrentTCBConst>:
 8001e70:	2000003c 	.word	0x2000003c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop

08001e78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
    __asm volatile
 8001e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e82:	f383 8811 	msr	BASEPRI, r3
 8001e86:	f3bf 8f6f 	isb	sy
 8001e8a:	f3bf 8f4f 	dsb	sy
 8001e8e:	607b      	str	r3, [r7, #4]
}
 8001e90:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001e92:	f7ff f98b 	bl	80011ac <xTaskIncrementTick>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <SysTick_Handler+0x40>)
 8001e9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	603b      	str	r3, [r7, #0]
    __asm volatile
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f383 8811 	msr	BASEPRI, r3
}
 8001eae:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	e000ed04 	.word	0xe000ed04

08001ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001ec0:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <vPortSetupTimerInterrupt+0x24>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001ec6:	4b07      	ldr	r3, [pc, #28]	@ (8001ee4 <vPortSetupTimerInterrupt+0x28>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <vPortSetupTimerInterrupt+0x2c>)
 8001ece:	4a07      	ldr	r2, [pc, #28]	@ (8001eec <vPortSetupTimerInterrupt+0x30>)
 8001ed0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001ed2:	4b03      	ldr	r3, [pc, #12]	@ (8001ee0 <vPortSetupTimerInterrupt+0x24>)
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	601a      	str	r2, [r3, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	e000e010 	.word	0xe000e010
 8001ee4:	e000e018 	.word	0xe000e018
 8001ee8:	e000e014 	.word	0xe000e014
 8001eec:	0001193f 	.word	0x0001193f

08001ef0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001ef6:	f3ef 8305 	mrs	r3, IPSR
 8001efa:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b0f      	cmp	r3, #15
 8001f00:	d915      	bls.n	8001f2e <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001f02:	4a17      	ldr	r2, [pc, #92]	@ (8001f60 <vPortValidateInterruptPriority+0x70>)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001f0c:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <vPortValidateInterruptPriority+0x74>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	7afa      	ldrb	r2, [r7, #11]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d20b      	bcs.n	8001f2e <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8001f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f1a:	f383 8811 	msr	BASEPRI, r3
 8001f1e:	f3bf 8f6f 	isb	sy
 8001f22:	f3bf 8f4f 	dsb	sy
 8001f26:	607b      	str	r3, [r7, #4]
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	e7fd      	b.n	8001f2a <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <vPortValidateInterruptPriority+0x78>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f36:	4b0d      	ldr	r3, [pc, #52]	@ (8001f6c <vPortValidateInterruptPriority+0x7c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d90b      	bls.n	8001f56 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 8001f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f42:	f383 8811 	msr	BASEPRI, r3
 8001f46:	f3bf 8f6f 	isb	sy
 8001f4a:	f3bf 8f4f 	dsb	sy
 8001f4e:	603b      	str	r3, [r7, #0]
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	e7fd      	b.n	8001f52 <vPortValidateInterruptPriority+0x62>
    }
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	e000e3f0 	.word	0xe000e3f0
 8001f64:	20000140 	.word	0x20000140
 8001f68:	e000ed0c 	.word	0xe000ed0c
 8001f6c:	20000144 	.word	0x20000144

08001f70 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08e      	sub	sp, #56	@ 0x38
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d022      	beq.n	8001fc8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8001f82:	2308      	movs	r3, #8
 8001f84:	43db      	mvns	r3, r3
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d81b      	bhi.n	8001fc4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d014      	beq.n	8001fc8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	f1c3 0308 	rsb	r3, r3, #8
 8001fa8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8001faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fac:	43db      	mvns	r3, r3
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d804      	bhi.n	8001fbe <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb8:	4413      	add	r3, r2
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	e004      	b.n	8001fc8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	e001      	b.n	8001fc8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8001fc8:	f7fe ffda 	bl	8000f80 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001fcc:	4b7a      	ldr	r3, [pc, #488]	@ (80021b8 <pvPortMalloc+0x248>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8001fd4:	f000 f978 	bl	80022c8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f2c0 80d3 	blt.w	8002186 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80cf 	beq.w	8002186 <pvPortMalloc+0x216>
 8001fe8:	4b74      	ldr	r3, [pc, #464]	@ (80021bc <pvPortMalloc+0x24c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	f200 80c9 	bhi.w	8002186 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001ff4:	4b72      	ldr	r3, [pc, #456]	@ (80021c0 <pvPortMalloc+0x250>)
 8001ff6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8001ff8:	4b71      	ldr	r3, [pc, #452]	@ (80021c0 <pvPortMalloc+0x250>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8001ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002000:	4a70      	ldr	r2, [pc, #448]	@ (80021c4 <pvPortMalloc+0x254>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d305      	bcc.n	8002012 <pvPortMalloc+0xa2>
 8002006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002008:	4a6f      	ldr	r2, [pc, #444]	@ (80021c8 <pvPortMalloc+0x258>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d801      	bhi.n	8002012 <pvPortMalloc+0xa2>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <pvPortMalloc+0xa4>
 8002012:	2300      	movs	r3, #0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d129      	bne.n	800206c <pvPortMalloc+0xfc>
    __asm volatile
 8002018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800201c:	f383 8811 	msr	BASEPRI, r3
 8002020:	f3bf 8f6f 	isb	sy
 8002024:	f3bf 8f4f 	dsb	sy
 8002028:	623b      	str	r3, [r7, #32]
}
 800202a:	bf00      	nop
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8002030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002032:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8002034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800203a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800203c:	4a61      	ldr	r2, [pc, #388]	@ (80021c4 <pvPortMalloc+0x254>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d305      	bcc.n	800204e <pvPortMalloc+0xde>
 8002042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002044:	4a60      	ldr	r2, [pc, #384]	@ (80021c8 <pvPortMalloc+0x258>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d801      	bhi.n	800204e <pvPortMalloc+0xde>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <pvPortMalloc+0xe0>
 800204e:	2300      	movs	r3, #0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10b      	bne.n	800206c <pvPortMalloc+0xfc>
    __asm volatile
 8002054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002058:	f383 8811 	msr	BASEPRI, r3
 800205c:	f3bf 8f6f 	isb	sy
 8002060:	f3bf 8f4f 	dsb	sy
 8002064:	61fb      	str	r3, [r7, #28]
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800206c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	429a      	cmp	r2, r3
 8002074:	d903      	bls.n	800207e <pvPortMalloc+0x10e>
 8002076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1d8      	bne.n	8002030 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800207e:	4b4e      	ldr	r3, [pc, #312]	@ (80021b8 <pvPortMalloc+0x248>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002084:	429a      	cmp	r2, r3
 8002086:	d07e      	beq.n	8002186 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8002088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2208      	movs	r2, #8
 800208e:	4413      	add	r3, r2
 8002090:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8002092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002094:	4a4b      	ldr	r2, [pc, #300]	@ (80021c4 <pvPortMalloc+0x254>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d305      	bcc.n	80020a6 <pvPortMalloc+0x136>
 800209a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800209c:	4a4a      	ldr	r2, [pc, #296]	@ (80021c8 <pvPortMalloc+0x258>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d801      	bhi.n	80020a6 <pvPortMalloc+0x136>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <pvPortMalloc+0x138>
 80020a6:	2300      	movs	r3, #0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10b      	bne.n	80020c4 <pvPortMalloc+0x154>
    __asm volatile
 80020ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020b0:	f383 8811 	msr	BASEPRI, r3
 80020b4:	f3bf 8f6f 	isb	sy
 80020b8:	f3bf 8f4f 	dsb	sy
 80020bc:	61bb      	str	r3, [r7, #24]
}
 80020be:	bf00      	nop
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80020c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ca:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80020cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d90b      	bls.n	80020ee <pvPortMalloc+0x17e>
    __asm volatile
 80020d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020da:	f383 8811 	msr	BASEPRI, r3
 80020de:	f3bf 8f6f 	isb	sy
 80020e2:	f3bf 8f4f 	dsb	sy
 80020e6:	617b      	str	r3, [r7, #20]
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	e7fd      	b.n	80020ea <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80020ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	1ad2      	subs	r2, r2, r3
 80020f6:	2308      	movs	r3, #8
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d924      	bls.n	8002148 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80020fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00b      	beq.n	8002128 <pvPortMalloc+0x1b8>
    __asm volatile
 8002110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002114:	f383 8811 	msr	BASEPRI, r3
 8002118:	f3bf 8f6f 	isb	sy
 800211c:	f3bf 8f4f 	dsb	sy
 8002120:	613b      	str	r3, [r7, #16]
}
 8002122:	bf00      	nop
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	1ad2      	subs	r2, r2, r3
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800213a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8002142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002146:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002148:	4b1c      	ldr	r3, [pc, #112]	@ (80021bc <pvPortMalloc+0x24c>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	4a1a      	ldr	r2, [pc, #104]	@ (80021bc <pvPortMalloc+0x24c>)
 8002154:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002156:	4b19      	ldr	r3, [pc, #100]	@ (80021bc <pvPortMalloc+0x24c>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <pvPortMalloc+0x25c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d203      	bcs.n	800216a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002162:	4b16      	ldr	r3, [pc, #88]	@ (80021bc <pvPortMalloc+0x24c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a19      	ldr	r2, [pc, #100]	@ (80021cc <pvPortMalloc+0x25c>)
 8002168:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800216a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002174:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800217c:	4b14      	ldr	r3, [pc, #80]	@ (80021d0 <pvPortMalloc+0x260>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	3301      	adds	r3, #1
 8002182:	4a13      	ldr	r2, [pc, #76]	@ (80021d0 <pvPortMalloc+0x260>)
 8002184:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002186:	f7fe ff09 	bl	8000f9c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800218a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00b      	beq.n	80021ac <pvPortMalloc+0x23c>
    __asm volatile
 8002194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002198:	f383 8811 	msr	BASEPRI, r3
 800219c:	f3bf 8f6f 	isb	sy
 80021a0:	f3bf 8f4f 	dsb	sy
 80021a4:	60fb      	str	r3, [r7, #12]
}
 80021a6:	bf00      	nop
 80021a8:	bf00      	nop
 80021aa:	e7fd      	b.n	80021a8 <pvPortMalloc+0x238>
    return pvReturn;
 80021ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3738      	adds	r7, #56	@ 0x38
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20003150 	.word	0x20003150
 80021bc:	20003154 	.word	0x20003154
 80021c0:	20003148 	.word	0x20003148
 80021c4:	20000148 	.word	0x20000148
 80021c8:	20003147 	.word	0x20003147
 80021cc:	20003158 	.word	0x20003158
 80021d0:	2000315c 	.word	0x2000315c

080021d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d064      	beq.n	80022b0 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80021e6:	2308      	movs	r3, #8
 80021e8:	425b      	negs	r3, r3
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	4413      	add	r3, r2
 80021ee:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	4a30      	ldr	r2, [pc, #192]	@ (80022b8 <vPortFree+0xe4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d305      	bcc.n	8002208 <vPortFree+0x34>
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	4a2f      	ldr	r2, [pc, #188]	@ (80022bc <vPortFree+0xe8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d801      	bhi.n	8002208 <vPortFree+0x34>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <vPortFree+0x36>
 8002208:	2300      	movs	r3, #0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10b      	bne.n	8002226 <vPortFree+0x52>
    __asm volatile
 800220e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002212:	f383 8811 	msr	BASEPRI, r3
 8002216:	f3bf 8f6f 	isb	sy
 800221a:	f3bf 8f4f 	dsb	sy
 800221e:	617b      	str	r3, [r7, #20]
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	e7fd      	b.n	8002222 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	db0b      	blt.n	8002246 <vPortFree+0x72>
    __asm volatile
 800222e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002232:	f383 8811 	msr	BASEPRI, r3
 8002236:	f3bf 8f6f 	isb	sy
 800223a:	f3bf 8f4f 	dsb	sy
 800223e:	613b      	str	r3, [r7, #16]
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	e7fd      	b.n	8002242 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <vPortFree+0x92>
    __asm volatile
 800224e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002252:	f383 8811 	msr	BASEPRI, r3
 8002256:	f3bf 8f6f 	isb	sy
 800225a:	f3bf 8f4f 	dsb	sy
 800225e:	60fb      	str	r3, [r7, #12]
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	e7fd      	b.n	8002262 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	0fdb      	lsrs	r3, r3, #31
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d01c      	beq.n	80022b0 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d118      	bne.n	80022b0 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800228a:	f7fe fe79 	bl	8000f80 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <vPortFree+0xec>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4413      	add	r3, r2
 8002298:	4a09      	ldr	r2, [pc, #36]	@ (80022c0 <vPortFree+0xec>)
 800229a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800229c:	69b8      	ldr	r0, [r7, #24]
 800229e:	f000 f86d 	bl	800237c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80022a2:	4b08      	ldr	r3, [pc, #32]	@ (80022c4 <vPortFree+0xf0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3301      	adds	r3, #1
 80022a8:	4a06      	ldr	r2, [pc, #24]	@ (80022c4 <vPortFree+0xf0>)
 80022aa:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80022ac:	f7fe fe76 	bl	8000f9c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80022b0:	bf00      	nop
 80022b2:	3720      	adds	r7, #32
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20000148 	.word	0x20000148
 80022bc:	20003147 	.word	0x20003147
 80022c0:	20003154 	.word	0x20003154
 80022c4:	20003160 	.word	0x20003160

080022c8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80022ce:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80022d2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80022d4:	4b24      	ldr	r3, [pc, #144]	@ (8002368 <prvHeapInit+0xa0>)
 80022d6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00c      	beq.n	80022fc <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	3307      	adds	r3, #7
 80022e6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f023 0307 	bic.w	r3, r3, #7
 80022ee:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002368 <prvHeapInit+0xa0>)
 80022f8:	4413      	add	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4a1b      	ldr	r2, [pc, #108]	@ (800236c <prvHeapInit+0xa4>)
 8002300:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002302:	4b1a      	ldr	r3, [pc, #104]	@ (800236c <prvHeapInit+0xa4>)
 8002304:	2200      	movs	r2, #0
 8002306:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	4413      	add	r3, r2
 800230e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8002310:	2208      	movs	r2, #8
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f023 0307 	bic.w	r3, r3, #7
 800231e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a13      	ldr	r2, [pc, #76]	@ (8002370 <prvHeapInit+0xa8>)
 8002324:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002326:	4b12      	ldr	r3, [pc, #72]	@ (8002370 <prvHeapInit+0xa8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2200      	movs	r2, #0
 800232c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800232e:	4b10      	ldr	r3, [pc, #64]	@ (8002370 <prvHeapInit+0xa8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	1ad2      	subs	r2, r2, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8002344:	4b0a      	ldr	r3, [pc, #40]	@ (8002370 <prvHeapInit+0xa8>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4a08      	ldr	r2, [pc, #32]	@ (8002374 <prvHeapInit+0xac>)
 8002352:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a07      	ldr	r2, [pc, #28]	@ (8002378 <prvHeapInit+0xb0>)
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000148 	.word	0x20000148
 800236c:	20003148 	.word	0x20003148
 8002370:	20003150 	.word	0x20003150
 8002374:	20003158 	.word	0x20003158
 8002378:	20003154 	.word	0x20003154

0800237c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8002384:	4b36      	ldr	r3, [pc, #216]	@ (8002460 <prvInsertBlockIntoFreeList+0xe4>)
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e002      	b.n	8002390 <prvInsertBlockIntoFreeList+0x14>
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	429a      	cmp	r2, r3
 8002398:	d8f7      	bhi.n	800238a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	4a30      	ldr	r2, [pc, #192]	@ (8002460 <prvInsertBlockIntoFreeList+0xe4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d018      	beq.n	80023d4 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002464 <prvInsertBlockIntoFreeList+0xe8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d305      	bcc.n	80023b6 <prvInsertBlockIntoFreeList+0x3a>
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002468 <prvInsertBlockIntoFreeList+0xec>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d801      	bhi.n	80023b6 <prvInsertBlockIntoFreeList+0x3a>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <prvInsertBlockIntoFreeList+0x3c>
 80023b6:	2300      	movs	r3, #0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10b      	bne.n	80023d4 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 80023bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023c0:	f383 8811 	msr	BASEPRI, r3
 80023c4:	f3bf 8f6f 	isb	sy
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	60fb      	str	r3, [r7, #12]
}
 80023ce:	bf00      	nop
 80023d0:	bf00      	nop
 80023d2:	e7fd      	b.n	80023d0 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d108      	bne.n	80023f8 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	441a      	add	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	441a      	add	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d118      	bne.n	800243e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b16      	ldr	r3, [pc, #88]	@ (800246c <prvInsertBlockIntoFreeList+0xf0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d00d      	beq.n	8002434 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	441a      	add	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	e008      	b.n	8002446 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8002434:	4b0d      	ldr	r3, [pc, #52]	@ (800246c <prvInsertBlockIntoFreeList+0xf0>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	e003      	b.n	8002446 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	429a      	cmp	r2, r3
 800244c:	d002      	beq.n	8002454 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002454:	bf00      	nop
 8002456:	371c      	adds	r7, #28
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20003148 	.word	0x20003148
 8002464:	20000148 	.word	0x20000148
 8002468:	20003147 	.word	0x20003147
 800246c:	20003150 	.word	0x20003150

08002470 <memset>:
 8002470:	4603      	mov	r3, r0
 8002472:	4402      	add	r2, r0
 8002474:	4293      	cmp	r3, r2
 8002476:	d100      	bne.n	800247a <memset+0xa>
 8002478:	4770      	bx	lr
 800247a:	f803 1b01 	strb.w	r1, [r3], #1
 800247e:	e7f9      	b.n	8002474 <memset+0x4>

08002480 <__libc_init_array>:
 8002480:	b570      	push	{r4, r5, r6, lr}
 8002482:	2600      	movs	r6, #0
 8002484:	4d0c      	ldr	r5, [pc, #48]	@ (80024b8 <__libc_init_array+0x38>)
 8002486:	4c0d      	ldr	r4, [pc, #52]	@ (80024bc <__libc_init_array+0x3c>)
 8002488:	1b64      	subs	r4, r4, r5
 800248a:	10a4      	asrs	r4, r4, #2
 800248c:	42a6      	cmp	r6, r4
 800248e:	d109      	bne.n	80024a4 <__libc_init_array+0x24>
 8002490:	f000 f81a 	bl	80024c8 <_init>
 8002494:	2600      	movs	r6, #0
 8002496:	4d0a      	ldr	r5, [pc, #40]	@ (80024c0 <__libc_init_array+0x40>)
 8002498:	4c0a      	ldr	r4, [pc, #40]	@ (80024c4 <__libc_init_array+0x44>)
 800249a:	1b64      	subs	r4, r4, r5
 800249c:	10a4      	asrs	r4, r4, #2
 800249e:	42a6      	cmp	r6, r4
 80024a0:	d105      	bne.n	80024ae <__libc_init_array+0x2e>
 80024a2:	bd70      	pop	{r4, r5, r6, pc}
 80024a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80024a8:	4798      	blx	r3
 80024aa:	3601      	adds	r6, #1
 80024ac:	e7ee      	b.n	800248c <__libc_init_array+0xc>
 80024ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80024b2:	4798      	blx	r3
 80024b4:	3601      	adds	r6, #1
 80024b6:	e7f2      	b.n	800249e <__libc_init_array+0x1e>
 80024b8:	08002508 	.word	0x08002508
 80024bc:	08002508 	.word	0x08002508
 80024c0:	08002508 	.word	0x08002508
 80024c4:	0800250c 	.word	0x0800250c

080024c8 <_init>:
 80024c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ca:	bf00      	nop
 80024cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ce:	bc08      	pop	{r3}
 80024d0:	469e      	mov	lr, r3
 80024d2:	4770      	bx	lr

080024d4 <_fini>:
 80024d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d6:	bf00      	nop
 80024d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024da:	bc08      	pop	{r3}
 80024dc:	469e      	mov	lr, r3
 80024de:	4770      	bx	lr
