
003_LED_Effect_Using_SW_Timer_and_USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000493c  08000130  08000130  00001130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004a6c  08004a6c  00005a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b70  08004b70  00006034  2**0
                  CONTENTS
  4 .ARM          00000000  08004b70  08004b70  00006034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b70  08004b70  00006034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b70  08004b70  00005b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b74  08004b74  00005b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08004b78  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031a4  20000034  08004bac  00006034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200031d8  08004bac  000061d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007aa3  00000000  00000000  0000605d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016fe  00000000  00000000  0000db00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0000f200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000061c  00000000  00000000  0000f9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004514  00000000  00000000  0000fffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000094c9  00000000  00000000  00014510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001773f  00000000  00000000  0001d9d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00035118  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000217c  00000000  00000000  0003515c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000372d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000034 	.word	0x20000034
 800014c:	00000000 	.word	0x00000000
 8000150:	08004a54 	.word	0x08004a54

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000038 	.word	0x20000038
 800016c:	08004a54 	.word	0x08004a54

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	@ 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <SystemClock_Config>:

#include <stdint.h>
#include "stm32f103Driver.h"


void SystemClock_Config(){
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
      //enable HSE (8 MHz external crystal)
      RCC->CR |= (1<<16);
 8000a60:	4b20      	ldr	r3, [pc, #128]	@ (8000ae4 <SystemClock_Config+0x88>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae4 <SystemClock_Config+0x88>)
 8000a66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a6a:	6013      	str	r3, [r2, #0]
      while (!(RCC->CR & (1 << 17)));
 8000a6c:	bf00      	nop
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae4 <SystemClock_Config+0x88>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0f9      	beq.n	8000a6e <SystemClock_Config+0x12>

      // Set Flash latency for 72 MHz
      FLASH->ACR |= (0x2 << 0) ;//flash latency 2
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae8 <SystemClock_Config+0x8c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ae8 <SystemClock_Config+0x8c>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6013      	str	r3, [r2, #0]

      // Configure PLL: HSE (8MHz) ×9 = 72 MHz
      RCC->CFGR |=  (0x1 << 16) |(0x7 << 18); //HSE as PLL input| PLL multiplier ×9
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <SystemClock_Config+0x88>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	4a16      	ldr	r2, [pc, #88]	@ (8000ae4 <SystemClock_Config+0x88>)
 8000a8c:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 8000a90:	6053      	str	r3, [r2, #4]

    // Enable PLL and wait until ready
    RCC->CR |= (1 << 24);   // PLL enable
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <SystemClock_Config+0x88>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a13      	ldr	r2, [pc, #76]	@ (8000ae4 <SystemClock_Config+0x88>)
 8000a98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a9c:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & (1 << 25)  )); // PLL ready flag
 8000a9e:	bf00      	nop
 8000aa0:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <SystemClock_Config+0x88>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d0f9      	beq.n	8000aa0 <SystemClock_Config+0x44>

    // Switch to PLL system clock
    RCC->CFGR |=  (0x2 << 0) ; // PLL as system clock
 8000aac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <SystemClock_Config+0x88>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ae4 <SystemClock_Config+0x88>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	6053      	str	r3, [r2, #4]
    while (((RCC->CFGR) & (0x2 << 2)) != (0x2 << 2));
 8000ab8:	bf00      	nop
 8000aba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <SystemClock_Config+0x88>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	2b08      	cmp	r3, #8
 8000ac4:	d1f9      	bne.n	8000aba <SystemClock_Config+0x5e>

    // APB1 Prescaler: HCLK divided by 2 (36 MHz for USART2/3)
    RCC->CFGR |= (0x4 << 8); // PPRE1 = 0b100 (HCLK/2)
 8000ac6:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <SystemClock_Config+0x88>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	4a06      	ldr	r2, [pc, #24]	@ (8000ae4 <SystemClock_Config+0x88>)
 8000acc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ad0:	6053      	str	r3, [r2, #4]
    // APB2 Prescaler: HCLK not divided (72 MHz for USART1)
    RCC->CFGR |= (0x0 << 11); // PPRE2 = 0b000 (HCLK/1)
 8000ad2:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <SystemClock_Config+0x88>)
 8000ad4:	4a03      	ldr	r2, [pc, #12]	@ (8000ae4 <SystemClock_Config+0x88>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	6053      	str	r3, [r2, #4]



   }
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40022000 	.word	0x40022000

08000aec <NVIC_SetPriorityGrouping>:
}



/* Set Priority Grouping */
 void NVIC_SetPriorityGrouping(uint32_t priority_group) {
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
    uint32_t reg_value;

    reg_value  = SCB_AIRCR;
 8000af4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <NVIC_SetPriorityGrouping+0x38>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	60fb      	str	r3, [r7, #12]
    reg_value &= ~(SCB_AIRCR_VECTKEY_MASK | SCB_AIRCR_PRIGROUP_MASK); // Clear fields
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b00:	4013      	ands	r3, r2
 8000b02:	60fb      	str	r3, [r7, #12]
    reg_value |= (SCB_AIRCR_VECTKEY | priority_group);                // Set key and group
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b12:	60fb      	str	r3, [r7, #12]
    SCB_AIRCR  = reg_value;
 8000b14:	4a03      	ldr	r2, [pc, #12]	@ (8000b24 <NVIC_SetPriorityGrouping+0x38>)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6013      	str	r3, [r2, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	e000ed0c 	.word	0xe000ed0c

08000b28 <Select_GPIO>:
/**********************************************************/
/*************************__GPIO__*************************/
/**********************************************************/

// Function to select GPIO port
GPIO_TypeDef* Select_GPIO(uint8_t port) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
    switch (port) {
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d816      	bhi.n	8000b68 <Select_GPIO+0x40>
 8000b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b40 <Select_GPIO+0x18>)
 8000b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b40:	08000b55 	.word	0x08000b55
 8000b44:	08000b59 	.word	0x08000b59
 8000b48:	08000b5d 	.word	0x08000b5d
 8000b4c:	08000b61 	.word	0x08000b61
 8000b50:	08000b65 	.word	0x08000b65
        case 1: return GPIOA;
 8000b54:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <Select_GPIO+0x4c>)
 8000b56:	e008      	b.n	8000b6a <Select_GPIO+0x42>
        case 2: return GPIOB;
 8000b58:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <Select_GPIO+0x50>)
 8000b5a:	e006      	b.n	8000b6a <Select_GPIO+0x42>
        case 3: return GPIOC;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <Select_GPIO+0x54>)
 8000b5e:	e004      	b.n	8000b6a <Select_GPIO+0x42>
        case 4: return GPIOD;
 8000b60:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <Select_GPIO+0x58>)
 8000b62:	e002      	b.n	8000b6a <Select_GPIO+0x42>
        case 5: return GPIOE;
 8000b64:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <Select_GPIO+0x5c>)
 8000b66:	e000      	b.n	8000b6a <Select_GPIO+0x42>
        default: return 0; // Return NULL for invalid port
 8000b68:	2300      	movs	r3, #0
    }
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	40010800 	.word	0x40010800
 8000b78:	40010c00 	.word	0x40010c00
 8000b7c:	40011000 	.word	0x40011000
 8000b80:	40011400 	.word	0x40011400
 8000b84:	40011800 	.word	0x40011800

08000b88 <Config_GPIO>:




// Function to configure GPIO 
void Config_GPIO(uint8_t port, uint8_t pin, uint8_t mode, uint8_t config) {
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b087      	sub	sp, #28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4608      	mov	r0, r1
 8000b92:	4611      	mov	r1, r2
 8000b94:	461a      	mov	r2, r3
 8000b96:	4623      	mov	r3, r4
 8000b98:	71fb      	strb	r3, [r7, #7]
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71bb      	strb	r3, [r7, #6]
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	717b      	strb	r3, [r7, #5]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	713b      	strb	r3, [r7, #4]
    GPIO_TypeDef *GPIOx = Select_GPIO(port);
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ffbd 	bl	8000b28 <Select_GPIO>
 8000bae:	6178      	str	r0, [r7, #20]
    if (!GPIOx) return; // Return if invalid port
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d031      	beq.n	8000c1a <Config_GPIO+0x92>

    // Enable the corresponding GPIO clock
    RCC->APB2ENR |= (1 << (port + 1));
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c24 <Config_GPIO+0x9c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	79fa      	ldrb	r2, [r7, #7]
 8000bbc:	3201      	adds	r2, #1
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4a17      	ldr	r2, [pc, #92]	@ (8000c24 <Config_GPIO+0x9c>)
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	6193      	str	r3, [r2, #24]

    volatile uint32_t *reg = (pin < 8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000bcc:	79bb      	ldrb	r3, [r7, #6]
 8000bce:	2b07      	cmp	r3, #7
 8000bd0:	d801      	bhi.n	8000bd6 <Config_GPIO+0x4e>
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	e001      	b.n	8000bda <Config_GPIO+0x52>
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	613b      	str	r3, [r7, #16]
    uint8_t pos = (pin % 8) * 4;
 8000bdc:	79bb      	ldrb	r3, [r7, #6]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	73fb      	strb	r3, [r7, #15]

    *reg &= ~(0xF << pos); // Clear bits
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	7bfa      	ldrb	r2, [r7, #15]
 8000bee:	210f      	movs	r1, #15
 8000bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf4:	43d2      	mvns	r2, r2
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	601a      	str	r2, [r3, #0]
    *reg |= ((mode) << pos) | ((config) << (pos + 2)); // Set mode and config
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	7979      	ldrb	r1, [r7, #5]
 8000c02:	7bfa      	ldrb	r2, [r7, #15]
 8000c04:	4091      	lsls	r1, r2
 8000c06:	7938      	ldrb	r0, [r7, #4]
 8000c08:	7bfa      	ldrb	r2, [r7, #15]
 8000c0a:	3202      	adds	r2, #2
 8000c0c:	fa00 f202 	lsl.w	r2, r0, r2
 8000c10:	430a      	orrs	r2, r1
 8000c12:	431a      	orrs	r2, r3
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	e000      	b.n	8000c1c <Config_GPIO+0x94>
    if (!GPIOx) return; // Return if invalid port
 8000c1a:	bf00      	nop
}
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000

08000c28 <Write_GPIO>:

//function to write into gpio pin
void Write_GPIO (uint8_t port, uint8_t pin, uint8_t state){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
 8000c32:	460b      	mov	r3, r1
 8000c34:	71bb      	strb	r3, [r7, #6]
 8000c36:	4613      	mov	r3, r2
 8000c38:	717b      	strb	r3, [r7, #5]
	
		GPIO_TypeDef *GPIOx = Select_GPIO(port);
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff73 	bl	8000b28 <Select_GPIO>
 8000c42:	60f8      	str	r0, [r7, #12]
    
		volatile uint32_t *odr = &GPIOx ->ODR;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	330c      	adds	r3, #12
 8000c48:	60bb      	str	r3, [r7, #8]
		
		//write the desired state to the desired pin
		state ? ((*odr |= 1 << pin)) : ((*odr &= ~(1 << pin)));
 8000c4a:	797b      	ldrb	r3, [r7, #5]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d009      	beq.n	8000c64 <Write_GPIO+0x3c>
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	79ba      	ldrb	r2, [r7, #6]
 8000c56:	2101      	movs	r1, #1
 8000c58:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	601a      	str	r2, [r3, #0]

	
}
 8000c62:	e009      	b.n	8000c78 <Write_GPIO+0x50>
		state ? ((*odr |= 1 << pin)) : ((*odr &= ~(1 << pin)));
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	79ba      	ldrb	r2, [r7, #6]
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c70:	43d2      	mvns	r2, r2
 8000c72:	401a      	ands	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	601a      	str	r2, [r3, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <NVIC_SetPriority>:

/**********************************************************/
/*************************__NVIC Priority Set__*************************/
/**********************************************************/

void NVIC_SetPriority(uint8_t irq_number, uint8_t priority_level) {
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	@ 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	460a      	mov	r2, r1
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	71bb      	strb	r3, [r7, #6]
    // Mask priority to 4 bits
    priority_level &= 0x0F;
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	71bb      	strb	r3, [r7, #6]

    // Calculate IPR register index and position
    uint32_t ipr_index = irq_number / 4;
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	61fb      	str	r3, [r7, #28]
    uint8_t byte_pos = irq_number % 4;
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	76fb      	strb	r3, [r7, #27]
    uint32_t shift = (byte_pos * 8) + 4;  // Upper nibble of each byte
 8000ca8:	7efb      	ldrb	r3, [r7, #27]
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	3304      	adds	r3, #4
 8000cae:	617b      	str	r3, [r7, #20]

    // Get pointer to the NVIC_IPR register
    volatile uint32_t *nvic_ipr = (volatile uint32_t *)(0xE000E400 + (ipr_index * 4));
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 8000cb6:	f503 5364 	add.w	r3, r3, #14592	@ 0x3900
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	613b      	str	r3, [r7, #16]

    // Apply priority (only upper 4 bits used in each byte)
    uint32_t mask = 0x0F << shift;
 8000cbe:	220f      	movs	r2, #15
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	60fb      	str	r3, [r7, #12]
    *nvic_ipr = (*nvic_ipr & ~mask) | ((priority_level & 0x0F) << shift);
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	79ba      	ldrb	r2, [r7, #6]
 8000cd4:	f002 010f 	and.w	r1, r2, #15
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	fa01 f202 	lsl.w	r2, r1, r2
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	601a      	str	r2, [r3, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	3724      	adds	r7, #36	@ 0x24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
	...

08000cf0 <select_USART>:
 USART1_IRQHandler  
 USART2_IRQHandler  
 USART3_IRQHandler  

*/
USART_TypeDef* select_USART(uint8_t usart) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
    switch (usart) {
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b03      	cmp	r3, #3
 8000cfe:	d00a      	beq.n	8000d16 <select_USART+0x26>
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	dc0a      	bgt.n	8000d1a <select_USART+0x2a>
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d002      	beq.n	8000d0e <select_USART+0x1e>
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d002      	beq.n	8000d12 <select_USART+0x22>
 8000d0c:	e005      	b.n	8000d1a <select_USART+0x2a>
        case 1:
            return USART1;  // Return USART1 if usart == 1
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <select_USART+0x38>)
 8000d10:	e004      	b.n	8000d1c <select_USART+0x2c>
        case 2:
            return USART2;  // Return USART2 if usart == 2
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <select_USART+0x3c>)
 8000d14:	e002      	b.n	8000d1c <select_USART+0x2c>
        case 3:
            return USART3;  // Return USART3 if usart == 3
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <select_USART+0x40>)
 8000d18:	e000      	b.n	8000d1c <select_USART+0x2c>
        default:
            return 0;    // Return NULL if usart is invalid (not 1, 2, or 3)
 8000d1a:	2300      	movs	r3, #0
    }
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40013800 	.word	0x40013800
 8000d2c:	40004400 	.word	0x40004400
 8000d30:	40004800 	.word	0x40004800
 8000d34:	00000000 	.word	0x00000000

08000d38 <USART_BRR>:

uint32_t USART_BRR(uint16_t usart, uint32_t baud_rate)
{
 8000d38:	b5b0      	push	{r4, r5, r7, lr}
 8000d3a:	b08c      	sub	sp, #48	@ 0x30
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	80fb      	strh	r3, [r7, #6]
    // It consists of two parts:
    //   - Mantissa (upper 12 bits): Integer part of USARTDIV.
    //   - Fraction (lower 4 bits): Fractional part of USARTDIV scaled by 16.

    // Initialize variables
    uint32_t peripheral_clock = 36000000UL;  // Default peripheral clock (36 MHz)
 8000d44:	4b42      	ldr	r3, [pc, #264]	@ (8000e50 <USART_BRR+0x118>)
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t mantissa;                        // Integer part of USARTDIV (mantissa)
    uint32_t final_brr_value;                 // Final value for the BRR register
    double fractional_part = 36000000.00;     // Peripheral clock as a floating-point number
 8000d48:	a33d      	add	r3, pc, #244	@ (adr r3, 8000e40 <USART_BRR+0x108>)
 8000d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double rounding_check = 1.00;             // Temporary value for checking rounding decision
 8000d52:	f04f 0200 	mov.w	r2, #0
 8000d56:	4b3f      	ldr	r3, [pc, #252]	@ (8000e54 <USART_BRR+0x11c>)
 8000d58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    // Check if USART1 is selected, which operates at a different clock frequency
    if (usart == 1)
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d106      	bne.n	8000d70 <USART_BRR+0x38>
    {
        peripheral_clock = 72000000UL;       // Peripheral clock for USART1 (72 MHz)
 8000d62:	4b3d      	ldr	r3, [pc, #244]	@ (8000e58 <USART_BRR+0x120>)
 8000d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        fractional_part = 72000000.00;       // Update the clock for calculations
 8000d66:	a338      	add	r3, pc, #224	@ (adr r3, 8000e48 <USART_BRR+0x110>)
 8000d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
    
    // Calculate the integer part of USARTDIV (mantissa)
    mantissa = peripheral_clock / (baud_rate * 16);  // Integer division to get the mantissa
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	011b      	lsls	r3, r3, #4
 8000d74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Calculate the fractional part of USARTDIV
    fractional_part = 16 * ((fractional_part / (baud_rate * 16)) - mantissa); // Get fractional part in base-16
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fb37 	bl	80003f4 <__aeabi_ui2d>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000d8e:	f7ff fcd5 	bl	800073c <__aeabi_ddiv>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	4614      	mov	r4, r2
 8000d98:	461d      	mov	r5, r3
 8000d9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d9c:	f7ff fb2a 	bl	80003f4 <__aeabi_ui2d>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4620      	mov	r0, r4
 8000da6:	4629      	mov	r1, r5
 8000da8:	f7ff f9e6 	bl	8000178 <__aeabi_dsub>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	4610      	mov	r0, r2
 8000db2:	4619      	mov	r1, r3
 8000db4:	f04f 0200 	mov.w	r2, #0
 8000db8:	4b28      	ldr	r3, [pc, #160]	@ (8000e5c <USART_BRR+0x124>)
 8000dba:	f7ff fb95 	bl	80004e8 <__aeabi_dmul>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    uint32_t fraction = fractional_part;  // Extract the integer part of the fractional value (truncated)
 8000dc6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000dca:	f7ff fe27 	bl	8000a1c <__aeabi_d2uiz>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	61fb      	str	r3, [r7, #28]
    
    // Determine if rounding is needed based on the remaining fractional part
    rounding_check = 100 * (fractional_part - fraction);  // Check if the fractional part exceeds 0.5
 8000dd2:	69f8      	ldr	r0, [r7, #28]
 8000dd4:	f7ff fb0e 	bl	80003f4 <__aeabi_ui2d>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000de0:	f7ff f9ca 	bl	8000178 <__aeabi_dsub>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	4610      	mov	r0, r2
 8000dea:	4619      	mov	r1, r3
 8000dec:	f04f 0200 	mov.w	r2, #0
 8000df0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e60 <USART_BRR+0x128>)
 8000df2:	f7ff fb79 	bl	80004e8 <__aeabi_dmul>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (rounding_check > 50)  // If fractional part is greater than 0.5, round up
 8000dfe:	f04f 0200 	mov.w	r2, #0
 8000e02:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <USART_BRR+0x12c>)
 8000e04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e08:	f7ff fdfe 	bl	8000a08 <__aeabi_dcmpgt>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00a      	beq.n	8000e28 <USART_BRR+0xf0>
    {
        fraction++;  // Round up the fractional part
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3301      	adds	r3, #1
 8000e16:	61fb      	str	r3, [r7, #28]
        
        if (fraction == 16)  // If rounding causes the fractional part to overflow (i.e., 16)
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	2b10      	cmp	r3, #16
 8000e1c:	d104      	bne.n	8000e28 <USART_BRR+0xf0>
        {
            fraction = 0;  // Reset fractional part to 0
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
            mantissa++;    // Increment the mantissa (carry over the overflow)
 8000e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e24:	3301      	adds	r3, #1
 8000e26:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
    }
    
    // Combine the mantissa and fractional parts into the final BRR register value
    final_brr_value = (mantissa << 4);  // Shift mantissa (integer part) to the upper 12 bits
 8000e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	60fb      	str	r3, [r7, #12]
    final_brr_value += fraction;        // Add the fractional part (lower 4 bits)
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	4413      	add	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
    
    // Return the computed USART_BRR value
    return final_brr_value;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3730      	adds	r7, #48	@ 0x30
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e40:	00000000 	.word	0x00000000
 8000e44:	41812a88 	.word	0x41812a88
 8000e48:	00000000 	.word	0x00000000
 8000e4c:	41912a88 	.word	0x41912a88
 8000e50:	02255100 	.word	0x02255100
 8000e54:	3ff00000 	.word	0x3ff00000
 8000e58:	044aa200 	.word	0x044aa200
 8000e5c:	40300000 	.word	0x40300000
 8000e60:	40590000 	.word	0x40590000
 8000e64:	40490000 	.word	0x40490000

08000e68 <init_USART>:


void init_USART ( uint8_t usart, uint32_t baud_rate ){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
	
	USART_TypeDef *USARTX = select_USART (usart);
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff3a 	bl	8000cf0 <select_USART>
 8000e7c:	60f8      	str	r0, [r7, #12]
	uint32_t USART_BRR_cal = USART_BRR(usart, baud_rate);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	6839      	ldr	r1, [r7, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff57 	bl	8000d38 <USART_BRR>
 8000e8a:	60b8      	str	r0, [r7, #8]
	
	//Enabling the RCC clock for usart 
	//and conifuring the tx pin to alternative function and rx to input pull up/pull down	
	if (usart == 1) {
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d112      	bne.n	8000eb8 <init_USART+0x50>
		RCC->APB2ENR |= (1<<14);
 8000e92:	4b2b      	ldr	r3, [pc, #172]	@ (8000f40 <init_USART+0xd8>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	4a2a      	ldr	r2, [pc, #168]	@ (8000f40 <init_USART+0xd8>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e9c:	6193      	str	r3, [r2, #24]
		Config_GPIO (portA, 9, output_50Mhz, af_pp_output);
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	2109      	movs	r1, #9
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f7ff fe6f 	bl	8000b88 <Config_GPIO>
		Config_GPIO (portA, 10, input , pp_in);
 8000eaa:	2302      	movs	r3, #2
 8000eac:	2200      	movs	r2, #0
 8000eae:	210a      	movs	r1, #10
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f7ff fe69 	bl	8000b88 <Config_GPIO>
 8000eb6:	e02a      	b.n	8000f0e <init_USART+0xa6>
	}
	else if (usart == 2) {
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d112      	bne.n	8000ee4 <init_USART+0x7c>
		RCC->APB1ENR |= (1<<17);
 8000ebe:	4b20      	ldr	r3, [pc, #128]	@ (8000f40 <init_USART+0xd8>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8000f40 <init_USART+0xd8>)
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec8:	61d3      	str	r3, [r2, #28]
		Config_GPIO (portA, 2, output_50Mhz, af_pp_output);
 8000eca:	2302      	movs	r3, #2
 8000ecc:	2203      	movs	r2, #3
 8000ece:	2102      	movs	r1, #2
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f7ff fe59 	bl	8000b88 <Config_GPIO>
		Config_GPIO (portA, 3, input , pp_in);
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2103      	movs	r1, #3
 8000edc:	2001      	movs	r0, #1
 8000ede:	f7ff fe53 	bl	8000b88 <Config_GPIO>
 8000ee2:	e014      	b.n	8000f0e <init_USART+0xa6>
	}
	else if (usart == 3) {
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d111      	bne.n	8000f0e <init_USART+0xa6>
		RCC->APB1ENR |= (1<<18);
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <init_USART+0xd8>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	4a14      	ldr	r2, [pc, #80]	@ (8000f40 <init_USART+0xd8>)
 8000ef0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ef4:	61d3      	str	r3, [r2, #28]
		Config_GPIO (portB, 10, output_50Mhz, af_pp_output);
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	2203      	movs	r2, #3
 8000efa:	210a      	movs	r1, #10
 8000efc:	2002      	movs	r0, #2
 8000efe:	f7ff fe43 	bl	8000b88 <Config_GPIO>
		Config_GPIO (portB, 11, input , pp_in);
 8000f02:	2302      	movs	r3, #2
 8000f04:	2200      	movs	r2, #0
 8000f06:	210b      	movs	r1, #11
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f7ff fe3d 	bl	8000b88 <Config_GPIO>
	}
	USARTX->BRR = USART_BRR_cal;	
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	68ba      	ldr	r2, [r7, #8]
 8000f12:	609a      	str	r2, [r3, #8]
	USARTX->CR1 |= (1 << 3);   // Set bit 3 (RE - Receiver Enable)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	f043 0208 	orr.w	r2, r3, #8
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	60da      	str	r2, [r3, #12]
	USARTX->CR1 |= (1 << 2);   // Set bit 2 (TE - Transmitter Enable)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	f043 0204 	orr.w	r2, r3, #4
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	60da      	str	r2, [r3, #12]
	USARTX->CR1 |=(1 << 13);  // Set bit 13 (UE - USART Enable)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	60da      	str	r2, [r3, #12]
	
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000

08000f44 <USART_receive>:

char USART_receive (uint8_t usart){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	USART_TypeDef *USARTX = select_USART (usart);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fecd 	bl	8000cf0 <select_USART>
 8000f56:	60f8      	str	r0, [r7, #12]
	char received_char; // Variable to store the received character
	
	// Wait for the RXNE (Receive Data Register Not Empty) flag to be set
    // RXNE is bit 5 of the Status Register (SR)
    while ((USARTX->SR & (1 << 5)) == 0) {
 8000f58:	bf00      	nop
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0f9      	beq.n	8000f5a <USART_receive+0x16>
        // Busy wait until data is ready to be read
    }

    // Read the data from the Data Register (DR)
    received_char = USARTX->DR;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	72fb      	strb	r3, [r7, #11]

    // Return the received character
    return received_char;
 8000f6c:	7afb      	ldrb	r3, [r7, #11]
	
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <USART_transmit>:

void USART_transmit(uint8_t usart, char c) {
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	460a      	mov	r2, r1
 8000f80:	71fb      	strb	r3, [r7, #7]
 8000f82:	4613      	mov	r3, r2
 8000f84:	71bb      	strb	r3, [r7, #6]
    USART_TypeDef *USARTX = select_USART(usart);  // Select the appropriate USART instance   
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff feb1 	bl	8000cf0 <select_USART>
 8000f8e:	60f8      	str	r0, [r7, #12]
    // Wait for the TXE (Transmit Data Register Empty) flag to be set
    // TXE is bit 7 of the Status Register (SR)
    while ((USARTX->SR & (1 << 7)) == 0) {
 8000f90:	bf00      	nop
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f9      	beq.n	8000f92 <USART_transmit+0x1c>
        // Busy wait until the transmit buffer is empty
    }

    // Write the character to the Data Register (DR)
    USARTX->DR = c;
 8000f9e:	79ba      	ldrb	r2, [r7, #6]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	605a      	str	r2, [r3, #4]
}
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <USART_send_string>:

void USART_send_string(uint8_t usart, const char *str) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
    while (*str) {
 8000fb8:	e008      	b.n	8000fcc <USART_send_string+0x20>
        USART_transmit(usart, *str++);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	603a      	str	r2, [r7, #0]
 8000fc0:	781a      	ldrb	r2, [r3, #0]
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ffd5 	bl	8000f76 <USART_transmit>
    while (*str) {
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f2      	bne.n	8000fba <USART_send_string+0xe>
    }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <init_usart_receive_interrupt>:



void init_usart_receive_interrupt(uint8_t usart, uint32_t baud_rate, uint8_t priority_level) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	71bb      	strb	r3, [r7, #6]
    // Initialize USART (enable clock, set GPIO, configure baud rate, enable USART)
		// Select the appropriate USART instance
    USART_TypeDef *USARTX = select_USART(usart);
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fe7c 	bl	8000cf0 <select_USART>
 8000ff8:	60b8      	str	r0, [r7, #8]
    init_USART(usart, baud_rate);
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	6839      	ldr	r1, [r7, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff32 	bl	8000e68 <init_USART>
    uint32_t irq_number;
	
	__disableinterrupt();
 8001004:	b672      	cpsid	i
    // Enable RXNEIE (Receive Data Register Not Empty Interrupt Enable)
    USARTX->CR1 |= (1 << 5);
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	f043 0220 	orr.w	r2, r3, #32
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	60da      	str	r2, [r3, #12]

    // Enable the USART interrupt in the NVIC
    if (usart == 1) {
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d108      	bne.n	800102a <init_usart_receive_interrupt+0x4a>
    	irq_number = 37;
 8001018:	2325      	movs	r3, #37	@ 0x25
 800101a:	60fb      	str	r3, [r7, #12]
        NVIC_ISER1 |= (1 << 5);  // Enable interrupt for USART1
 800101c:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <init_usart_receive_interrupt+0x90>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a13      	ldr	r2, [pc, #76]	@ (8001070 <init_usart_receive_interrupt+0x90>)
 8001022:	f043 0320 	orr.w	r3, r3, #32
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	e016      	b.n	8001058 <init_usart_receive_interrupt+0x78>
    } else if (usart == 2) {
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d108      	bne.n	8001042 <init_usart_receive_interrupt+0x62>
    	irq_number = 38;
 8001030:	2326      	movs	r3, #38	@ 0x26
 8001032:	60fb      	str	r3, [r7, #12]
        NVIC_ISER1 |= (1 << 6);  // Enable interrupt for USART2
 8001034:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <init_usart_receive_interrupt+0x90>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0d      	ldr	r2, [pc, #52]	@ (8001070 <init_usart_receive_interrupt+0x90>)
 800103a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	e00a      	b.n	8001058 <init_usart_receive_interrupt+0x78>
    } else if (usart == 3) {
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b03      	cmp	r3, #3
 8001046:	d107      	bne.n	8001058 <init_usart_receive_interrupt+0x78>
    	irq_number = 39;
 8001048:	2327      	movs	r3, #39	@ 0x27
 800104a:	60fb      	str	r3, [r7, #12]
        NVIC_ISER1 |= (1 << 7);  // Enable interrupt for USART3
 800104c:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <init_usart_receive_interrupt+0x90>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a07      	ldr	r2, [pc, #28]	@ (8001070 <init_usart_receive_interrupt+0x90>)
 8001052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001056:	6013      	str	r3, [r2, #0]
    }
    NVIC_SetPriority(irq_number ,priority_level );
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	79ba      	ldrb	r2, [r7, #6]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fe0d 	bl	8000c80 <NVIC_SetPriority>
	__enableinterrupt();
 8001066:	b662      	cpsie	i
}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	e000e104 	.word	0xe000e104

08001074 <led_stop>:

uint8_t current_led_number = 0;
volatile uint8_t effect = 0;


void led_stop (){
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
	for (int i = 0; i< led_numbers; i++){
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	e009      	b.n	8001094 <led_stop+0x20>
		Write_GPIO(portC, i, 0);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2200      	movs	r2, #0
 8001086:	4619      	mov	r1, r3
 8001088:	2003      	movs	r0, #3
 800108a:	f7ff fdcd 	bl	8000c28 <Write_GPIO>
	for (int i = 0; i< led_numbers; i++){
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3301      	adds	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <led_stop+0x38>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4293      	cmp	r3, r2
 800109e:	dbef      	blt.n	8001080 <led_stop+0xc>
	}
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000000 	.word	0x20000000

080010b0 <led_swap_forward_and_Reverse>:

void led_swap_forward_and_Reverse(int i) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    static int previous = -1;

    // Turn off the previous LED if valid
    if (previous >= 0 && previous <= 8) {
 80010b8:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <led_swap_forward_and_Reverse+0x44>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0b      	blt.n	80010d8 <led_swap_forward_and_Reverse+0x28>
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <led_swap_forward_and_Reverse+0x44>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	dc07      	bgt.n	80010d8 <led_swap_forward_and_Reverse+0x28>
        Write_GPIO(portC, previous, 0);
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <led_swap_forward_and_Reverse+0x44>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	2003      	movs	r0, #3
 80010d4:	f7ff fda8 	bl	8000c28 <Write_GPIO>
    }

    // Turn on the current LED
    Write_GPIO(portC, i, 1);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2201      	movs	r2, #1
 80010de:	4619      	mov	r1, r3
 80010e0:	2003      	movs	r0, #3
 80010e2:	f7ff fda1 	bl	8000c28 <Write_GPIO>

    // Save current LED as previous for next round
    previous = i;
 80010e6:	4a03      	ldr	r2, [pc, #12]	@ (80010f4 <led_swap_forward_and_Reverse+0x44>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000004 	.word	0x20000004

080010f8 <led_swap_from_middle_to_edges>:

void led_swap_from_middle_to_edges (int i){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	static int right_previous = -1;
	static int left_previous = -1;
	static int right_next = -1;
	static int left_next = -1;

	if (i==4){
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b04      	cmp	r3, #4
 8001104:	d118      	bne.n	8001138 <led_swap_from_middle_to_edges+0x40>
		led_stop ();
 8001106:	f7ff ffb5 	bl	8001074 <led_stop>
		Write_GPIO (portC, i,1);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2201      	movs	r2, #1
 8001110:	4619      	mov	r1, r3
 8001112:	2003      	movs	r0, #3
 8001114:	f7ff fd88 	bl	8000c28 <Write_GPIO>
		right_previous = left_previous = i;
 8001118:	4a25      	ldr	r2, [pc, #148]	@ (80011b0 <led_swap_from_middle_to_edges+0xb8>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	4b24      	ldr	r3, [pc, #144]	@ (80011b0 <led_swap_from_middle_to_edges+0xb8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a24      	ldr	r2, [pc, #144]	@ (80011b4 <led_swap_from_middle_to_edges+0xbc>)
 8001124:	6013      	str	r3, [r2, #0]
		right_next = i+1;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3301      	adds	r3, #1
 800112a:	4a23      	ldr	r2, [pc, #140]	@ (80011b8 <led_swap_from_middle_to_edges+0xc0>)
 800112c:	6013      	str	r3, [r2, #0]
		left_next = i-1;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3b01      	subs	r3, #1
 8001132:	4a22      	ldr	r2, [pc, #136]	@ (80011bc <led_swap_from_middle_to_edges+0xc4>)
 8001134:	6013      	str	r3, [r2, #0]
		right_next = right_next+1;
		left_next = left_next-1;
	}


}
 8001136:	e037      	b.n	80011a8 <led_swap_from_middle_to_edges+0xb0>
	else if (i >= 5 && i < 9){
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b04      	cmp	r3, #4
 800113c:	dd34      	ble.n	80011a8 <led_swap_from_middle_to_edges+0xb0>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b08      	cmp	r3, #8
 8001142:	dc31      	bgt.n	80011a8 <led_swap_from_middle_to_edges+0xb0>
		Write_GPIO(portC, left_previous, 0);
 8001144:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <led_swap_from_middle_to_edges+0xb8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2200      	movs	r2, #0
 800114c:	4619      	mov	r1, r3
 800114e:	2003      	movs	r0, #3
 8001150:	f7ff fd6a 	bl	8000c28 <Write_GPIO>
		Write_GPIO(portC, right_previous, 0);
 8001154:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <led_swap_from_middle_to_edges+0xbc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2200      	movs	r2, #0
 800115c:	4619      	mov	r1, r3
 800115e:	2003      	movs	r0, #3
 8001160:	f7ff fd62 	bl	8000c28 <Write_GPIO>
		Write_GPIO(portC, right_next, 1);
 8001164:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <led_swap_from_middle_to_edges+0xc0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2201      	movs	r2, #1
 800116c:	4619      	mov	r1, r3
 800116e:	2003      	movs	r0, #3
 8001170:	f7ff fd5a 	bl	8000c28 <Write_GPIO>
		Write_GPIO(portC, left_next, 1);
 8001174:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <led_swap_from_middle_to_edges+0xc4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2201      	movs	r2, #1
 800117c:	4619      	mov	r1, r3
 800117e:	2003      	movs	r0, #3
 8001180:	f7ff fd52 	bl	8000c28 <Write_GPIO>
		left_previous = left_next;
 8001184:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <led_swap_from_middle_to_edges+0xc4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a09      	ldr	r2, [pc, #36]	@ (80011b0 <led_swap_from_middle_to_edges+0xb8>)
 800118a:	6013      	str	r3, [r2, #0]
		right_previous = right_next;
 800118c:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <led_swap_from_middle_to_edges+0xc0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a08      	ldr	r2, [pc, #32]	@ (80011b4 <led_swap_from_middle_to_edges+0xbc>)
 8001192:	6013      	str	r3, [r2, #0]
		right_next = right_next+1;
 8001194:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <led_swap_from_middle_to_edges+0xc0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	4a07      	ldr	r2, [pc, #28]	@ (80011b8 <led_swap_from_middle_to_edges+0xc0>)
 800119c:	6013      	str	r3, [r2, #0]
		left_next = left_next-1;
 800119e:	4b07      	ldr	r3, [pc, #28]	@ (80011bc <led_swap_from_middle_to_edges+0xc4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	4a05      	ldr	r2, [pc, #20]	@ (80011bc <led_swap_from_middle_to_edges+0xc4>)
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000008 	.word	0x20000008
 80011b4:	2000000c 	.word	0x2000000c
 80011b8:	20000010 	.word	0x20000010
 80011bc:	20000014 	.word	0x20000014

080011c0 <led_swap_from_edges_to_middle>:


void led_swap_from_edges_to_middle(int i) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    static int left_previous = -1;
    static int right_previous = -1;
    static int left_next = -1;
    static int right_next = -1;

    if (i == 0) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d118      	bne.n	8001200 <led_swap_from_edges_to_middle+0x40>
        led_stop();  // Optional: turn all LEDs off
 80011ce:	f7ff ff51 	bl	8001074 <led_stop>
        Write_GPIO(portC, 0, 1);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2100      	movs	r1, #0
 80011d6:	2003      	movs	r0, #3
 80011d8:	f7ff fd26 	bl	8000c28 <Write_GPIO>
        Write_GPIO(portC, 8, 1);
 80011dc:	2201      	movs	r2, #1
 80011de:	2108      	movs	r1, #8
 80011e0:	2003      	movs	r0, #3
 80011e2:	f7ff fd21 	bl	8000c28 <Write_GPIO>
        left_previous = 0;
 80011e6:	4b31      	ldr	r3, [pc, #196]	@ (80012ac <led_swap_from_edges_to_middle+0xec>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
        right_previous = 8;
 80011ec:	4b30      	ldr	r3, [pc, #192]	@ (80012b0 <led_swap_from_edges_to_middle+0xf0>)
 80011ee:	2208      	movs	r2, #8
 80011f0:	601a      	str	r2, [r3, #0]
        left_next = 1;
 80011f2:	4b30      	ldr	r3, [pc, #192]	@ (80012b4 <led_swap_from_edges_to_middle+0xf4>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
        right_next = 7;
 80011f8:	4b2f      	ldr	r3, [pc, #188]	@ (80012b8 <led_swap_from_edges_to_middle+0xf8>)
 80011fa:	2207      	movs	r2, #7
 80011fc:	601a      	str	r2, [r3, #0]
        // Turn off previous LEDs and light middle
        Write_GPIO(portC, left_previous, 0);
        Write_GPIO(portC, right_previous, 0);
        Write_GPIO(portC, 4, 1);
    }
}
 80011fe:	e050      	b.n	80012a2 <led_swap_from_edges_to_middle+0xe2>
    else if (i >= 1 && i <= 4) {
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	dd35      	ble.n	8001272 <led_swap_from_edges_to_middle+0xb2>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b04      	cmp	r3, #4
 800120a:	dc32      	bgt.n	8001272 <led_swap_from_edges_to_middle+0xb2>
        Write_GPIO(portC, left_previous, 0);
 800120c:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <led_swap_from_edges_to_middle+0xec>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2200      	movs	r2, #0
 8001214:	4619      	mov	r1, r3
 8001216:	2003      	movs	r0, #3
 8001218:	f7ff fd06 	bl	8000c28 <Write_GPIO>
        Write_GPIO(portC, right_previous, 0);
 800121c:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <led_swap_from_edges_to_middle+0xf0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2200      	movs	r2, #0
 8001224:	4619      	mov	r1, r3
 8001226:	2003      	movs	r0, #3
 8001228:	f7ff fcfe 	bl	8000c28 <Write_GPIO>
        Write_GPIO(portC, left_next, 1);
 800122c:	4b21      	ldr	r3, [pc, #132]	@ (80012b4 <led_swap_from_edges_to_middle+0xf4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2201      	movs	r2, #1
 8001234:	4619      	mov	r1, r3
 8001236:	2003      	movs	r0, #3
 8001238:	f7ff fcf6 	bl	8000c28 <Write_GPIO>
        Write_GPIO(portC, right_next, 1);
 800123c:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <led_swap_from_edges_to_middle+0xf8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2201      	movs	r2, #1
 8001244:	4619      	mov	r1, r3
 8001246:	2003      	movs	r0, #3
 8001248:	f7ff fcee 	bl	8000c28 <Write_GPIO>
        left_previous = left_next;
 800124c:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <led_swap_from_edges_to_middle+0xf4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a16      	ldr	r2, [pc, #88]	@ (80012ac <led_swap_from_edges_to_middle+0xec>)
 8001252:	6013      	str	r3, [r2, #0]
        right_previous = right_next;
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <led_swap_from_edges_to_middle+0xf8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a15      	ldr	r2, [pc, #84]	@ (80012b0 <led_swap_from_edges_to_middle+0xf0>)
 800125a:	6013      	str	r3, [r2, #0]
        left_next++;
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <led_swap_from_edges_to_middle+0xf4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	4a14      	ldr	r2, [pc, #80]	@ (80012b4 <led_swap_from_edges_to_middle+0xf4>)
 8001264:	6013      	str	r3, [r2, #0]
        right_next--;
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <led_swap_from_edges_to_middle+0xf8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3b01      	subs	r3, #1
 800126c:	4a12      	ldr	r2, [pc, #72]	@ (80012b8 <led_swap_from_edges_to_middle+0xf8>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	e017      	b.n	80012a2 <led_swap_from_edges_to_middle+0xe2>
    else if (i == 5) {
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b05      	cmp	r3, #5
 8001276:	d114      	bne.n	80012a2 <led_swap_from_edges_to_middle+0xe2>
        Write_GPIO(portC, left_previous, 0);
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <led_swap_from_edges_to_middle+0xec>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	2003      	movs	r0, #3
 8001284:	f7ff fcd0 	bl	8000c28 <Write_GPIO>
        Write_GPIO(portC, right_previous, 0);
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <led_swap_from_edges_to_middle+0xf0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2200      	movs	r2, #0
 8001290:	4619      	mov	r1, r3
 8001292:	2003      	movs	r0, #3
 8001294:	f7ff fcc8 	bl	8000c28 <Write_GPIO>
        Write_GPIO(portC, 4, 1);
 8001298:	2201      	movs	r2, #1
 800129a:	2104      	movs	r1, #4
 800129c:	2003      	movs	r0, #3
 800129e:	f7ff fcc3 	bl	8000c28 <Write_GPIO>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000018 	.word	0x20000018
 80012b0:	2000001c 	.word	0x2000001c
 80012b4:	20000020 	.word	0x20000020
 80012b8:	20000024 	.word	0x20000024

080012bc <led_timer_callback>:


void led_timer_callback (TimerHandle_t xTimer){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	if (effect == 1){
 80012c4:	4b3a      	ldr	r3, [pc, #232]	@ (80013b0 <led_timer_callback+0xf4>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d112      	bne.n	80012f4 <led_timer_callback+0x38>
		led_swap_forward_and_Reverse (current_led_number);
 80012ce:	4b39      	ldr	r3, [pc, #228]	@ (80013b4 <led_timer_callback+0xf8>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff feec 	bl	80010b0 <led_swap_forward_and_Reverse>
		current_led_number = (current_led_number+1) % led_numbers;
 80012d8:	4b36      	ldr	r3, [pc, #216]	@ (80013b4 <led_timer_callback+0xf8>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	4a36      	ldr	r2, [pc, #216]	@ (80013b8 <led_timer_callback+0xfc>)
 80012e0:	7812      	ldrb	r2, [r2, #0]
 80012e2:	fb93 f1f2 	sdiv	r1, r3, r2
 80012e6:	fb01 f202 	mul.w	r2, r1, r2
 80012ea:	1a9b      	subs	r3, r3, r2
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b31      	ldr	r3, [pc, #196]	@ (80013b4 <led_timer_callback+0xf8>)
 80012f0:	701a      	strb	r2, [r3, #0]
	        reverse_index = 0;        // Restart
	    }
	}


}
 80012f2:	e059      	b.n	80013a8 <led_timer_callback+0xec>
	else if (effect == 2){
 80012f4:	4b2e      	ldr	r3, [pc, #184]	@ (80013b0 <led_timer_callback+0xf4>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d116      	bne.n	800132c <led_timer_callback+0x70>
		led_swap_forward_and_Reverse (current_led_number);
 80012fe:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <led_timer_callback+0xf8>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fed4 	bl	80010b0 <led_swap_forward_and_Reverse>
		if (current_led_number == 0){
 8001308:	4b2a      	ldr	r3, [pc, #168]	@ (80013b4 <led_timer_callback+0xf8>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d106      	bne.n	800131e <led_timer_callback+0x62>
		   current_led_number = led_numbers - 1;
 8001310:	4b29      	ldr	r3, [pc, #164]	@ (80013b8 <led_timer_callback+0xfc>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	3b01      	subs	r3, #1
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b26      	ldr	r3, [pc, #152]	@ (80013b4 <led_timer_callback+0xf8>)
 800131a:	701a      	strb	r2, [r3, #0]
}
 800131c:	e044      	b.n	80013a8 <led_timer_callback+0xec>
		   current_led_number--;
 800131e:	4b25      	ldr	r3, [pc, #148]	@ (80013b4 <led_timer_callback+0xf8>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	3b01      	subs	r3, #1
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b23      	ldr	r3, [pc, #140]	@ (80013b4 <led_timer_callback+0xf8>)
 8001328:	701a      	strb	r2, [r3, #0]
}
 800132a:	e03d      	b.n	80013a8 <led_timer_callback+0xec>
	else if (effect == 3){
 800132c:	4b20      	ldr	r3, [pc, #128]	@ (80013b0 <led_timer_callback+0xf4>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b03      	cmp	r3, #3
 8001334:	d11c      	bne.n	8001370 <led_timer_callback+0xb4>
		led_swap_from_middle_to_edges(middle_led);
 8001336:	4b21      	ldr	r3, [pc, #132]	@ (80013bc <led_timer_callback+0x100>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fedc 	bl	80010f8 <led_swap_from_middle_to_edges>
		middle_led++;
 8001340:	4b1e      	ldr	r3, [pc, #120]	@ (80013bc <led_timer_callback+0x100>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b1c      	ldr	r3, [pc, #112]	@ (80013bc <led_timer_callback+0x100>)
 800134a:	701a      	strb	r2, [r3, #0]
		if (middle_led > 9){
 800134c:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <led_timer_callback+0x100>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b09      	cmp	r3, #9
 8001352:	d929      	bls.n	80013a8 <led_timer_callback+0xec>
		        Write_GPIO(portC, 0, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	2100      	movs	r1, #0
 8001358:	2003      	movs	r0, #3
 800135a:	f7ff fc65 	bl	8000c28 <Write_GPIO>
		        Write_GPIO(portC, 8, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2108      	movs	r1, #8
 8001362:	2003      	movs	r0, #3
 8001364:	f7ff fc60 	bl	8000c28 <Write_GPIO>
		        middle_led = 4;  // Reset to restart effect
 8001368:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <led_timer_callback+0x100>)
 800136a:	2204      	movs	r2, #4
 800136c:	701a      	strb	r2, [r3, #0]
}
 800136e:	e01b      	b.n	80013a8 <led_timer_callback+0xec>
	else if (effect == 4) {
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <led_timer_callback+0xf4>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b04      	cmp	r3, #4
 8001378:	d116      	bne.n	80013a8 <led_timer_callback+0xec>
	    led_swap_from_edges_to_middle(reverse_index);
 800137a:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <led_timer_callback+0x104>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff1e 	bl	80011c0 <led_swap_from_edges_to_middle>
	    reverse_index++;
 8001384:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <led_timer_callback+0x104>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <led_timer_callback+0x104>)
 800138e:	701a      	strb	r2, [r3, #0]
	    if (reverse_index > 5) {
 8001390:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <led_timer_callback+0x104>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b05      	cmp	r3, #5
 8001396:	d907      	bls.n	80013a8 <led_timer_callback+0xec>
	        Write_GPIO(portC, 4, 0);  // Turn off middle
 8001398:	2200      	movs	r2, #0
 800139a:	2104      	movs	r1, #4
 800139c:	2003      	movs	r0, #3
 800139e:	f7ff fc43 	bl	8000c28 <Write_GPIO>
	        reverse_index = 0;        // Restart
 80013a2:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <led_timer_callback+0x104>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000052 	.word	0x20000052
 80013b4:	20000051 	.word	0x20000051
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000001 	.word	0x20000001
 80013c0:	20000050 	.word	0x20000050

080013c4 <Command_Task_Handler>:
#include "timers.h"
#include "String.h"

uint8_t message_valid = 1 ;

void Command_Task_Handler(void* parameters){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	6078      	str	r0, [r7, #4]
	//BaseType_t returnValue;
	uint8_t command;

	while (1){
		//initially it is blocked using notify wait. If notification is sent, it will unblock and ready to run
		 xTaskNotifyWait(0,0, NULL,portMAX_DELAY );
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2300      	movs	r3, #0
 80013d4:	2200      	movs	r2, #0
 80013d6:	2100      	movs	r1, #0
 80013d8:	2000      	movs	r0, #0
 80013da:	f001 ff65 	bl	80032a8 <xTaskGenericNotifyWait>

		 if (xQueueReceive(q_data, &command, 0) == pdPASS){
 80013de:	4b21      	ldr	r3, [pc, #132]	@ (8001464 <Command_Task_Handler+0xa0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f107 010e 	add.w	r1, r7, #14
 80013e6:	2200      	movs	r2, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fd45 	bl	8001e78 <xQueueReceive>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d1eb      	bne.n	80013cc <Command_Task_Handler+0x8>
			 if (command >= '0' && command <= '5'){
 80013f4:	7bbb      	ldrb	r3, [r7, #14]
 80013f6:	2b2f      	cmp	r3, #47	@ 0x2f
 80013f8:	d924      	bls.n	8001444 <Command_Task_Handler+0x80>
 80013fa:	7bbb      	ldrb	r3, [r7, #14]
 80013fc:	2b35      	cmp	r3, #53	@ 0x35
 80013fe:	d821      	bhi.n	8001444 <Command_Task_Handler+0x80>
				 uint8_t cmd_num = command - '0';
 8001400:	7bbb      	ldrb	r3, [r7, #14]
 8001402:	3b30      	subs	r3, #48	@ 0x30
 8001404:	73fb      	strb	r3, [r7, #15]
				 effect = cmd_num;
 8001406:	4a18      	ldr	r2, [pc, #96]	@ (8001468 <Command_Task_Handler+0xa4>)
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	7013      	strb	r3, [r2, #0]

				 if (cmd_num <= 4) {
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	2b04      	cmp	r3, #4
 8001410:	d809      	bhi.n	8001426 <Command_Task_Handler+0x62>
				      xTaskNotify(led_task_Handle, 0, eNoAction);
 8001412:	4b16      	ldr	r3, [pc, #88]	@ (800146c <Command_Task_Handler+0xa8>)
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	2300      	movs	r3, #0
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2300      	movs	r3, #0
 800141c:	2200      	movs	r2, #0
 800141e:	2100      	movs	r1, #0
 8001420:	f001 ffda 	bl	80033d8 <xTaskGenericNotify>
			 if (command >= '0' && command <= '5'){
 8001424:	e01c      	b.n	8001460 <Command_Task_Handler+0x9c>
				   }
				 else {
					 led_stop ();
 8001426:	f7ff fe25 	bl	8001074 <led_stop>
					 message_valid = 1;
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <Command_Task_Handler+0xac>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
					 xTaskNotify(menu_task_Handle, 0, eNoAction);
 8001430:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <Command_Task_Handler+0xb0>)
 8001432:	6818      	ldr	r0, [r3, #0]
 8001434:	2300      	movs	r3, #0
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2300      	movs	r3, #0
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	f001 ffcb 	bl	80033d8 <xTaskGenericNotify>
			 if (command >= '0' && command <= '5'){
 8001442:	e00d      	b.n	8001460 <Command_Task_Handler+0x9c>
				 }
			 }
			 else {
				 led_stop ();
 8001444:	f7ff fe16 	bl	8001074 <led_stop>
				 message_valid = 0;
 8001448:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <Command_Task_Handler+0xac>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
				 xTaskNotify(menu_task_Handle, 0, eNoAction);
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <Command_Task_Handler+0xb0>)
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	2300      	movs	r3, #0
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2300      	movs	r3, #0
 8001458:	2200      	movs	r2, #0
 800145a:	2100      	movs	r1, #0
 800145c:	f001 ffbc 	bl	80033d8 <xTaskGenericNotify>
		 xTaskNotifyWait(0,0, NULL,portMAX_DELAY );
 8001460:	e7b4      	b.n	80013cc <Command_Task_Handler+0x8>
 8001462:	bf00      	nop
 8001464:	20000068 	.word	0x20000068
 8001468:	20000052 	.word	0x20000052
 800146c:	20000064 	.word	0x20000064
 8001470:	20000028 	.word	0x20000028
 8001474:	20000058 	.word	0x20000058

08001478 <LED_Task_Handler>:


	}
}

void LED_Task_Handler(void* parameters){
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b085      	sub	sp, #20
 800147c:	af02      	add	r7, sp, #8
 800147e:	6078      	str	r0, [r7, #4]

	while (1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2300      	movs	r3, #0
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	2000      	movs	r0, #0
 800148e:	f001 ff0b 	bl	80032a8 <xTaskGenericNotifyWait>
		if (effect == 0){
 8001492:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <LED_Task_Handler+0x58>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10b      	bne.n	80014b4 <LED_Task_Handler+0x3c>
			xTimerStop(handle_led_timer, 0);
 800149c:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <LED_Task_Handler+0x5c>)
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	2300      	movs	r3, #0
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2300      	movs	r3, #0
 80014a6:	2200      	movs	r2, #0
 80014a8:	2103      	movs	r1, #3
 80014aa:	f002 fb3d 	bl	8003b28 <xTimerGenericCommandFromTask>
			led_stop ();
 80014ae:	f7ff fde1 	bl	8001074 <led_stop>
 80014b2:	e7e5      	b.n	8001480 <LED_Task_Handler+0x8>
		}

		else {
			xTimerStart(handle_led_timer, 0);
 80014b4:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <LED_Task_Handler+0x5c>)
 80014b6:	681c      	ldr	r4, [r3, #0]
 80014b8:	f001 fa24 	bl	8002904 <xTaskGetTickCount>
 80014bc:	4602      	mov	r2, r0
 80014be:	2300      	movs	r3, #0
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2300      	movs	r3, #0
 80014c4:	2101      	movs	r1, #1
 80014c6:	4620      	mov	r0, r4
 80014c8:	f002 fb2e 	bl	8003b28 <xTimerGenericCommandFromTask>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80014cc:	e7d8      	b.n	8001480 <LED_Task_Handler+0x8>
 80014ce:	bf00      	nop
 80014d0:	20000052 	.word	0x20000052
 80014d4:	20000054 	.word	0x20000054

080014d8 <Menu_Task_Handler>:
	}

}


void Menu_Task_Handler(void* parameters){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af02      	add	r7, sp, #8
 80014de:	6078      	str	r0, [r7, #4]
	char* menu_msg =
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <Menu_Task_Handler+0x54>)
 80014e2:	60fb      	str	r3, [r7, #12]
	        "1: LED Effect 1\r\n"
	        "2: LED Effect 2\r\n"
	        "3: LED Effect 3\r\n"
	        "4: LED Effect 4\r\n"
	        "Enter your choice: ";
	char* invalid_msg = "\r\n--- Command Invalid ---\r\n"
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <Menu_Task_Handler+0x58>)
 80014e6:	60bb      	str	r3, [r7, #8]

	while (1){
		// Send menu to print task
		//size_t menu_msg_len = strlen(menu_msg);
		//size_t invalid_msg_len = strlen(invalid_msg);
		if (message_valid){
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <Menu_Task_Handler+0x5c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d009      	beq.n	8001504 <Menu_Task_Handler+0x2c>

			xQueueSend(q_print, &menu_msg, portMAX_DELAY);
 80014f0:	4b11      	ldr	r3, [pc, #68]	@ (8001538 <Menu_Task_Handler+0x60>)
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	f107 010c 	add.w	r1, r7, #12
 80014f8:	2300      	movs	r3, #0
 80014fa:	f04f 32ff 	mov.w	r2, #4294967295
 80014fe:	f000 fb03 	bl	8001b08 <xQueueGenericSend>
 8001502:	e008      	b.n	8001516 <Menu_Task_Handler+0x3e>

			}
		else {

			xQueueSend(q_print, &invalid_msg, portMAX_DELAY);
 8001504:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <Menu_Task_Handler+0x60>)
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	f107 0108 	add.w	r1, r7, #8
 800150c:	2300      	movs	r3, #0
 800150e:	f04f 32ff 	mov.w	r2, #4294967295
 8001512:	f000 faf9 	bl	8001b08 <xQueueGenericSend>

		}
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY );
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2300      	movs	r3, #0
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	2000      	movs	r0, #0
 8001524:	f001 fec0 	bl	80032a8 <xTaskGenericNotifyWait>
		if (message_valid){
 8001528:	e7de      	b.n	80014e8 <Menu_Task_Handler+0x10>
 800152a:	bf00      	nop
 800152c:	08004a6c 	.word	0x08004a6c
 8001530:	08004af0 	.word	0x08004af0
 8001534:	20000028 	.word	0x20000028
 8001538:	2000006c 	.word	0x2000006c

0800153c <Print_Task_Handler>:
	}

}


void Print_Task_Handler(void* parameters) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	char *msg_to_print;

    while (1) {
    	//USART_transmit(1, 'h');
        if (xQueueReceive(q_print, &msg_to_print, portMAX_DELAY) == pdPASS) {
 8001544:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <Print_Task_Handler+0x2c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f107 010c 	add.w	r1, r7, #12
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	4618      	mov	r0, r3
 8001552:	f000 fc91 	bl	8001e78 <xQueueReceive>
 8001556:	4603      	mov	r3, r0
 8001558:	2b01      	cmp	r3, #1
 800155a:	d1f3      	bne.n	8001544 <Print_Task_Handler+0x8>
        	USART_send_string(1, msg_to_print);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4619      	mov	r1, r3
 8001560:	2001      	movs	r0, #1
 8001562:	f7ff fd23 	bl	8000fac <USART_send_string>
        if (xQueueReceive(q_print, &msg_to_print, portMAX_DELAY) == pdPASS) {
 8001566:	e7ed      	b.n	8001544 <Print_Task_Handler+0x8>
 8001568:	2000006c 	.word	0x2000006c

0800156c <USART1_IRQHandler>:
QueueHandle_t q_data;
QueueHandle_t q_print;
BaseType_t status;


void USART1_IRQHandler (){
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af02      	add	r7, sp, #8


	uint8_t byte = USART_receive (1);
 8001572:	2001      	movs	r0, #1
 8001574:	f7ff fce6 	bl	8000f44 <USART_receive>
 8001578:	4603      	mov	r3, r0
 800157a:	71fb      	strb	r3, [r7, #7]
	xQueueSendFromISR (q_data,&byte, NULL ); //enqueue data byte
 800157c:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <USART1_IRQHandler+0x3c>)
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	1df9      	adds	r1, r7, #7
 8001582:	2300      	movs	r3, #0
 8001584:	2200      	movs	r2, #0
 8001586:	f000 fbc1 	bl	8001d0c <xQueueGenericSendFromISR>
	xTaskNotifyFromISR (commmand_task_Handle, 0, eNoAction, NULL);
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <USART1_IRQHandler+0x40>)
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	2300      	movs	r3, #0
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	2300      	movs	r3, #0
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2300      	movs	r3, #0
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	f002 f84c 	bl	8003638 <xTaskGenericNotifyFromISR>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000068 	.word	0x20000068
 80015ac:	2000005c 	.word	0x2000005c

080015b0 <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	@ 0x28
 80015b4:	af02      	add	r7, sp, #8

	SystemClock_Config();
 80015b6:	f7ff fa51 	bl	8000a5c <SystemClock_Config>
	NVIC_SetPriorityGrouping(NVIC_PRIORITY_GROUP_0); // 0 bits for subpriority, 4 bits for preemption
 80015ba:	2000      	movs	r0, #0
 80015bc:	f7ff fa96 	bl	8000aec <NVIC_SetPriorityGrouping>


	for (int i = 0; i<9; i++){
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	e009      	b.n	80015da <main+0x2a>
		Config_GPIO(portC, i, output_50Mhz, gp_output );
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	b2d9      	uxtb	r1, r3
 80015ca:	2300      	movs	r3, #0
 80015cc:	2203      	movs	r2, #3
 80015ce:	2003      	movs	r0, #3
 80015d0:	f7ff fada 	bl	8000b88 <Config_GPIO>
	for (int i = 0; i<9; i++){
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	3301      	adds	r3, #1
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	2b08      	cmp	r3, #8
 80015de:	ddf2      	ble.n	80015c6 <main+0x16>
	}


	//configuring usart 2 priority for priority level - 6
	init_usart_receive_interrupt(USART_1, 115200, 6);
 80015e0:	2206      	movs	r2, #6
 80015e2:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80015e6:	2001      	movs	r0, #1
 80015e8:	f7ff fcfa 	bl	8000fe0 <init_usart_receive_interrupt>




    // Task Creation
    status = xTaskCreate(Menu_Task_Handler, "Menu_Task", 200, NULL, 2, &menu_task_Handle);
 80015ec:	4b59      	ldr	r3, [pc, #356]	@ (8001754 <main+0x1a4>)
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	2302      	movs	r3, #2
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2300      	movs	r3, #0
 80015f6:	22c8      	movs	r2, #200	@ 0xc8
 80015f8:	4957      	ldr	r1, [pc, #348]	@ (8001758 <main+0x1a8>)
 80015fa:	4858      	ldr	r0, [pc, #352]	@ (800175c <main+0x1ac>)
 80015fc:	f000 fe9e 	bl	800233c <xTaskCreate>
 8001600:	4603      	mov	r3, r0
 8001602:	4a57      	ldr	r2, [pc, #348]	@ (8001760 <main+0x1b0>)
 8001604:	6013      	str	r3, [r2, #0]
    configASSERT(status == pdPASS);
 8001606:	4b56      	ldr	r3, [pc, #344]	@ (8001760 <main+0x1b0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d00b      	beq.n	8001626 <main+0x76>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 800160e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001612:	f383 8811 	msr	BASEPRI, r3
 8001616:	f3bf 8f6f 	isb	sy
 800161a:	f3bf 8f4f 	dsb	sy
 800161e:	61bb      	str	r3, [r7, #24]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	e7fd      	b.n	8001622 <main+0x72>

    status = xTaskCreate(Command_Task_Handler, "Command_Task", 200, NULL, 2, &commmand_task_Handle);
 8001626:	4b4f      	ldr	r3, [pc, #316]	@ (8001764 <main+0x1b4>)
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	2302      	movs	r3, #2
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2300      	movs	r3, #0
 8001630:	22c8      	movs	r2, #200	@ 0xc8
 8001632:	494d      	ldr	r1, [pc, #308]	@ (8001768 <main+0x1b8>)
 8001634:	484d      	ldr	r0, [pc, #308]	@ (800176c <main+0x1bc>)
 8001636:	f000 fe81 	bl	800233c <xTaskCreate>
 800163a:	4603      	mov	r3, r0
 800163c:	4a48      	ldr	r2, [pc, #288]	@ (8001760 <main+0x1b0>)
 800163e:	6013      	str	r3, [r2, #0]
    configASSERT(status == pdPASS);
 8001640:	4b47      	ldr	r3, [pc, #284]	@ (8001760 <main+0x1b0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d00b      	beq.n	8001660 <main+0xb0>
    __asm volatile
 8001648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800164c:	f383 8811 	msr	BASEPRI, r3
 8001650:	f3bf 8f6f 	isb	sy
 8001654:	f3bf 8f4f 	dsb	sy
 8001658:	617b      	str	r3, [r7, #20]
}
 800165a:	bf00      	nop
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <main+0xac>

    status = xTaskCreate(Print_Task_Handler, "Print_Task", 200, NULL, 2, &print_task_Handle);
 8001660:	4b43      	ldr	r3, [pc, #268]	@ (8001770 <main+0x1c0>)
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	2302      	movs	r3, #2
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2300      	movs	r3, #0
 800166a:	22c8      	movs	r2, #200	@ 0xc8
 800166c:	4941      	ldr	r1, [pc, #260]	@ (8001774 <main+0x1c4>)
 800166e:	4842      	ldr	r0, [pc, #264]	@ (8001778 <main+0x1c8>)
 8001670:	f000 fe64 	bl	800233c <xTaskCreate>
 8001674:	4603      	mov	r3, r0
 8001676:	4a3a      	ldr	r2, [pc, #232]	@ (8001760 <main+0x1b0>)
 8001678:	6013      	str	r3, [r2, #0]
    configASSERT(status == pdPASS);
 800167a:	4b39      	ldr	r3, [pc, #228]	@ (8001760 <main+0x1b0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d00b      	beq.n	800169a <main+0xea>
    __asm volatile
 8001682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001686:	f383 8811 	msr	BASEPRI, r3
 800168a:	f3bf 8f6f 	isb	sy
 800168e:	f3bf 8f4f 	dsb	sy
 8001692:	613b      	str	r3, [r7, #16]
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	e7fd      	b.n	8001696 <main+0xe6>

    status = xTaskCreate(LED_Task_Handler, "LED_Task", 200, NULL, 2, &led_task_Handle);
 800169a:	4b38      	ldr	r3, [pc, #224]	@ (800177c <main+0x1cc>)
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	2302      	movs	r3, #2
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2300      	movs	r3, #0
 80016a4:	22c8      	movs	r2, #200	@ 0xc8
 80016a6:	4936      	ldr	r1, [pc, #216]	@ (8001780 <main+0x1d0>)
 80016a8:	4836      	ldr	r0, [pc, #216]	@ (8001784 <main+0x1d4>)
 80016aa:	f000 fe47 	bl	800233c <xTaskCreate>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001760 <main+0x1b0>)
 80016b2:	6013      	str	r3, [r2, #0]
    configASSERT(status == pdPASS);
 80016b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001760 <main+0x1b0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d00b      	beq.n	80016d4 <main+0x124>
    __asm volatile
 80016bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016c0:	f383 8811 	msr	BASEPRI, r3
 80016c4:	f3bf 8f6f 	isb	sy
 80016c8:	f3bf 8f4f 	dsb	sy
 80016cc:	60fb      	str	r3, [r7, #12]
}
 80016ce:	bf00      	nop
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <main+0x120>


    //creating the queues:
    q_data = xQueueCreate (1, sizeof(char));
 80016d4:	2200      	movs	r2, #0
 80016d6:	2101      	movs	r1, #1
 80016d8:	2001      	movs	r0, #1
 80016da:	f000 f9a7 	bl	8001a2c <xQueueGenericCreate>
 80016de:	4603      	mov	r3, r0
 80016e0:	4a29      	ldr	r2, [pc, #164]	@ (8001788 <main+0x1d8>)
 80016e2:	6013      	str	r3, [r2, #0]
    configASSERT(q_data != NULL);
 80016e4:	4b28      	ldr	r3, [pc, #160]	@ (8001788 <main+0x1d8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10b      	bne.n	8001704 <main+0x154>
    __asm volatile
 80016ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016f0:	f383 8811 	msr	BASEPRI, r3
 80016f4:	f3bf 8f6f 	isb	sy
 80016f8:	f3bf 8f4f 	dsb	sy
 80016fc:	60bb      	str	r3, [r7, #8]
}
 80016fe:	bf00      	nop
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <main+0x150>

    q_print = xQueueCreate (10, sizeof(size_t));
 8001704:	2200      	movs	r2, #0
 8001706:	2104      	movs	r1, #4
 8001708:	200a      	movs	r0, #10
 800170a:	f000 f98f 	bl	8001a2c <xQueueGenericCreate>
 800170e:	4603      	mov	r3, r0
 8001710:	4a1e      	ldr	r2, [pc, #120]	@ (800178c <main+0x1dc>)
 8001712:	6013      	str	r3, [r2, #0]
    configASSERT(q_print != NULL);
 8001714:	4b1d      	ldr	r3, [pc, #116]	@ (800178c <main+0x1dc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10b      	bne.n	8001734 <main+0x184>
    __asm volatile
 800171c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001720:	f383 8811 	msr	BASEPRI, r3
 8001724:	f3bf 8f6f 	isb	sy
 8001728:	f3bf 8f4f 	dsb	sy
 800172c:	607b      	str	r3, [r7, #4]
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <main+0x180>

    //configuring the software timer
	handle_led_timer = xTimerCreate("LED_Timer", pdMS_TO_TICKS(100), pdTRUE, NULL, led_timer_callback);
 8001734:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <main+0x1e0>)
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2300      	movs	r3, #0
 800173a:	2201      	movs	r2, #1
 800173c:	2164      	movs	r1, #100	@ 0x64
 800173e:	4815      	ldr	r0, [pc, #84]	@ (8001794 <main+0x1e4>)
 8001740:	f002 f998 	bl	8003a74 <xTimerCreate>
 8001744:	4603      	mov	r3, r0
 8001746:	4a14      	ldr	r2, [pc, #80]	@ (8001798 <main+0x1e8>)
 8001748:	6013      	str	r3, [r2, #0]


	vTaskStartScheduler();
 800174a:	f000 ff81 	bl	8002650 <vTaskStartScheduler>


    /* Loop forever */
	for(;;){}
 800174e:	bf00      	nop
 8001750:	e7fd      	b.n	800174e <main+0x19e>
 8001752:	bf00      	nop
 8001754:	20000058 	.word	0x20000058
 8001758:	08004b20 	.word	0x08004b20
 800175c:	080014d9 	.word	0x080014d9
 8001760:	20000070 	.word	0x20000070
 8001764:	2000005c 	.word	0x2000005c
 8001768:	08004b2c 	.word	0x08004b2c
 800176c:	080013c5 	.word	0x080013c5
 8001770:	20000060 	.word	0x20000060
 8001774:	08004b3c 	.word	0x08004b3c
 8001778:	0800153d 	.word	0x0800153d
 800177c:	20000064 	.word	0x20000064
 8001780:	08004b48 	.word	0x08004b48
 8001784:	08001479 	.word	0x08001479
 8001788:	20000068 	.word	0x20000068
 800178c:	2000006c 	.word	0x2000006c
 8001790:	080012bd 	.word	0x080012bd
 8001794:	08004b54 	.word	0x08004b54
 8001798:	20000054 	.word	0x20000054

0800179c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800179c:	480d      	ldr	r0, [pc, #52]	@ (80017d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800179e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480c      	ldr	r0, [pc, #48]	@ (80017d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80017a6:	490d      	ldr	r1, [pc, #52]	@ (80017dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80017a8:	4a0d      	ldr	r2, [pc, #52]	@ (80017e0 <LoopForever+0xe>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017bc:	4c0a      	ldr	r4, [pc, #40]	@ (80017e8 <LoopForever+0x16>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017ca:	f003 f911 	bl	80049f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ce:	f7ff feef 	bl	80015b0 <main>

080017d2 <LoopForever>:

LoopForever:
  b LoopForever
 80017d2:	e7fe      	b.n	80017d2 <LoopForever>
  ldr   r0, =_estack
 80017d4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80017e0:	08004b78 	.word	0x08004b78
  ldr r2, =_sbss
 80017e4:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80017e8:	200031d8 	.word	0x200031d8

080017ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC1_2_IRQHandler>

080017ee <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f103 0208 	add.w	r2, r3, #8
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f04f 32ff 	mov.w	r2, #4294967295
 8001806:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f103 0208 	add.w	r2, r3, #8
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f103 0208 	add.w	r2, r3, #8
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800185a:	d103      	bne.n	8001864 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e00c      	b.n	800187e <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3308      	adds	r3, #8
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e002      	b.n	8001872 <vListInsert+0x2e>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	429a      	cmp	r2, r3
 800187c:	d2f6      	bcs.n	800186c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	1c5a      	adds	r2, r3, #1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6892      	ldr	r2, [r2, #8]
 80018ca:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6852      	ldr	r2, [r2, #4]
 80018d4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d103      	bne.n	80018e8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	1e5a      	subs	r2, r3, #1
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
	...

08001908 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001912:	2301      	movs	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10b      	bne.n	8001938 <xQueueGenericReset+0x30>
    __asm volatile
 8001920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001924:	f383 8811 	msr	BASEPRI, r3
 8001928:	f3bf 8f6f 	isb	sy
 800192c:	f3bf 8f4f 	dsb	sy
 8001930:	60fb      	str	r3, [r7, #12]
}
 8001932:	bf00      	nop
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d05d      	beq.n	80019fa <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8001942:	2b00      	cmp	r3, #0
 8001944:	d059      	beq.n	80019fa <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800194e:	2100      	movs	r1, #0
 8001950:	fba3 2302 	umull	r2, r3, r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d000      	beq.n	800195a <xQueueGenericReset+0x52>
 8001958:	2101      	movs	r1, #1
 800195a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800195c:	2b00      	cmp	r3, #0
 800195e:	d14c      	bne.n	80019fa <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8001960:	f002 fcc2 	bl	80042e8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800196c:	6939      	ldr	r1, [r7, #16]
 800196e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	441a      	add	r2, r3
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	2200      	movs	r2, #0
 800197e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001990:	3b01      	subs	r3, #1
 8001992:	6939      	ldr	r1, [r7, #16]
 8001994:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001996:	fb01 f303 	mul.w	r3, r1, r3
 800199a:	441a      	add	r2, r3
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	22ff      	movs	r2, #255	@ 0xff
 80019a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	22ff      	movs	r2, #255	@ 0xff
 80019ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d114      	bne.n	80019e0 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d01a      	beq.n	80019f4 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	3310      	adds	r3, #16
 80019c2:	4618      	mov	r0, r3
 80019c4:	f001 f998 	bl	8002cf8 <xTaskRemoveFromEventList>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d012      	beq.n	80019f4 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80019ce:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <xQueueGenericReset+0x120>)
 80019d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	f3bf 8f4f 	dsb	sy
 80019da:	f3bf 8f6f 	isb	sy
 80019de:	e009      	b.n	80019f4 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	3310      	adds	r3, #16
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff02 	bl	80017ee <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	3324      	adds	r3, #36	@ 0x24
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fefd 	bl	80017ee <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80019f4:	f002 fca8 	bl	8004348 <vPortExitCritical>
 80019f8:	e001      	b.n	80019fe <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10b      	bne.n	8001a1c <xQueueGenericReset+0x114>
    __asm volatile
 8001a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a08:	f383 8811 	msr	BASEPRI, r3
 8001a0c:	f3bf 8f6f 	isb	sy
 8001a10:	f3bf 8f4f 	dsb	sy
 8001a14:	60bb      	str	r3, [r7, #8]
}
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8001a1c:	697b      	ldr	r3, [r7, #20]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	e000ed04 	.word	0xe000ed04

08001a2c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	@ 0x28
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	4613      	mov	r3, r2
 8001a38:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d02e      	beq.n	8001aa2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001a44:	2100      	movs	r1, #0
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d000      	beq.n	8001a54 <xQueueGenericCreate+0x28>
 8001a52:	2101      	movs	r1, #1
 8001a54:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d123      	bne.n	8001aa2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001a62:	f113 0f49 	cmn.w	r3, #73	@ 0x49
 8001a66:	d81c      	bhi.n	8001aa2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	fb02 f303 	mul.w	r3, r2, r3
 8001a70:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	3348      	adds	r3, #72	@ 0x48
 8001a76:	4618      	mov	r0, r3
 8001a78:	f002 fd32 	bl	80044e0 <pvPortMalloc>
 8001a7c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d01d      	beq.n	8001ac0 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	3348      	adds	r3, #72	@ 0x48
 8001a8c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001a8e:	79fa      	ldrb	r2, [r7, #7]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	4613      	mov	r3, r2
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 f815 	bl	8001aca <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001aa0:	e00e      	b.n	8001ac0 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10b      	bne.n	8001ac0 <xQueueGenericCreate+0x94>
    __asm volatile
 8001aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aac:	f383 8811 	msr	BASEPRI, r3
 8001ab0:	f3bf 8f6f 	isb	sy
 8001ab4:	f3bf 8f4f 	dsb	sy
 8001ab8:	613b      	str	r3, [r7, #16]
}
 8001aba:	bf00      	nop
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8001ac0:	69fb      	ldr	r3, [r7, #28]
    }
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3720      	adds	r7, #32
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d103      	bne.n	8001ae6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	e002      	b.n	8001aec <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001af8:	2101      	movs	r1, #1
 8001afa:	69b8      	ldr	r0, [r7, #24]
 8001afc:	f7ff ff04 	bl	8001908 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08e      	sub	sp, #56	@ 0x38
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001b16:	2300      	movs	r3, #0
 8001b18:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8001b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10b      	bne.n	8001b3c <xQueueGenericSend+0x34>
    __asm volatile
 8001b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b28:	f383 8811 	msr	BASEPRI, r3
 8001b2c:	f3bf 8f6f 	isb	sy
 8001b30:	f3bf 8f4f 	dsb	sy
 8001b34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d103      	bne.n	8001b4a <xQueueGenericSend+0x42>
 8001b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <xQueueGenericSend+0x46>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <xQueueGenericSend+0x48>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10b      	bne.n	8001b6c <xQueueGenericSend+0x64>
    __asm volatile
 8001b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b58:	f383 8811 	msr	BASEPRI, r3
 8001b5c:	f3bf 8f6f 	isb	sy
 8001b60:	f3bf 8f4f 	dsb	sy
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001b66:	bf00      	nop
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d103      	bne.n	8001b7a <xQueueGenericSend+0x72>
 8001b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <xQueueGenericSend+0x76>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <xQueueGenericSend+0x78>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10b      	bne.n	8001b9c <xQueueGenericSend+0x94>
    __asm volatile
 8001b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b88:	f383 8811 	msr	BASEPRI, r3
 8001b8c:	f3bf 8f6f 	isb	sy
 8001b90:	f3bf 8f4f 	dsb	sy
 8001b94:	623b      	str	r3, [r7, #32]
}
 8001b96:	bf00      	nop
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b9c:	f001 fabe 	bl	800311c <xTaskGetSchedulerState>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d102      	bne.n	8001bac <xQueueGenericSend+0xa4>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <xQueueGenericSend+0xa8>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <xQueueGenericSend+0xaa>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10b      	bne.n	8001bce <xQueueGenericSend+0xc6>
    __asm volatile
 8001bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bba:	f383 8811 	msr	BASEPRI, r3
 8001bbe:	f3bf 8f6f 	isb	sy
 8001bc2:	f3bf 8f4f 	dsb	sy
 8001bc6:	61fb      	str	r3, [r7, #28]
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	e7fd      	b.n	8001bca <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001bce:	f002 fb8b 	bl	80042e8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d302      	bcc.n	8001be4 <xQueueGenericSend+0xdc>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d129      	bne.n	8001c38 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	68b9      	ldr	r1, [r7, #8]
 8001be8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001bea:	f000 fa27 	bl	800203c <prvCopyDataToQueue>
 8001bee:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d010      	beq.n	8001c1a <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bfa:	3324      	adds	r3, #36	@ 0x24
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f001 f87b 	bl	8002cf8 <xTaskRemoveFromEventList>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d013      	beq.n	8001c30 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001c08:	4b3f      	ldr	r3, [pc, #252]	@ (8001d08 <xQueueGenericSend+0x200>)
 8001c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	f3bf 8f4f 	dsb	sy
 8001c14:	f3bf 8f6f 	isb	sy
 8001c18:	e00a      	b.n	8001c30 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8001c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001c20:	4b39      	ldr	r3, [pc, #228]	@ (8001d08 <xQueueGenericSend+0x200>)
 8001c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	f3bf 8f4f 	dsb	sy
 8001c2c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001c30:	f002 fb8a 	bl	8004348 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e063      	b.n	8001d00 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d103      	bne.n	8001c46 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001c3e:	f002 fb83 	bl	8004348 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e05c      	b.n	8001d00 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d106      	bne.n	8001c5a <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4618      	mov	r0, r3
 8001c52:	f001 f929 	bl	8002ea8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001c56:	2301      	movs	r3, #1
 8001c58:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001c5a:	f002 fb75 	bl	8004348 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001c5e:	f000 fd3b 	bl	80026d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001c62:	f002 fb41 	bl	80042e8 <vPortEnterCritical>
 8001c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001c6c:	b25b      	sxtb	r3, r3
 8001c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c72:	d103      	bne.n	8001c7c <xQueueGenericSend+0x174>
 8001c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001c82:	b25b      	sxtb	r3, r3
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d103      	bne.n	8001c92 <xQueueGenericSend+0x18a>
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001c92:	f002 fb59 	bl	8004348 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c96:	1d3a      	adds	r2, r7, #4
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f001 f918 	bl	8002ed4 <xTaskCheckForTimeOut>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d124      	bne.n	8001cf4 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001caa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001cac:	f000 fabe 	bl	800222c <prvIsQueueFull>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d018      	beq.n	8001ce8 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb8:	3310      	adds	r3, #16
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 ffae 	bl	8002c20 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001cc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001cc6:	f000 fa49 	bl	800215c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001cca:	f000 fd13 	bl	80026f4 <xTaskResumeAll>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f47f af7c 	bne.w	8001bce <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <xQueueGenericSend+0x200>)
 8001cd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	f3bf 8f4f 	dsb	sy
 8001ce2:	f3bf 8f6f 	isb	sy
 8001ce6:	e772      	b.n	8001bce <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001ce8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001cea:	f000 fa37 	bl	800215c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001cee:	f000 fd01 	bl	80026f4 <xTaskResumeAll>
 8001cf2:	e76c      	b.n	8001bce <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001cf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001cf6:	f000 fa31 	bl	800215c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001cfa:	f000 fcfb 	bl	80026f4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8001cfe:	2300      	movs	r3, #0
        }
    }
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3738      	adds	r7, #56	@ 0x38
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	e000ed04 	.word	0xe000ed04

08001d0c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b092      	sub	sp, #72	@ 0x48
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	643b      	str	r3, [r7, #64]	@ 0x40

    traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition );

    configASSERT( pxQueue );
 8001d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10b      	bne.n	8001d3c <xQueueGenericSendFromISR+0x30>
    __asm volatile
 8001d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d28:	f383 8811 	msr	BASEPRI, r3
 8001d2c:	f3bf 8f6f 	isb	sy
 8001d30:	f3bf 8f4f 	dsb	sy
 8001d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 8001d36:	bf00      	nop
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d103      	bne.n	8001d4a <xQueueGenericSendFromISR+0x3e>
 8001d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <xQueueGenericSendFromISR+0x42>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <xQueueGenericSendFromISR+0x44>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10b      	bne.n	8001d6c <xQueueGenericSendFromISR+0x60>
    __asm volatile
 8001d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d58:	f383 8811 	msr	BASEPRI, r3
 8001d5c:	f3bf 8f6f 	isb	sy
 8001d60:	f3bf 8f4f 	dsb	sy
 8001d64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001d66:	bf00      	nop
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d103      	bne.n	8001d7a <xQueueGenericSendFromISR+0x6e>
 8001d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <xQueueGenericSendFromISR+0x72>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <xQueueGenericSendFromISR+0x74>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10b      	bne.n	8001d9c <xQueueGenericSendFromISR+0x90>
    __asm volatile
 8001d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d88:	f383 8811 	msr	BASEPRI, r3
 8001d8c:	f3bf 8f6f 	isb	sy
 8001d90:	f3bf 8f4f 	dsb	sy
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001d96:	bf00      	nop
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001d9c:	f002 fb60 	bl	8004460 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8001da0:	f3ef 8211 	mrs	r2, BASEPRI
 8001da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001da8:	f383 8811 	msr	BASEPRI, r3
 8001dac:	f3bf 8f6f 	isb	sy
 8001db0:	f3bf 8f4f 	dsb	sy
 8001db4:	623a      	str	r2, [r7, #32]
 8001db6:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8001db8:	6a3b      	ldr	r3, [r7, #32]
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8001dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001dbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d302      	bcc.n	8001dce <xQueueGenericSendFromISR+0xc2>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d147      	bne.n	8001e5e <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001dd4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ddc:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001de4:	f000 f92a 	bl	800203c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001de8:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d112      	bne.n	8001e18 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d02e      	beq.n	8001e58 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dfc:	3324      	adds	r3, #36	@ 0x24
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 ff7a 	bl	8002cf8 <xTaskRemoveFromEventList>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d026      	beq.n	8001e58 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d023      	beq.n	8001e58 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e01f      	b.n	8001e58 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8001e18:	f000 fd82 	bl	8002920 <uxTaskGetNumberOfTasks>
 8001e1c:	6338      	str	r0, [r7, #48]	@ 0x30
 8001e1e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001e22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d917      	bls.n	8001e58 <xQueueGenericSendFromISR+0x14c>
 8001e28:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001e2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e2e:	d10b      	bne.n	8001e48 <xQueueGenericSendFromISR+0x13c>
    __asm volatile
 8001e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e34:	f383 8811 	msr	BASEPRI, r3
 8001e38:	f3bf 8f6f 	isb	sy
 8001e3c:	f3bf 8f4f 	dsb	sy
 8001e40:	61bb      	str	r3, [r7, #24]
}
 8001e42:	bf00      	nop
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <xQueueGenericSendFromISR+0x138>
 8001e48:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	b25a      	sxtb	r2, r3
 8001e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8001e5c:	e001      	b.n	8001e62 <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e64:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8001e6c:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
 8001e6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3748      	adds	r7, #72	@ 0x48
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08c      	sub	sp, #48	@ 0x30
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10b      	bne.n	8001eaa <xQueueReceive+0x32>
    __asm volatile
 8001e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e96:	f383 8811 	msr	BASEPRI, r3
 8001e9a:	f3bf 8f6f 	isb	sy
 8001e9e:	f3bf 8f4f 	dsb	sy
 8001ea2:	623b      	str	r3, [r7, #32]
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	e7fd      	b.n	8001ea6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d103      	bne.n	8001eb8 <xQueueReceive+0x40>
 8001eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <xQueueReceive+0x44>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <xQueueReceive+0x46>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10b      	bne.n	8001eda <xQueueReceive+0x62>
    __asm volatile
 8001ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ec6:	f383 8811 	msr	BASEPRI, r3
 8001eca:	f3bf 8f6f 	isb	sy
 8001ece:	f3bf 8f4f 	dsb	sy
 8001ed2:	61fb      	str	r3, [r7, #28]
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	e7fd      	b.n	8001ed6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001eda:	f001 f91f 	bl	800311c <xTaskGetSchedulerState>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d102      	bne.n	8001eea <xQueueReceive+0x72>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <xQueueReceive+0x76>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <xQueueReceive+0x78>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10b      	bne.n	8001f0c <xQueueReceive+0x94>
    __asm volatile
 8001ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ef8:	f383 8811 	msr	BASEPRI, r3
 8001efc:	f3bf 8f6f 	isb	sy
 8001f00:	f3bf 8f4f 	dsb	sy
 8001f04:	61bb      	str	r3, [r7, #24]
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001f0c:	f002 f9ec 	bl	80042e8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01f      	beq.n	8001f5c <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001f20:	f000 f8f6 	bl	8002110 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	1e5a      	subs	r2, r3, #1
 8001f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f2a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00f      	beq.n	8001f54 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f36:	3310      	adds	r3, #16
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 fedd 	bl	8002cf8 <xTaskRemoveFromEventList>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001f44:	4b3c      	ldr	r3, [pc, #240]	@ (8002038 <xQueueReceive+0x1c0>)
 8001f46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	f3bf 8f4f 	dsb	sy
 8001f50:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001f54:	f002 f9f8 	bl	8004348 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e069      	b.n	8002030 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d103      	bne.n	8001f6a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001f62:	f002 f9f1 	bl	8004348 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e062      	b.n	8002030 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d106      	bne.n	8001f7e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 ff97 	bl	8002ea8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001f7e:	f002 f9e3 	bl	8004348 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001f82:	f000 fba9 	bl	80026d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001f86:	f002 f9af 	bl	80042e8 <vPortEnterCritical>
 8001f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001f90:	b25b      	sxtb	r3, r3
 8001f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f96:	d103      	bne.n	8001fa0 <xQueueReceive+0x128>
 8001f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001fa6:	b25b      	sxtb	r3, r3
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fac:	d103      	bne.n	8001fb6 <xQueueReceive+0x13e>
 8001fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001fb6:	f002 f9c7 	bl	8004348 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fba:	1d3a      	adds	r2, r7, #4
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 ff86 	bl	8002ed4 <xTaskCheckForTimeOut>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d123      	bne.n	8002016 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001fce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001fd0:	f000 f916 	bl	8002200 <prvIsQueueEmpty>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d017      	beq.n	800200a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fdc:	3324      	adds	r3, #36	@ 0x24
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fe1c 	bl	8002c20 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001fe8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001fea:	f000 f8b7 	bl	800215c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001fee:	f000 fb81 	bl	80026f4 <xTaskResumeAll>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d189      	bne.n	8001f0c <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <xQueueReceive+0x1c0>)
 8001ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	f3bf 8f4f 	dsb	sy
 8002004:	f3bf 8f6f 	isb	sy
 8002008:	e780      	b.n	8001f0c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800200a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800200c:	f000 f8a6 	bl	800215c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002010:	f000 fb70 	bl	80026f4 <xTaskResumeAll>
 8002014:	e77a      	b.n	8001f0c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002016:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002018:	f000 f8a0 	bl	800215c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800201c:	f000 fb6a 	bl	80026f4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002020:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002022:	f000 f8ed 	bl	8002200 <prvIsQueueEmpty>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	f43f af6f 	beq.w	8001f0c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800202e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002030:	4618      	mov	r0, r3
 8002032:	3730      	adds	r7, #48	@ 0x30
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	e000ed04 	.word	0xe000ed04

0800203c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002050:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10d      	bne.n	8002076 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d14d      	bne.n	80020fe <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4618      	mov	r0, r3
 8002068:	f001 f876 	bl	8003158 <xTaskPriorityDisinherit>
 800206c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	e043      	b.n	80020fe <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d119      	bne.n	80020b0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6858      	ldr	r0, [r3, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002084:	461a      	mov	r2, r3
 8002086:	68b9      	ldr	r1, [r7, #8]
 8002088:	f002 fcd6 	bl	8004a38 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	441a      	add	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d32b      	bcc.n	80020fe <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	e026      	b.n	80020fe <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	68d8      	ldr	r0, [r3, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	461a      	mov	r2, r3
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	f002 fcbc 	bl	8004a38 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	425b      	negs	r3, r3
 80020ca:	441a      	add	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d207      	bcs.n	80020ec <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	425b      	negs	r3, r3
 80020e6:	441a      	add	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d105      	bne.n	80020fe <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002106:	697b      	ldr	r3, [r7, #20]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d018      	beq.n	8002154 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	441a      	add	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	429a      	cmp	r2, r3
 800213a:	d303      	bcc.n	8002144 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68d9      	ldr	r1, [r3, #12]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	461a      	mov	r2, r3
 800214e:	6838      	ldr	r0, [r7, #0]
 8002150:	f002 fc72 	bl	8004a38 <memcpy>
    }
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002164:	f002 f8c0 	bl	80042e8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800216e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002170:	e011      	b.n	8002196 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	2b00      	cmp	r3, #0
 8002178:	d012      	beq.n	80021a0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3324      	adds	r3, #36	@ 0x24
 800217e:	4618      	mov	r0, r3
 8002180:	f000 fdba 	bl	8002cf8 <xTaskRemoveFromEventList>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800218a:	f000 ff0b 	bl	8002fa4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	3b01      	subs	r3, #1
 8002192:	b2db      	uxtb	r3, r3
 8002194:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219a:	2b00      	cmp	r3, #0
 800219c:	dce9      	bgt.n	8002172 <prvUnlockQueue+0x16>
 800219e:	e000      	b.n	80021a2 <prvUnlockQueue+0x46>
                    break;
 80021a0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	22ff      	movs	r2, #255	@ 0xff
 80021a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80021aa:	f002 f8cd 	bl	8004348 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80021ae:	f002 f89b 	bl	80042e8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80021b8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80021ba:	e011      	b.n	80021e0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d012      	beq.n	80021ea <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3310      	adds	r3, #16
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fd95 	bl	8002cf8 <xTaskRemoveFromEventList>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80021d4:	f000 fee6 	bl	8002fa4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80021d8:	7bbb      	ldrb	r3, [r7, #14]
 80021da:	3b01      	subs	r3, #1
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80021e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	dce9      	bgt.n	80021bc <prvUnlockQueue+0x60>
 80021e8:	e000      	b.n	80021ec <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80021ea:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	22ff      	movs	r2, #255	@ 0xff
 80021f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80021f4:	f002 f8a8 	bl	8004348 <vPortExitCritical>
}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002208:	f002 f86e 	bl	80042e8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002214:	2301      	movs	r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	e001      	b.n	800221e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800221e:	f002 f893 	bl	8004348 <vPortExitCritical>

    return xReturn;
 8002222:	68fb      	ldr	r3, [r7, #12]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002234:	f002 f858 	bl	80042e8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002240:	429a      	cmp	r2, r3
 8002242:	d102      	bne.n	800224a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002244:	2301      	movs	r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	e001      	b.n	800224e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800224e:	f002 f87b 	bl	8004348 <vPortExitCritical>

    return xReturn;
 8002252:	68fb      	ldr	r3, [r7, #12]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800226c:	f002 f83c 	bl	80042e8 <vPortEnterCritical>
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002276:	b25b      	sxtb	r3, r3
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d103      	bne.n	8002286 <vQueueWaitForMessageRestricted+0x2a>
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800228c:	b25b      	sxtb	r3, r3
 800228e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002292:	d103      	bne.n	800229c <vQueueWaitForMessageRestricted+0x40>
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800229c:	f002 f854 	bl	8004348 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d106      	bne.n	80022b6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	3324      	adds	r3, #36	@ 0x24
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	68b9      	ldr	r1, [r7, #8]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fcdb 	bl	8002c6c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80022b6:	6978      	ldr	r0, [r7, #20]
 80022b8:	f7ff ff50 	bl	800215c <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 80022bc:	bf00      	nop
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	@ 0x28
 80022c8:	af04      	add	r7, sp, #16
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f002 f902 	bl	80044e0 <pvPortMalloc>
 80022dc:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80022e4:	2054      	movs	r0, #84	@ 0x54
 80022e6:	f002 f8fb 	bl	80044e0 <pvPortMalloc>
 80022ea:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d008      	beq.n	8002304 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80022f2:	2254      	movs	r2, #84	@ 0x54
 80022f4:	2100      	movs	r1, #0
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f002 fb72 	bl	80049e0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	631a      	str	r2, [r3, #48]	@ 0x30
 8002302:	e005      	b.n	8002310 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002304:	6938      	ldr	r0, [r7, #16]
 8002306:	f002 fa1d 	bl	8004744 <vPortFree>
 800230a:	e001      	b.n	8002310 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00d      	beq.n	8002332 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002316:	2300      	movs	r3, #0
 8002318:	9303      	str	r3, [sp, #12]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	9302      	str	r3, [sp, #8]
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	9301      	str	r3, [sp, #4]
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	68b9      	ldr	r1, [r7, #8]
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 f828 	bl	8002382 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002332:	697b      	ldr	r3, [r7, #20]
    }
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af02      	add	r7, sp, #8
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f7ff ffb3 	bl	80022c4 <prvCreateTask>
 800235e:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002366:	6938      	ldr	r0, [r7, #16]
 8002368:	f000 f894 	bl	8002494 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800236c:	2301      	movs	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	e002      	b.n	8002378 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8002378:	697b      	ldr	r3, [r7, #20]
    }
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b088      	sub	sp, #32
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002392:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800239a:	3b01      	subs	r3, #1
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	f023 0307 	bic.w	r3, r3, #7
 80023a8:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00b      	beq.n	80023cc <prvInitialiseNewTask+0x4a>
    __asm volatile
 80023b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023b8:	f383 8811 	msr	BASEPRI, r3
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	617b      	str	r3, [r7, #20]
}
 80023c6:	bf00      	nop
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01e      	beq.n	8002410 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	e012      	b.n	80023fe <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	4413      	add	r3, r2
 80023de:	7819      	ldrb	r1, [r3, #0]
 80023e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	4413      	add	r3, r2
 80023e6:	3334      	adds	r3, #52	@ 0x34
 80023e8:	460a      	mov	r2, r1
 80023ea:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	4413      	add	r3, r2
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d006      	beq.n	8002406 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	3301      	adds	r3, #1
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	2b0f      	cmp	r3, #15
 8002402:	d9e9      	bls.n	80023d8 <prvInitialiseNewTask+0x56>
 8002404:	e000      	b.n	8002408 <prvInitialiseNewTask+0x86>
            {
                break;
 8002406:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002412:	2b04      	cmp	r3, #4
 8002414:	d90b      	bls.n	800242e <prvInitialiseNewTask+0xac>
    __asm volatile
 8002416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800241a:	f383 8811 	msr	BASEPRI, r3
 800241e:	f3bf 8f6f 	isb	sy
 8002422:	f3bf 8f4f 	dsb	sy
 8002426:	613b      	str	r3, [r7, #16]
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	e7fd      	b.n	800242a <prvInitialiseNewTask+0xa8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800242e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002430:	2b04      	cmp	r3, #4
 8002432:	d901      	bls.n	8002438 <prvInitialiseNewTask+0xb6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002434:	2304      	movs	r3, #4
 8002436:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800243c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800243e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002440:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002442:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002446:	3304      	adds	r3, #4
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff f9ef 	bl	800182c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800244e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002450:	3318      	adds	r3, #24
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff f9ea 	bl	800182c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800245c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800245e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002460:	f1c3 0205 	rsb	r2, r3, #5
 8002464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002466:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800246c:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	68f9      	ldr	r1, [r7, #12]
 8002472:	69b8      	ldr	r0, [r7, #24]
 8002474:	f001 fdfc 	bl	8004070 <pxPortInitialiseStack>
 8002478:	4602      	mov	r2, r0
 800247a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247c:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800247e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <prvInitialiseNewTask+0x108>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002488:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800248a:	bf00      	nop
 800248c:	3720      	adds	r7, #32
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800249c:	f001 ff24 	bl	80042e8 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80024a0:	4b3f      	ldr	r3, [pc, #252]	@ (80025a0 <prvAddNewTaskToReadyList+0x10c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3301      	adds	r3, #1
 80024a6:	4a3e      	ldr	r2, [pc, #248]	@ (80025a0 <prvAddNewTaskToReadyList+0x10c>)
 80024a8:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80024aa:	4b3e      	ldr	r3, [pc, #248]	@ (80025a4 <prvAddNewTaskToReadyList+0x110>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80024b2:	4a3c      	ldr	r2, [pc, #240]	@ (80025a4 <prvAddNewTaskToReadyList+0x110>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024b8:	4b39      	ldr	r3, [pc, #228]	@ (80025a0 <prvAddNewTaskToReadyList+0x10c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d110      	bne.n	80024e2 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80024c0:	f000 fd94 	bl	8002fec <prvInitialiseTaskLists>
 80024c4:	e00d      	b.n	80024e2 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80024c6:	4b38      	ldr	r3, [pc, #224]	@ (80025a8 <prvAddNewTaskToReadyList+0x114>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024ce:	4b35      	ldr	r3, [pc, #212]	@ (80025a4 <prvAddNewTaskToReadyList+0x110>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d8:	429a      	cmp	r2, r3
 80024da:	d802      	bhi.n	80024e2 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80024dc:	4a31      	ldr	r2, [pc, #196]	@ (80025a4 <prvAddNewTaskToReadyList+0x110>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80024e2:	4b32      	ldr	r3, [pc, #200]	@ (80025ac <prvAddNewTaskToReadyList+0x118>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3301      	adds	r3, #1
 80024e8:	4a30      	ldr	r2, [pc, #192]	@ (80025ac <prvAddNewTaskToReadyList+0x118>)
 80024ea:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f0:	2201      	movs	r2, #1
 80024f2:	409a      	lsls	r2, r3
 80024f4:	4b2e      	ldr	r3, [pc, #184]	@ (80025b0 <prvAddNewTaskToReadyList+0x11c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	4a2d      	ldr	r2, [pc, #180]	@ (80025b0 <prvAddNewTaskToReadyList+0x11c>)
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002502:	492c      	ldr	r1, [pc, #176]	@ (80025b4 <prvAddNewTaskToReadyList+0x120>)
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	3304      	adds	r3, #4
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	3204      	adds	r2, #4
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	1d1a      	adds	r2, r3, #4
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4a1c      	ldr	r2, [pc, #112]	@ (80025b4 <prvAddNewTaskToReadyList+0x120>)
 8002542:	441a      	add	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	615a      	str	r2, [r3, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800254c:	4919      	ldr	r1, [pc, #100]	@ (80025b4 <prvAddNewTaskToReadyList+0x120>)
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800255e:	1c59      	adds	r1, r3, #1
 8002560:	4814      	ldr	r0, [pc, #80]	@ (80025b4 <prvAddNewTaskToReadyList+0x120>)
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4403      	add	r3, r0
 800256c:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800256e:	f001 feeb 	bl	8004348 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002572:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <prvAddNewTaskToReadyList+0x114>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00e      	beq.n	8002598 <prvAddNewTaskToReadyList+0x104>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800257a:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <prvAddNewTaskToReadyList+0x110>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002584:	429a      	cmp	r2, r3
 8002586:	d207      	bcs.n	8002598 <prvAddNewTaskToReadyList+0x104>
 8002588:	4b0b      	ldr	r3, [pc, #44]	@ (80025b8 <prvAddNewTaskToReadyList+0x124>)
 800258a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	2000014c 	.word	0x2000014c
 80025a4:	20000074 	.word	0x20000074
 80025a8:	20000158 	.word	0x20000158
 80025ac:	20000168 	.word	0x20000168
 80025b0:	20000154 	.word	0x20000154
 80025b4:	20000078 	.word	0x20000078
 80025b8:	e000ed04 	.word	0xe000ed04

080025bc <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	@ 0x28
 80025c0:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80025c2:	2301      	movs	r3, #1
 80025c4:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	e011      	b.n	80025f4 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80025d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002644 <prvCreateIdleTasks+0x88>)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	4413      	add	r3, r2
 80025d6:	7819      	ldrb	r1, [r3, #0]
 80025d8:	463a      	mov	r2, r7
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	4413      	add	r3, r2
 80025de:	460a      	mov	r2, r1
 80025e0:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80025e2:	463a      	mov	r2, r7
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	4413      	add	r3, r2
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d006      	beq.n	80025fc <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3301      	adds	r3, #1
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2b0f      	cmp	r3, #15
 80025f8:	ddea      	ble.n	80025d0 <prvCreateIdleTasks+0x14>
 80025fa:	e000      	b.n	80025fe <prvCreateIdleTasks+0x42>
        {
            break;
 80025fc:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80025fe:	2300      	movs	r3, #0
 8002600:	61bb      	str	r3, [r7, #24]
 8002602:	e015      	b.n	8002630 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002604:	4b10      	ldr	r3, [pc, #64]	@ (8002648 <prvCreateIdleTasks+0x8c>)
 8002606:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4a0f      	ldr	r2, [pc, #60]	@ (800264c <prvCreateIdleTasks+0x90>)
 800260e:	4413      	add	r3, r2
 8002610:	4639      	mov	r1, r7
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	2300      	movs	r3, #0
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	2300      	movs	r3, #0
 800261a:	22c8      	movs	r2, #200	@ 0xc8
 800261c:	6938      	ldr	r0, [r7, #16]
 800261e:	f7ff fe8d 	bl	800233c <xTaskCreate>
 8002622:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	3301      	adds	r3, #1
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	dde6      	ble.n	8002604 <prvCreateIdleTasks+0x48>
 8002636:	e000      	b.n	800263a <prvCreateIdleTasks+0x7e>
        {
            break;
 8002638:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800263a:	69fb      	ldr	r3, [r7, #28]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3720      	adds	r7, #32
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	08004b60 	.word	0x08004b60
 8002648:	08002fbd 	.word	0x08002fbd
 800264c:	20000170 	.word	0x20000170

08002650 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002656:	f7ff ffb1 	bl	80025bc <prvCreateIdleTasks>
 800265a:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d102      	bne.n	8002668 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8002662:	f001 f9d3 	bl	8003a0c <xTimerCreateTimerTask>
 8002666:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d116      	bne.n	800269c <vTaskStartScheduler+0x4c>
    __asm volatile
 800266e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	60bb      	str	r3, [r7, #8]
}
 8002680:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002682:	4b11      	ldr	r3, [pc, #68]	@ (80026c8 <vTaskStartScheduler+0x78>)
 8002684:	f04f 32ff 	mov.w	r2, #4294967295
 8002688:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800268a:	4b10      	ldr	r3, [pc, #64]	@ (80026cc <vTaskStartScheduler+0x7c>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002690:	4b0f      	ldr	r3, [pc, #60]	@ (80026d0 <vTaskStartScheduler+0x80>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002696:	f001 fd69 	bl	800416c <xPortStartScheduler>
 800269a:	e00f      	b.n	80026bc <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a2:	d10b      	bne.n	80026bc <vTaskStartScheduler+0x6c>
    __asm volatile
 80026a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	607b      	str	r3, [r7, #4]
}
 80026b6:	bf00      	nop
 80026b8:	bf00      	nop
 80026ba:	e7fd      	b.n	80026b8 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80026bc:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <vTaskStartScheduler+0x84>)
 80026be:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	2000016c 	.word	0x2000016c
 80026cc:	20000158 	.word	0x20000158
 80026d0:	20000150 	.word	0x20000150
 80026d4:	2000002c 	.word	0x2000002c

080026d8 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80026dc:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <vTaskSuspendAll+0x18>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	3301      	adds	r3, #1
 80026e2:	4a03      	ldr	r2, [pc, #12]	@ (80026f0 <vTaskSuspendAll+0x18>)
 80026e4:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000174 	.word	0x20000174

080026f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002702:	f001 fdf1 	bl	80042e8 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800270a:	4b75      	ldr	r3, [pc, #468]	@ (80028e0 <xTaskResumeAll+0x1ec>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10b      	bne.n	800272a <xTaskResumeAll+0x36>
    __asm volatile
 8002712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002716:	f383 8811 	msr	BASEPRI, r3
 800271a:	f3bf 8f6f 	isb	sy
 800271e:	f3bf 8f4f 	dsb	sy
 8002722:	603b      	str	r3, [r7, #0]
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	e7fd      	b.n	8002726 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800272a:	4b6d      	ldr	r3, [pc, #436]	@ (80028e0 <xTaskResumeAll+0x1ec>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	3b01      	subs	r3, #1
 8002730:	4a6b      	ldr	r2, [pc, #428]	@ (80028e0 <xTaskResumeAll+0x1ec>)
 8002732:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002734:	4b6a      	ldr	r3, [pc, #424]	@ (80028e0 <xTaskResumeAll+0x1ec>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	f040 80ca 	bne.w	80028d2 <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800273e:	4b69      	ldr	r3, [pc, #420]	@ (80028e4 <xTaskResumeAll+0x1f0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 80c5 	beq.w	80028d2 <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002748:	e08e      	b.n	8002868 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800274a:	4b67      	ldr	r3, [pc, #412]	@ (80028e8 <xTaskResumeAll+0x1f4>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	6a12      	ldr	r2, [r2, #32]
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	69d2      	ldr	r2, [r2, #28]
 800276a:	605a      	str	r2, [r3, #4]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	3318      	adds	r3, #24
 8002774:	429a      	cmp	r2, r3
 8002776:	d103      	bne.n	8002780 <xTaskResumeAll+0x8c>
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	6a1a      	ldr	r2, [r3, #32]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	2200      	movs	r2, #0
 8002784:	629a      	str	r2, [r3, #40]	@ 0x28
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	1e5a      	subs	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	68d2      	ldr	r2, [r2, #12]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	6892      	ldr	r2, [r2, #8]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3304      	adds	r3, #4
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d103      	bne.n	80027be <xTaskResumeAll+0xca>
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	2200      	movs	r2, #0
 80027c2:	615a      	str	r2, [r3, #20]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	1e5a      	subs	r2, r3, #1
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d2:	2201      	movs	r2, #1
 80027d4:	409a      	lsls	r2, r3
 80027d6:	4b45      	ldr	r3, [pc, #276]	@ (80028ec <xTaskResumeAll+0x1f8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	4a43      	ldr	r2, [pc, #268]	@ (80028ec <xTaskResumeAll+0x1f8>)
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027e4:	4942      	ldr	r1, [pc, #264]	@ (80028f0 <xTaskResumeAll+0x1fc>)
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	3304      	adds	r3, #4
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	3204      	adds	r2, #4
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	1d1a      	adds	r2, r3, #4
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	609a      	str	r2, [r3, #8]
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4a33      	ldr	r2, [pc, #204]	@ (80028f0 <xTaskResumeAll+0x1fc>)
 8002824:	441a      	add	r2, r3
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	615a      	str	r2, [r3, #20]
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800282e:	4930      	ldr	r1, [pc, #192]	@ (80028f0 <xTaskResumeAll+0x1fc>)
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002840:	1c59      	adds	r1, r3, #1
 8002842:	482b      	ldr	r0, [pc, #172]	@ (80028f0 <xTaskResumeAll+0x1fc>)
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4403      	add	r3, r0
 800284e:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002854:	4b27      	ldr	r3, [pc, #156]	@ (80028f4 <xTaskResumeAll+0x200>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285a:	429a      	cmp	r2, r3
 800285c:	d904      	bls.n	8002868 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800285e:	4a26      	ldr	r2, [pc, #152]	@ (80028f8 <xTaskResumeAll+0x204>)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	2101      	movs	r1, #1
 8002864:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002868:	4b1f      	ldr	r3, [pc, #124]	@ (80028e8 <xTaskResumeAll+0x1f4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	f47f af6c 	bne.w	800274a <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002878:	f000 fc36 	bl	80030e8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800287c:	4b1f      	ldr	r3, [pc, #124]	@ (80028fc <xTaskResumeAll+0x208>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d012      	beq.n	80028ae <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002888:	f000 f854 	bl	8002934 <xTaskIncrementTick>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d004      	beq.n	800289c <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002892:	4a19      	ldr	r2, [pc, #100]	@ (80028f8 <xTaskResumeAll+0x204>)
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	2101      	movs	r1, #1
 8002898:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	3b01      	subs	r3, #1
 80028a0:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ef      	bne.n	8002888 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 80028a8:	4b14      	ldr	r3, [pc, #80]	@ (80028fc <xTaskResumeAll+0x208>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80028ae:	4a12      	ldr	r2, [pc, #72]	@ (80028f8 <xTaskResumeAll+0x204>)
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00b      	beq.n	80028d2 <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80028be:	4b0d      	ldr	r3, [pc, #52]	@ (80028f4 <xTaskResumeAll+0x200>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002900 <xTaskResumeAll+0x20c>)
 80028c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80028d2:	f001 fd39 	bl	8004348 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80028d6:	69bb      	ldr	r3, [r7, #24]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3720      	adds	r7, #32
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000174 	.word	0x20000174
 80028e4:	2000014c 	.word	0x2000014c
 80028e8:	2000010c 	.word	0x2000010c
 80028ec:	20000154 	.word	0x20000154
 80028f0:	20000078 	.word	0x20000078
 80028f4:	20000074 	.word	0x20000074
 80028f8:	20000160 	.word	0x20000160
 80028fc:	2000015c 	.word	0x2000015c
 8002900:	e000ed04 	.word	0xe000ed04

08002904 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800290a:	4b04      	ldr	r3, [pc, #16]	@ (800291c <xTaskGetTickCount+0x18>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8002910:	687b      	ldr	r3, [r7, #4]
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	20000150 	.word	0x20000150

08002920 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 8002924:	4b02      	ldr	r3, [pc, #8]	@ (8002930 <uxTaskGetNumberOfTasks+0x10>)
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	2000014c 	.word	0x2000014c

08002934 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	@ 0x28
 8002938:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800293e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b3c <xTaskIncrementTick+0x208>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f040 80ef 	bne.w	8002b26 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002948:	4b7d      	ldr	r3, [pc, #500]	@ (8002b40 <xTaskIncrementTick+0x20c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	3301      	adds	r3, #1
 800294e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002950:	4a7b      	ldr	r2, [pc, #492]	@ (8002b40 <xTaskIncrementTick+0x20c>)
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d121      	bne.n	80029a0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800295c:	4b79      	ldr	r3, [pc, #484]	@ (8002b44 <xTaskIncrementTick+0x210>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00b      	beq.n	800297e <xTaskIncrementTick+0x4a>
    __asm volatile
 8002966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800296a:	f383 8811 	msr	BASEPRI, r3
 800296e:	f3bf 8f6f 	isb	sy
 8002972:	f3bf 8f4f 	dsb	sy
 8002976:	607b      	str	r3, [r7, #4]
}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	e7fd      	b.n	800297a <xTaskIncrementTick+0x46>
 800297e:	4b71      	ldr	r3, [pc, #452]	@ (8002b44 <xTaskIncrementTick+0x210>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	4b70      	ldr	r3, [pc, #448]	@ (8002b48 <xTaskIncrementTick+0x214>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a6e      	ldr	r2, [pc, #440]	@ (8002b44 <xTaskIncrementTick+0x210>)
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4a6e      	ldr	r2, [pc, #440]	@ (8002b48 <xTaskIncrementTick+0x214>)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b6e      	ldr	r3, [pc, #440]	@ (8002b4c <xTaskIncrementTick+0x218>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	4a6c      	ldr	r2, [pc, #432]	@ (8002b4c <xTaskIncrementTick+0x218>)
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	f000 fba4 	bl	80030e8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80029a0:	4b6b      	ldr	r3, [pc, #428]	@ (8002b50 <xTaskIncrementTick+0x21c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6a3a      	ldr	r2, [r7, #32]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	f0c0 80a8 	bcc.w	8002afc <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029ac:	4b65      	ldr	r3, [pc, #404]	@ (8002b44 <xTaskIncrementTick+0x210>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d104      	bne.n	80029c0 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80029b6:	4b66      	ldr	r3, [pc, #408]	@ (8002b50 <xTaskIncrementTick+0x21c>)
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	601a      	str	r2, [r3, #0]
                    break;
 80029be:	e09d      	b.n	8002afc <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029c0:	4b60      	ldr	r3, [pc, #384]	@ (8002b44 <xTaskIncrementTick+0x210>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d203      	bcs.n	80029e0 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80029d8:	4a5d      	ldr	r2, [pc, #372]	@ (8002b50 <xTaskIncrementTick+0x21c>)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	6013      	str	r3, [r2, #0]
                        break;
 80029de:	e08d      	b.n	8002afc <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	68d2      	ldr	r2, [r2, #12]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	6892      	ldr	r2, [r2, #8]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	3304      	adds	r3, #4
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d103      	bne.n	8002a0e <xTaskIncrementTick+0xda>
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2200      	movs	r2, #0
 8002a12:	615a      	str	r2, [r3, #20]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	1e5a      	subs	r2, r3, #1
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d01e      	beq.n	8002a64 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	6a12      	ldr	r2, [r2, #32]
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	69d2      	ldr	r2, [r2, #28]
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	3318      	adds	r3, #24
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d103      	bne.n	8002a54 <xTaskIncrementTick+0x120>
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	6a1a      	ldr	r2, [r3, #32]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2200      	movs	r2, #0
 8002a58:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	1e5a      	subs	r2, r3, #1
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a68:	2201      	movs	r2, #1
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	4b39      	ldr	r3, [pc, #228]	@ (8002b54 <xTaskIncrementTick+0x220>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	4a38      	ldr	r2, [pc, #224]	@ (8002b54 <xTaskIncrementTick+0x220>)
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a7a:	4937      	ldr	r1, [pc, #220]	@ (8002b58 <xTaskIncrementTick+0x224>)
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	3304      	adds	r3, #4
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	3204      	adds	r2, #4
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	1d1a      	adds	r2, r3, #4
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4a27      	ldr	r2, [pc, #156]	@ (8002b58 <xTaskIncrementTick+0x224>)
 8002aba:	441a      	add	r2, r3
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	615a      	str	r2, [r3, #20]
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ac4:	4924      	ldr	r1, [pc, #144]	@ (8002b58 <xTaskIncrementTick+0x224>)
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ad6:	1c59      	adds	r1, r3, #1
 8002ad8:	481f      	ldr	r0, [pc, #124]	@ (8002b58 <xTaskIncrementTick+0x224>)
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4403      	add	r3, r0
 8002ae4:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aea:	4b1c      	ldr	r3, [pc, #112]	@ (8002b5c <xTaskIncrementTick+0x228>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	429a      	cmp	r2, r3
 8002af2:	f67f af5b 	bls.w	80029ac <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8002af6:	2301      	movs	r3, #1
 8002af8:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002afa:	e757      	b.n	80029ac <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8002afc:	4b17      	ldr	r3, [pc, #92]	@ (8002b5c <xTaskIncrementTick+0x228>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b02:	4915      	ldr	r1, [pc, #84]	@ (8002b58 <xTaskIncrementTick+0x224>)
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d901      	bls.n	8002b18 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8002b14:	2301      	movs	r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8002b18:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <xTaskIncrementTick+0x22c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d007      	beq.n	8002b30 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8002b20:	2301      	movs	r3, #1
 8002b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b24:	e004      	b.n	8002b30 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002b26:	4b0f      	ldr	r3, [pc, #60]	@ (8002b64 <xTaskIncrementTick+0x230>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b64 <xTaskIncrementTick+0x230>)
 8002b2e:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3728      	adds	r7, #40	@ 0x28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000174 	.word	0x20000174
 8002b40:	20000150 	.word	0x20000150
 8002b44:	20000104 	.word	0x20000104
 8002b48:	20000108 	.word	0x20000108
 8002b4c:	20000164 	.word	0x20000164
 8002b50:	2000016c 	.word	0x2000016c
 8002b54:	20000154 	.word	0x20000154
 8002b58:	20000078 	.word	0x20000078
 8002b5c:	20000074 	.word	0x20000074
 8002b60:	20000160 	.word	0x20000160
 8002b64:	2000015c 	.word	0x2000015c

08002b68 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002b6e:	4b27      	ldr	r3, [pc, #156]	@ (8002c0c <vTaskSwitchContext+0xa4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002b76:	4b26      	ldr	r3, [pc, #152]	@ (8002c10 <vTaskSwitchContext+0xa8>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002b7c:	e041      	b.n	8002c02 <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 8002b7e:	4b24      	ldr	r3, [pc, #144]	@ (8002c10 <vTaskSwitchContext+0xa8>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002b84:	4b23      	ldr	r3, [pc, #140]	@ (8002c14 <vTaskSwitchContext+0xac>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002b92:	7afb      	ldrb	r3, [r7, #11]
 8002b94:	f1c3 031f 	rsb	r3, r3, #31
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	491f      	ldr	r1, [pc, #124]	@ (8002c18 <vTaskSwitchContext+0xb0>)
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10b      	bne.n	8002bc6 <vTaskSwitchContext+0x5e>
    __asm volatile
 8002bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	607b      	str	r3, [r7, #4]
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	e7fd      	b.n	8002bc2 <vTaskSwitchContext+0x5a>
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4a11      	ldr	r2, [pc, #68]	@ (8002c18 <vTaskSwitchContext+0xb0>)
 8002bd2:	4413      	add	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	3308      	adds	r3, #8
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d103      	bne.n	8002bf4 <vTaskSwitchContext+0x8c>
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	605a      	str	r2, [r3, #4]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	4a08      	ldr	r2, [pc, #32]	@ (8002c1c <vTaskSwitchContext+0xb4>)
 8002bfc:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002bfe:	4b07      	ldr	r3, [pc, #28]	@ (8002c1c <vTaskSwitchContext+0xb4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
    }
 8002c02:	bf00      	nop
 8002c04:	371c      	adds	r7, #28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	20000174 	.word	0x20000174
 8002c10:	20000160 	.word	0x20000160
 8002c14:	20000154 	.word	0x20000154
 8002c18:	20000078 	.word	0x20000078
 8002c1c:	20000074 	.word	0x20000074

08002c20 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10b      	bne.n	8002c48 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8002c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	60fb      	str	r3, [r7, #12]
}
 8002c42:	bf00      	nop
 8002c44:	bf00      	nop
 8002c46:	e7fd      	b.n	8002c44 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c48:	4b07      	ldr	r3, [pc, #28]	@ (8002c68 <vTaskPlaceOnEventList+0x48>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3318      	adds	r3, #24
 8002c4e:	4619      	mov	r1, r3
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7fe fdf7 	bl	8001844 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002c56:	2101      	movs	r1, #1
 8002c58:	6838      	ldr	r0, [r7, #0]
 8002c5a:	f000 fe55 	bl	8003908 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000074 	.word	0x20000074

08002c6c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10b      	bne.n	8002c96 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8002c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	613b      	str	r3, [r7, #16]
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	e7fd      	b.n	8002c92 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	4b15      	ldr	r3, [pc, #84]	@ (8002cf4 <vTaskPlaceOnEventListRestricted+0x88>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	61da      	str	r2, [r3, #28]
 8002ca4:	4b13      	ldr	r3, [pc, #76]	@ (8002cf4 <vTaskPlaceOnEventListRestricted+0x88>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	6892      	ldr	r2, [r2, #8]
 8002cac:	621a      	str	r2, [r3, #32]
 8002cae:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <vTaskPlaceOnEventListRestricted+0x88>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	3218      	adds	r2, #24
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf4 <vTaskPlaceOnEventListRestricted+0x88>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f103 0218 	add.w	r2, r3, #24
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	609a      	str	r2, [r3, #8]
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf4 <vTaskPlaceOnEventListRestricted+0x88>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8002cde:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	68b8      	ldr	r0, [r7, #8]
 8002ce8:	f000 fe0e 	bl	8003908 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8002cec:	bf00      	nop
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20000074 	.word	0x20000074

08002cf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b08b      	sub	sp, #44	@ 0x2c
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10b      	bne.n	8002d26 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8002d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d12:	f383 8811 	msr	BASEPRI, r3
 8002d16:	f3bf 8f6f 	isb	sy
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	60fb      	str	r3, [r7, #12]
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	e7fd      	b.n	8002d22 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	6a3a      	ldr	r2, [r7, #32]
 8002d32:	6a12      	ldr	r2, [r2, #32]
 8002d34:	609a      	str	r2, [r3, #8]
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	6a3a      	ldr	r2, [r7, #32]
 8002d3c:	69d2      	ldr	r2, [r2, #28]
 8002d3e:	605a      	str	r2, [r3, #4]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	3318      	adds	r3, #24
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d103      	bne.n	8002d54 <xTaskRemoveFromEventList+0x5c>
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	6a1a      	ldr	r2, [r3, #32]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	2200      	movs	r2, #0
 8002d58:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	1e5a      	subs	r2, r3, #1
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002d64:	4b4a      	ldr	r3, [pc, #296]	@ (8002e90 <xTaskRemoveFromEventList+0x198>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d160      	bne.n	8002e2e <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	6a3a      	ldr	r2, [r7, #32]
 8002d78:	68d2      	ldr	r2, [r2, #12]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	6a3a      	ldr	r2, [r7, #32]
 8002d82:	6892      	ldr	r2, [r2, #8]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d103      	bne.n	8002d9a <xTaskRemoveFromEventList+0xa2>
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	615a      	str	r2, [r3, #20]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	1e5a      	subs	r2, r3, #1
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dae:	2201      	movs	r2, #1
 8002db0:	409a      	lsls	r2, r3
 8002db2:	4b38      	ldr	r3, [pc, #224]	@ (8002e94 <xTaskRemoveFromEventList+0x19c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	4a36      	ldr	r2, [pc, #216]	@ (8002e94 <xTaskRemoveFromEventList+0x19c>)
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dc0:	4935      	ldr	r1, [pc, #212]	@ (8002e98 <xTaskRemoveFromEventList+0x1a0>)
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3304      	adds	r3, #4
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	60da      	str	r2, [r3, #12]
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	6a3a      	ldr	r2, [r7, #32]
 8002de6:	3204      	adds	r2, #4
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	1d1a      	adds	r2, r3, #4
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	609a      	str	r2, [r3, #8]
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4a26      	ldr	r2, [pc, #152]	@ (8002e98 <xTaskRemoveFromEventList+0x1a0>)
 8002e00:	441a      	add	r2, r3
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	615a      	str	r2, [r3, #20]
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e0a:	4923      	ldr	r1, [pc, #140]	@ (8002e98 <xTaskRemoveFromEventList+0x1a0>)
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6a3a      	ldr	r2, [r7, #32]
 8002e1a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e1c:	1c59      	adds	r1, r3, #1
 8002e1e:	481e      	ldr	r0, [pc, #120]	@ (8002e98 <xTaskRemoveFromEventList+0x1a0>)
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4403      	add	r3, r0
 8002e2a:	6019      	str	r1, [r3, #0]
 8002e2c:	e01b      	b.n	8002e66 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002e9c <xTaskRemoveFromEventList+0x1a4>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	61da      	str	r2, [r3, #28]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	621a      	str	r2, [r3, #32]
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	6a3a      	ldr	r2, [r7, #32]
 8002e48:	3218      	adds	r2, #24
 8002e4a:	605a      	str	r2, [r3, #4]
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	f103 0218 	add.w	r2, r3, #24
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	609a      	str	r2, [r3, #8]
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	4a10      	ldr	r2, [pc, #64]	@ (8002e9c <xTaskRemoveFromEventList+0x1a4>)
 8002e5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e9c <xTaskRemoveFromEventList+0x1a4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3301      	adds	r3, #1
 8002e62:	4a0e      	ldr	r2, [pc, #56]	@ (8002e9c <xTaskRemoveFromEventList+0x1a4>)
 8002e64:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea0 <xTaskRemoveFromEventList+0x1a8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d905      	bls.n	8002e80 <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8002e74:	2301      	movs	r3, #1
 8002e76:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002e78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <xTaskRemoveFromEventList+0x1ac>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e001      	b.n	8002e84 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8002e80:	2300      	movs	r3, #0
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	372c      	adds	r7, #44	@ 0x2c
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	20000174 	.word	0x20000174
 8002e94:	20000154 	.word	0x20000154
 8002e98:	20000078 	.word	0x20000078
 8002e9c:	2000010c 	.word	0x2000010c
 8002ea0:	20000074 	.word	0x20000074
 8002ea4:	20000160 	.word	0x20000160

08002ea8 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <vTaskInternalSetTimeOutState+0x24>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002eb8:	4b05      	ldr	r3, [pc, #20]	@ (8002ed0 <vTaskInternalSetTimeOutState+0x28>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000164 	.word	0x20000164
 8002ed0:	20000150 	.word	0x20000150

08002ed4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10b      	bne.n	8002efc <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8002ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	613b      	str	r3, [r7, #16]
}
 8002ef6:	bf00      	nop
 8002ef8:	bf00      	nop
 8002efa:	e7fd      	b.n	8002ef8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	60fb      	str	r3, [r7, #12]
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	e7fd      	b.n	8002f16 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8002f1a:	f001 f9e5 	bl	80042e8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002f9c <xTaskCheckForTimeOut+0xc8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f36:	d102      	bne.n	8002f3e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61fb      	str	r3, [r7, #28]
 8002f3c:	e026      	b.n	8002f8c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4b17      	ldr	r3, [pc, #92]	@ (8002fa0 <xTaskCheckForTimeOut+0xcc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d00a      	beq.n	8002f60 <xTaskCheckForTimeOut+0x8c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d305      	bcc.n	8002f60 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002f54:	2301      	movs	r3, #1
 8002f56:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	e015      	b.n	8002f8c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d20b      	bcs.n	8002f82 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	1ad2      	subs	r2, r2, r3
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff ff96 	bl	8002ea8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61fb      	str	r3, [r7, #28]
 8002f80:	e004      	b.n	8002f8c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002f8c:	f001 f9dc 	bl	8004348 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8002f90:	69fb      	ldr	r3, [r7, #28]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000150 	.word	0x20000150
 8002fa0:	20000164 	.word	0x20000164

08002fa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8002fa8:	4b03      	ldr	r3, [pc, #12]	@ (8002fb8 <vTaskMissedYield+0x14>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8002fae:	bf00      	nop
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000160 	.word	0x20000160

08002fbc <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002fc4:	f000 f852 	bl	800306c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8002fc8:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <prvIdleTask+0x28>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d9f9      	bls.n	8002fc4 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002fd0:	4b05      	ldr	r3, [pc, #20]	@ (8002fe8 <prvIdleTask+0x2c>)
 8002fd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002fe0:	e7f0      	b.n	8002fc4 <prvIdleTask+0x8>
 8002fe2:	bf00      	nop
 8002fe4:	20000078 	.word	0x20000078
 8002fe8:	e000ed04 	.word	0xe000ed04

08002fec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	e00c      	b.n	8003012 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4a12      	ldr	r2, [pc, #72]	@ (800304c <prvInitialiseTaskLists+0x60>)
 8003004:	4413      	add	r3, r2
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe fbf1 	bl	80017ee <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3301      	adds	r3, #1
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b04      	cmp	r3, #4
 8003016:	d9ef      	bls.n	8002ff8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003018:	480d      	ldr	r0, [pc, #52]	@ (8003050 <prvInitialiseTaskLists+0x64>)
 800301a:	f7fe fbe8 	bl	80017ee <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800301e:	480d      	ldr	r0, [pc, #52]	@ (8003054 <prvInitialiseTaskLists+0x68>)
 8003020:	f7fe fbe5 	bl	80017ee <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003024:	480c      	ldr	r0, [pc, #48]	@ (8003058 <prvInitialiseTaskLists+0x6c>)
 8003026:	f7fe fbe2 	bl	80017ee <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800302a:	480c      	ldr	r0, [pc, #48]	@ (800305c <prvInitialiseTaskLists+0x70>)
 800302c:	f7fe fbdf 	bl	80017ee <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003030:	480b      	ldr	r0, [pc, #44]	@ (8003060 <prvInitialiseTaskLists+0x74>)
 8003032:	f7fe fbdc 	bl	80017ee <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003036:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <prvInitialiseTaskLists+0x78>)
 8003038:	4a05      	ldr	r2, [pc, #20]	@ (8003050 <prvInitialiseTaskLists+0x64>)
 800303a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800303c:	4b0a      	ldr	r3, [pc, #40]	@ (8003068 <prvInitialiseTaskLists+0x7c>)
 800303e:	4a05      	ldr	r2, [pc, #20]	@ (8003054 <prvInitialiseTaskLists+0x68>)
 8003040:	601a      	str	r2, [r3, #0]
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000078 	.word	0x20000078
 8003050:	200000dc 	.word	0x200000dc
 8003054:	200000f0 	.word	0x200000f0
 8003058:	2000010c 	.word	0x2000010c
 800305c:	20000120 	.word	0x20000120
 8003060:	20000138 	.word	0x20000138
 8003064:	20000104 	.word	0x20000104
 8003068:	20000108 	.word	0x20000108

0800306c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003072:	e019      	b.n	80030a8 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003074:	f001 f938 	bl	80042e8 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003078:	4b10      	ldr	r3, [pc, #64]	@ (80030bc <prvCheckTasksWaitingTermination+0x50>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3304      	adds	r3, #4
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe fc15 	bl	80018b4 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800308a:	4b0d      	ldr	r3, [pc, #52]	@ (80030c0 <prvCheckTasksWaitingTermination+0x54>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3b01      	subs	r3, #1
 8003090:	4a0b      	ldr	r2, [pc, #44]	@ (80030c0 <prvCheckTasksWaitingTermination+0x54>)
 8003092:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003094:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <prvCheckTasksWaitingTermination+0x58>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3b01      	subs	r3, #1
 800309a:	4a0a      	ldr	r2, [pc, #40]	@ (80030c4 <prvCheckTasksWaitingTermination+0x58>)
 800309c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800309e:	f001 f953 	bl	8004348 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f810 	bl	80030c8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030a8:	4b06      	ldr	r3, [pc, #24]	@ (80030c4 <prvCheckTasksWaitingTermination+0x58>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1e1      	bne.n	8003074 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80030b0:	bf00      	nop
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000120 	.word	0x20000120
 80030c0:	2000014c 	.word	0x2000014c
 80030c4:	20000134 	.word	0x20000134

080030c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d4:	4618      	mov	r0, r3
 80030d6:	f001 fb35 	bl	8004744 <vPortFree>
            vPortFree( pxTCB );
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f001 fb32 	bl	8004744 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030ec:	4b09      	ldr	r3, [pc, #36]	@ (8003114 <prvResetNextTaskUnblockTime+0x2c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d104      	bne.n	8003100 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80030f6:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <prvResetNextTaskUnblockTime+0x30>)
 80030f8:	f04f 32ff 	mov.w	r2, #4294967295
 80030fc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80030fe:	e005      	b.n	800310c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003100:	4b04      	ldr	r3, [pc, #16]	@ (8003114 <prvResetNextTaskUnblockTime+0x2c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a03      	ldr	r2, [pc, #12]	@ (8003118 <prvResetNextTaskUnblockTime+0x30>)
 800310a:	6013      	str	r3, [r2, #0]
}
 800310c:	bf00      	nop
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr
 8003114:	20000104 	.word	0x20000104
 8003118:	2000016c 	.word	0x2000016c

0800311c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003122:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <xTaskGetSchedulerState+0x34>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d102      	bne.n	8003130 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800312a:	2301      	movs	r3, #1
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	e008      	b.n	8003142 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003130:	4b08      	ldr	r3, [pc, #32]	@ (8003154 <xTaskGetSchedulerState+0x38>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003138:	2302      	movs	r3, #2
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	e001      	b.n	8003142 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8003142:	687b      	ldr	r3, [r7, #4]
    }
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000158 	.word	0x20000158
 8003154:	20000174 	.word	0x20000174

08003158 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003164:	2300      	movs	r3, #0
 8003166:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 8090 	beq.w	8003290 <xTaskPriorityDisinherit+0x138>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003170:	4b4a      	ldr	r3, [pc, #296]	@ (800329c <xTaskPriorityDisinherit+0x144>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	429a      	cmp	r2, r3
 8003178:	d00b      	beq.n	8003192 <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 800317a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800317e:	f383 8811 	msr	BASEPRI, r3
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	613b      	str	r3, [r7, #16]
}
 800318c:	bf00      	nop
 800318e:	bf00      	nop
 8003190:	e7fd      	b.n	800318e <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10b      	bne.n	80031b2 <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 800319a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800319e:	f383 8811 	msr	BASEPRI, r3
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	60fb      	str	r3, [r7, #12]
}
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
 80031b0:	e7fd      	b.n	80031ae <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b6:	1e5a      	subs	r2, r3, #1
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	649a      	str	r2, [r3, #72]	@ 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d063      	beq.n	8003290 <xTaskPriorityDisinherit+0x138>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d15f      	bne.n	8003290 <xTaskPriorityDisinherit+0x138>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	3304      	adds	r3, #4
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe fb6d 	bl	80018b4 <uxListRemove>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e4:	2201      	movs	r2, #1
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43da      	mvns	r2, r3
 80031ec:	4b2c      	ldr	r3, [pc, #176]	@ (80032a0 <xTaskPriorityDisinherit+0x148>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4013      	ands	r3, r2
 80031f2:	4a2b      	ldr	r2, [pc, #172]	@ (80032a0 <xTaskPriorityDisinherit+0x148>)
 80031f4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003202:	f1c3 0205 	rsb	r2, r3, #5
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320e:	2201      	movs	r2, #1
 8003210:	409a      	lsls	r2, r3
 8003212:	4b23      	ldr	r3, [pc, #140]	@ (80032a0 <xTaskPriorityDisinherit+0x148>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4313      	orrs	r3, r2
 8003218:	4a21      	ldr	r2, [pc, #132]	@ (80032a0 <xTaskPriorityDisinherit+0x148>)
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003220:	4920      	ldr	r1, [pc, #128]	@ (80032a4 <xTaskPriorityDisinherit+0x14c>)
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	3304      	adds	r3, #4
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	60da      	str	r2, [r3, #12]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	3204      	adds	r2, #4
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	1d1a      	adds	r2, r3, #4
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	609a      	str	r2, [r3, #8]
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4a11      	ldr	r2, [pc, #68]	@ (80032a4 <xTaskPriorityDisinherit+0x14c>)
 8003260:	441a      	add	r2, r3
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	615a      	str	r2, [r3, #20]
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800326a:	490e      	ldr	r1, [pc, #56]	@ (80032a4 <xTaskPriorityDisinherit+0x14c>)
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800327c:	1c59      	adds	r1, r3, #1
 800327e:	4809      	ldr	r0, [pc, #36]	@ (80032a4 <xTaskPriorityDisinherit+0x14c>)
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4403      	add	r3, r0
 800328a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800328c:	2301      	movs	r3, #1
 800328e:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8003290:	69fb      	ldr	r3, [r7, #28]
    }
 8003292:	4618      	mov	r0, r3
 8003294:	3720      	adds	r7, #32
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000074 	.word	0x20000074
 80032a0:	20000154 	.word	0x20000154
 80032a4:	20000078 	.word	0x20000078

080032a8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00b      	beq.n	80032d8 <xTaskGenericNotifyWait+0x30>
    __asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	613b      	str	r3, [r7, #16]
}
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
 80032d6:	e7fd      	b.n	80032d4 <xTaskGenericNotifyWait+0x2c>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 80032d8:	f7ff f9fe 	bl	80026d8 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 80032dc:	f001 f804 	bl	80042e8 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80032e0:	4b3b      	ldr	r3, [pc, #236]	@ (80033d0 <xTaskGenericNotifyWait+0x128>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	3350      	adds	r3, #80	@ 0x50
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d01a      	beq.n	8003328 <xTaskGenericNotifyWait+0x80>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 80032f2:	4b37      	ldr	r3, [pc, #220]	@ (80033d0 <xTaskGenericNotifyWait+0x128>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3312      	adds	r3, #18
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	43db      	mvns	r3, r3
 8003304:	4019      	ands	r1, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	3312      	adds	r3, #18
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8003310:	4b2f      	ldr	r3, [pc, #188]	@ (80033d0 <xTaskGenericNotifyWait+0x128>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4413      	add	r3, r2
 8003318:	3350      	adds	r3, #80	@ 0x50
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 800331e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <xTaskGenericNotifyWait+0x80>
                    {
                        xShouldBlock = pdTRUE;
 8003324:	2301      	movs	r3, #1
 8003326:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8003328:	f001 f80e 	bl	8004348 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d103      	bne.n	800333a <xTaskGenericNotifyWait+0x92>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003332:	2101      	movs	r1, #1
 8003334:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003336:	f000 fae7 	bl	8003908 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800333a:	f7ff f9db 	bl	80026f4 <xTaskResumeAll>
 800333e:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d10a      	bne.n	800335c <xTaskGenericNotifyWait+0xb4>
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d107      	bne.n	800335c <xTaskGenericNotifyWait+0xb4>
        {
            taskYIELD_WITHIN_API();
 800334c:	4b21      	ldr	r3, [pc, #132]	@ (80033d4 <xTaskGenericNotifyWait+0x12c>)
 800334e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 800335c:	f000 ffc4 	bl	80042e8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d008      	beq.n	8003378 <xTaskGenericNotifyWait+0xd0>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8003366:	4b1a      	ldr	r3, [pc, #104]	@ (80033d0 <xTaskGenericNotifyWait+0x128>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3312      	adds	r3, #18
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8003378:	4b15      	ldr	r3, [pc, #84]	@ (80033d0 <xTaskGenericNotifyWait+0x128>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	3350      	adds	r3, #80	@ 0x50
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d002      	beq.n	8003390 <xTaskGenericNotifyWait+0xe8>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	e010      	b.n	80033b2 <xTaskGenericNotifyWait+0x10a>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8003390:	4b0f      	ldr	r3, [pc, #60]	@ (80033d0 <xTaskGenericNotifyWait+0x128>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3312      	adds	r3, #18
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	6859      	ldr	r1, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	4019      	ands	r1, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3312      	adds	r3, #18
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 80033ae:	2301      	movs	r3, #1
 80033b0:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 80033b2:	4b07      	ldr	r3, [pc, #28]	@ (80033d0 <xTaskGenericNotifyWait+0x128>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4413      	add	r3, r2
 80033ba:	3350      	adds	r3, #80	@ 0x50
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80033c0:	f000 ffc2 	bl	8004348 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 80033c4:	69fb      	ldr	r3, [r7, #28]
    }
 80033c6:	4618      	mov	r0, r3
 80033c8:	3720      	adds	r7, #32
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000074 	.word	0x20000074
 80033d4:	e000ed04 	.word	0xe000ed04

080033d8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08e      	sub	sp, #56	@ 0x38
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80033e6:	2301      	movs	r3, #1
 80033e8:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00b      	beq.n	8003408 <xTaskGenericNotify+0x30>
    __asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	623b      	str	r3, [r7, #32]
}
 8003402:	bf00      	nop
 8003404:	bf00      	nop
 8003406:	e7fd      	b.n	8003404 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10b      	bne.n	8003426 <xTaskGenericNotify+0x4e>
    __asm volatile
 800340e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003412:	f383 8811 	msr	BASEPRI, r3
 8003416:	f3bf 8f6f 	isb	sy
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	61fb      	str	r3, [r7, #28]
}
 8003420:	bf00      	nop
 8003422:	bf00      	nop
 8003424:	e7fd      	b.n	8003422 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 800342a:	f000 ff5d 	bl	80042e8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800342e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <xTaskGenericNotify+0x6c>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	3312      	adds	r3, #18
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003442:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	4413      	add	r3, r2
 800344a:	3350      	adds	r3, #80	@ 0x50
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4413      	add	r3, r2
 8003458:	3350      	adds	r3, #80	@ 0x50
 800345a:	2202      	movs	r2, #2
 800345c:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800345e:	78fb      	ldrb	r3, [r7, #3]
 8003460:	2b04      	cmp	r3, #4
 8003462:	d841      	bhi.n	80034e8 <xTaskGenericNotify+0x110>
 8003464:	a201      	add	r2, pc, #4	@ (adr r2, 800346c <xTaskGenericNotify+0x94>)
 8003466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346a:	bf00      	nop
 800346c:	08003509 	.word	0x08003509
 8003470:	08003481 	.word	0x08003481
 8003474:	0800349f 	.word	0x0800349f
 8003478:	080034bb 	.word	0x080034bb
 800347c:	080034cb 	.word	0x080034cb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	3312      	adds	r3, #18
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	431a      	orrs	r2, r3
 8003490:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	3312      	adds	r3, #18
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	605a      	str	r2, [r3, #4]
                    break;
 800349c:	e037      	b.n	800350e <xTaskGenericNotify+0x136>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800349e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	3312      	adds	r3, #18
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	3312      	adds	r3, #18
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	605a      	str	r2, [r3, #4]
                    break;
 80034b8:	e029      	b.n	800350e <xTaskGenericNotify+0x136>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80034ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	3312      	adds	r3, #18
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	605a      	str	r2, [r3, #4]
                    break;
 80034c8:	e021      	b.n	800350e <xTaskGenericNotify+0x136>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80034ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d007      	beq.n	80034e2 <xTaskGenericNotify+0x10a>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80034d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	3312      	adds	r3, #18
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80034e0:	e015      	b.n	800350e <xTaskGenericNotify+0x136>
                        xReturn = pdFAIL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 80034e6:	e012      	b.n	800350e <xTaskGenericNotify+0x136>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80034e8:	4b4e      	ldr	r3, [pc, #312]	@ (8003624 <xTaskGenericNotify+0x24c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00d      	beq.n	800350c <xTaskGenericNotify+0x134>
    __asm volatile
 80034f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	61bb      	str	r3, [r7, #24]
}
 8003502:	bf00      	nop
 8003504:	bf00      	nop
 8003506:	e7fd      	b.n	8003504 <xTaskGenericNotify+0x12c>
                    break;
 8003508:	bf00      	nop
 800350a:	e000      	b.n	800350e <xTaskGenericNotify+0x136>

                    break;
 800350c:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800350e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003512:	2b01      	cmp	r3, #1
 8003514:	d17e      	bne.n	8003614 <xTaskGenericNotify+0x23c>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800351c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003522:	68d2      	ldr	r2, [r2, #12]
 8003524:	609a      	str	r2, [r3, #8]
 8003526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800352c:	6892      	ldr	r2, [r2, #8]
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003536:	3304      	adds	r3, #4
 8003538:	429a      	cmp	r2, r3
 800353a:	d103      	bne.n	8003544 <xTaskGenericNotify+0x16c>
 800353c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003546:	2200      	movs	r2, #0
 8003548:	615a      	str	r2, [r3, #20]
 800354a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	1e5a      	subs	r2, r3, #1
 8003550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003552:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003558:	2201      	movs	r2, #1
 800355a:	409a      	lsls	r2, r3
 800355c:	4b32      	ldr	r3, [pc, #200]	@ (8003628 <xTaskGenericNotify+0x250>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4313      	orrs	r3, r2
 8003562:	4a31      	ldr	r2, [pc, #196]	@ (8003628 <xTaskGenericNotify+0x250>)
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800356a:	4930      	ldr	r1, [pc, #192]	@ (800362c <xTaskGenericNotify+0x254>)
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	3304      	adds	r3, #4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
 800357c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003580:	609a      	str	r2, [r3, #8]
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003588:	60da      	str	r2, [r3, #12]
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003590:	3204      	adds	r2, #4
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003596:	1d1a      	adds	r2, r3, #4
 8003598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4a20      	ldr	r2, [pc, #128]	@ (800362c <xTaskGenericNotify+0x254>)
 80035aa:	441a      	add	r2, r3
 80035ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ae:	615a      	str	r2, [r3, #20]
 80035b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035b4:	491d      	ldr	r1, [pc, #116]	@ (800362c <xTaskGenericNotify+0x254>)
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80035c6:	1c59      	adds	r1, r3, #1
 80035c8:	4818      	ldr	r0, [pc, #96]	@ (800362c <xTaskGenericNotify+0x254>)
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4403      	add	r3, r0
 80035d4:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80035d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00b      	beq.n	80035f6 <xTaskGenericNotify+0x21e>
    __asm volatile
 80035de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e2:	f383 8811 	msr	BASEPRI, r3
 80035e6:	f3bf 8f6f 	isb	sy
 80035ea:	f3bf 8f4f 	dsb	sy
 80035ee:	617b      	str	r3, [r7, #20]
}
 80035f0:	bf00      	nop
 80035f2:	bf00      	nop
 80035f4:	e7fd      	b.n	80035f2 <xTaskGenericNotify+0x21a>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 80035f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003630 <xTaskGenericNotify+0x258>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003600:	429a      	cmp	r2, r3
 8003602:	d207      	bcs.n	8003614 <xTaskGenericNotify+0x23c>
 8003604:	4b0b      	ldr	r3, [pc, #44]	@ (8003634 <xTaskGenericNotify+0x25c>)
 8003606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003614:	f000 fe98 	bl	8004348 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 8003618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800361a:	4618      	mov	r0, r3
 800361c:	3738      	adds	r7, #56	@ 0x38
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000150 	.word	0x20000150
 8003628:	20000154 	.word	0x20000154
 800362c:	20000078 	.word	0x20000078
 8003630:	20000074 	.word	0x20000074
 8003634:	e000ed04 	.word	0xe000ed04

08003638 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003638:	b580      	push	{r7, lr}
 800363a:	b092      	sub	sp, #72	@ 0x48
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003646:	2301      	movs	r3, #1
 8003648:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <xTaskGenericNotifyFromISR+0x30>
    __asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003662:	bf00      	nop
 8003664:	bf00      	nop
 8003666:	e7fd      	b.n	8003664 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <xTaskGenericNotifyFromISR+0x4e>
    __asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	e7fd      	b.n	8003682 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003686:	f000 feeb 	bl	8004460 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm volatile
 800368e:	f3ef 8211 	mrs	r2, BASEPRI
 8003692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	623a      	str	r2, [r7, #32]
 80036a4:	61fb      	str	r3, [r7, #28]
    return ulOriginalBASEPRI;
 80036a6:	6a3b      	ldr	r3, [r7, #32]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 80036a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80036aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <xTaskGenericNotifyFromISR+0x88>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80036b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	3312      	adds	r3, #18
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036be:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80036c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	4413      	add	r3, r2
 80036c6:	3350      	adds	r3, #80	@ 0x50
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80036ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4413      	add	r3, r2
 80036d4:	3350      	adds	r3, #80	@ 0x50
 80036d6:	2202      	movs	r2, #2
 80036d8:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d841      	bhi.n	8003764 <xTaskGenericNotifyFromISR+0x12c>
 80036e0:	a201      	add	r2, pc, #4	@ (adr r2, 80036e8 <xTaskGenericNotifyFromISR+0xb0>)
 80036e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e6:	bf00      	nop
 80036e8:	08003785 	.word	0x08003785
 80036ec:	080036fd 	.word	0x080036fd
 80036f0:	0800371b 	.word	0x0800371b
 80036f4:	08003737 	.word	0x08003737
 80036f8:	08003747 	.word	0x08003747
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80036fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	3312      	adds	r3, #18
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	431a      	orrs	r2, r3
 800370c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	3312      	adds	r3, #18
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	605a      	str	r2, [r3, #4]
                    break;
 8003718:	e037      	b.n	800378a <xTaskGenericNotifyFromISR+0x152>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800371a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	3312      	adds	r3, #18
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	3312      	adds	r3, #18
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	605a      	str	r2, [r3, #4]
                    break;
 8003734:	e029      	b.n	800378a <xTaskGenericNotifyFromISR+0x152>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003736:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	3312      	adds	r3, #18
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	605a      	str	r2, [r3, #4]
                    break;
 8003744:	e021      	b.n	800378a <xTaskGenericNotifyFromISR+0x152>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003746:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800374a:	2b02      	cmp	r3, #2
 800374c:	d007      	beq.n	800375e <xTaskGenericNotifyFromISR+0x126>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800374e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	3312      	adds	r3, #18
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800375c:	e015      	b.n	800378a <xTaskGenericNotifyFromISR+0x152>
                        xReturn = pdFAIL;
 800375e:	2300      	movs	r3, #0
 8003760:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8003762:	e012      	b.n	800378a <xTaskGenericNotifyFromISR+0x152>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003764:	4b61      	ldr	r3, [pc, #388]	@ (80038ec <xTaskGenericNotifyFromISR+0x2b4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00d      	beq.n	8003788 <xTaskGenericNotifyFromISR+0x150>
    __asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	61bb      	str	r3, [r7, #24]
}
 800377e:	bf00      	nop
 8003780:	bf00      	nop
 8003782:	e7fd      	b.n	8003780 <xTaskGenericNotifyFromISR+0x148>
                    break;
 8003784:	bf00      	nop
 8003786:	e000      	b.n	800378a <xTaskGenericNotifyFromISR+0x152>
                    break;
 8003788:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800378a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800378e:	2b01      	cmp	r3, #1
 8003790:	f040 80a1 	bne.w	80038d6 <xTaskGenericNotifyFromISR+0x29e>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00b      	beq.n	80037b4 <xTaskGenericNotifyFromISR+0x17c>
    __asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	617b      	str	r3, [r7, #20]
}
 80037ae:	bf00      	nop
 80037b0:	bf00      	nop
 80037b2:	e7fd      	b.n	80037b0 <xTaskGenericNotifyFromISR+0x178>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80037b4:	4b4e      	ldr	r3, [pc, #312]	@ (80038f0 <xTaskGenericNotifyFromISR+0x2b8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d160      	bne.n	800387e <xTaskGenericNotifyFromISR+0x246>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80037bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80037c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037c8:	68d2      	ldr	r2, [r2, #12]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037d2:	6892      	ldr	r2, [r2, #8]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037dc:	3304      	adds	r3, #4
 80037de:	429a      	cmp	r2, r3
 80037e0:	d103      	bne.n	80037ea <xTaskGenericNotifyFromISR+0x1b2>
 80037e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ec:	2200      	movs	r2, #0
 80037ee:	615a      	str	r2, [r3, #20]
 80037f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	1e5a      	subs	r2, r3, #1
 80037f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80037fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fe:	2201      	movs	r2, #1
 8003800:	409a      	lsls	r2, r3
 8003802:	4b3c      	ldr	r3, [pc, #240]	@ (80038f4 <xTaskGenericNotifyFromISR+0x2bc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4313      	orrs	r3, r2
 8003808:	4a3a      	ldr	r2, [pc, #232]	@ (80038f4 <xTaskGenericNotifyFromISR+0x2bc>)
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800380e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003810:	4939      	ldr	r1, [pc, #228]	@ (80038f8 <xTaskGenericNotifyFromISR+0x2c0>)
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	3304      	adds	r3, #4
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800382e:	60da      	str	r2, [r3, #12]
 8003830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003836:	3204      	adds	r2, #4
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800383c:	1d1a      	adds	r2, r3, #4
 800383e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4a2a      	ldr	r2, [pc, #168]	@ (80038f8 <xTaskGenericNotifyFromISR+0x2c0>)
 8003850:	441a      	add	r2, r3
 8003852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003854:	615a      	str	r2, [r3, #20]
 8003856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800385a:	4927      	ldr	r1, [pc, #156]	@ (80038f8 <xTaskGenericNotifyFromISR+0x2c0>)
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800386a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800386c:	1c59      	adds	r1, r3, #1
 800386e:	4822      	ldr	r0, [pc, #136]	@ (80038f8 <xTaskGenericNotifyFromISR+0x2c0>)
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4403      	add	r3, r0
 800387a:	6019      	str	r1, [r3, #0]
 800387c:	e01b      	b.n	80038b6 <xTaskGenericNotifyFromISR+0x27e>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800387e:	4b1f      	ldr	r3, [pc, #124]	@ (80038fc <xTaskGenericNotifyFromISR+0x2c4>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	637b      	str	r3, [r7, #52]	@ 0x34
 8003884:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003886:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003888:	61da      	str	r2, [r3, #28]
 800388a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003890:	621a      	str	r2, [r3, #32]
 8003892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003898:	3218      	adds	r2, #24
 800389a:	605a      	str	r2, [r3, #4]
 800389c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800389e:	f103 0218 	add.w	r2, r3, #24
 80038a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a4:	609a      	str	r2, [r3, #8]
 80038a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038a8:	4a14      	ldr	r2, [pc, #80]	@ (80038fc <xTaskGenericNotifyFromISR+0x2c4>)
 80038aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80038ac:	4b13      	ldr	r3, [pc, #76]	@ (80038fc <xTaskGenericNotifyFromISR+0x2c4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	4a12      	ldr	r2, [pc, #72]	@ (80038fc <xTaskGenericNotifyFromISR+0x2c4>)
 80038b4:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ba:	4b11      	ldr	r3, [pc, #68]	@ (8003900 <xTaskGenericNotifyFromISR+0x2c8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d908      	bls.n	80038d6 <xTaskGenericNotifyFromISR+0x29e>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80038c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <xTaskGenericNotifyFromISR+0x298>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80038ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 80038d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <xTaskGenericNotifyFromISR+0x2cc>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038d8:	613b      	str	r3, [r7, #16]
    __asm volatile
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f383 8811 	msr	BASEPRI, r3
}
 80038e0:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 80038e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 80038e4:	4618      	mov	r0, r3
 80038e6:	3748      	adds	r7, #72	@ 0x48
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	20000150 	.word	0x20000150
 80038f0:	20000174 	.word	0x20000174
 80038f4:	20000154 	.word	0x20000154
 80038f8:	20000078 	.word	0x20000078
 80038fc:	2000010c 	.word	0x2000010c
 8003900:	20000074 	.word	0x20000074
 8003904:	20000160 	.word	0x20000160

08003908 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003912:	4b37      	ldr	r3, [pc, #220]	@ (80039f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003918:	4b36      	ldr	r3, [pc, #216]	@ (80039f4 <prvAddCurrentTaskToDelayedList+0xec>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800391e:	4b36      	ldr	r3, [pc, #216]	@ (80039f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003924:	4b35      	ldr	r3, [pc, #212]	@ (80039fc <prvAddCurrentTaskToDelayedList+0xf4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3304      	adds	r3, #4
 800392a:	4618      	mov	r0, r3
 800392c:	f7fd ffc2 	bl	80018b4 <uxListRemove>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10b      	bne.n	800394e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003936:	4b31      	ldr	r3, [pc, #196]	@ (80039fc <prvAddCurrentTaskToDelayedList+0xf4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393c:	2201      	movs	r2, #1
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43da      	mvns	r2, r3
 8003944:	4b2e      	ldr	r3, [pc, #184]	@ (8003a00 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4013      	ands	r3, r2
 800394a:	4a2d      	ldr	r2, [pc, #180]	@ (8003a00 <prvAddCurrentTaskToDelayedList+0xf8>)
 800394c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d124      	bne.n	80039a0 <prvAddCurrentTaskToDelayedList+0x98>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d021      	beq.n	80039a0 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800395c:	4b29      	ldr	r3, [pc, #164]	@ (8003a04 <prvAddCurrentTaskToDelayedList+0xfc>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	4b26      	ldr	r3, [pc, #152]	@ (80039fc <prvAddCurrentTaskToDelayedList+0xf4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	609a      	str	r2, [r3, #8]
 800396a:	4b24      	ldr	r3, [pc, #144]	@ (80039fc <prvAddCurrentTaskToDelayedList+0xf4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	6892      	ldr	r2, [r2, #8]
 8003972:	60da      	str	r2, [r3, #12]
 8003974:	4b21      	ldr	r3, [pc, #132]	@ (80039fc <prvAddCurrentTaskToDelayedList+0xf4>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	3204      	adds	r2, #4
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	4b1e      	ldr	r3, [pc, #120]	@ (80039fc <prvAddCurrentTaskToDelayedList+0xf4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	1d1a      	adds	r2, r3, #4
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	609a      	str	r2, [r3, #8]
 800398a:	4b1c      	ldr	r3, [pc, #112]	@ (80039fc <prvAddCurrentTaskToDelayedList+0xf4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1d      	ldr	r2, [pc, #116]	@ (8003a04 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003990:	615a      	str	r2, [r3, #20]
 8003992:	4b1c      	ldr	r3, [pc, #112]	@ (8003a04 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3301      	adds	r3, #1
 8003998:	4a1a      	ldr	r2, [pc, #104]	@ (8003a04 <prvAddCurrentTaskToDelayedList+0xfc>)
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800399e:	e022      	b.n	80039e6 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80039a0:	69fa      	ldr	r2, [r7, #28]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039a8:	4b14      	ldr	r3, [pc, #80]	@ (80039fc <prvAddCurrentTaskToDelayedList+0xf4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d207      	bcs.n	80039c8 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80039b8:	4b10      	ldr	r3, [pc, #64]	@ (80039fc <prvAddCurrentTaskToDelayedList+0xf4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3304      	adds	r3, #4
 80039be:	4619      	mov	r1, r3
 80039c0:	6978      	ldr	r0, [r7, #20]
 80039c2:	f7fd ff3f 	bl	8001844 <vListInsert>
}
 80039c6:	e00e      	b.n	80039e6 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80039c8:	4b0c      	ldr	r3, [pc, #48]	@ (80039fc <prvAddCurrentTaskToDelayedList+0xf4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3304      	adds	r3, #4
 80039ce:	4619      	mov	r1, r3
 80039d0:	69b8      	ldr	r0, [r7, #24]
 80039d2:	f7fd ff37 	bl	8001844 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80039d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003a08 <prvAddCurrentTaskToDelayedList+0x100>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d202      	bcs.n	80039e6 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 80039e0:	4a09      	ldr	r2, [pc, #36]	@ (8003a08 <prvAddCurrentTaskToDelayedList+0x100>)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6013      	str	r3, [r2, #0]
}
 80039e6:	bf00      	nop
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000150 	.word	0x20000150
 80039f4:	20000104 	.word	0x20000104
 80039f8:	20000108 	.word	0x20000108
 80039fc:	20000074 	.word	0x20000074
 8003a00:	20000154 	.word	0x20000154
 8003a04:	20000138 	.word	0x20000138
 8003a08:	2000016c 	.word	0x2000016c

08003a0c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003a16:	f000 fb01 	bl	800401c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003a1a:	4b12      	ldr	r3, [pc, #72]	@ (8003a64 <xTimerCreateTimerTask+0x58>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00b      	beq.n	8003a3a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003a22:	4b11      	ldr	r3, [pc, #68]	@ (8003a68 <xTimerCreateTimerTask+0x5c>)
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	2301      	movs	r3, #1
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003a30:	490e      	ldr	r1, [pc, #56]	@ (8003a6c <xTimerCreateTimerTask+0x60>)
 8003a32:	480f      	ldr	r0, [pc, #60]	@ (8003a70 <xTimerCreateTimerTask+0x64>)
 8003a34:	f7fe fc82 	bl	800233c <xTaskCreate>
 8003a38:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10b      	bne.n	8003a58 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	603b      	str	r3, [r7, #0]
}
 8003a52:	bf00      	nop
 8003a54:	bf00      	nop
 8003a56:	e7fd      	b.n	8003a54 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8003a58:	687b      	ldr	r3, [r7, #4]
    }
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	200001a8 	.word	0x200001a8
 8003a68:	200001ac 	.word	0x200001ac
 8003a6c:	08004b68 	.word	0x08004b68
 8003a70:	08003c75 	.word	0x08003c75

08003a74 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
            traceENTER_xTimerCreate( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8003a82:	2028      	movs	r0, #40	@ 0x28
 8003a84:	f000 fd2c 	bl	80044e0 <pvPortMalloc>
 8003a88:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00d      	beq.n	8003aac <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f805 	bl	8003ab6 <prvInitialiseNewTimer>
            }

            traceRETURN_xTimerCreate( pxNewTimer );

            return pxNewTimer;
 8003aac:	697b      	ldr	r3, [r7, #20]
        }
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b086      	sub	sp, #24
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10b      	bne.n	8003ae2 <prvInitialiseNewTimer+0x2c>
    __asm volatile
 8003aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	617b      	str	r3, [r7, #20]
}
 8003adc:	bf00      	nop
 8003ade:	bf00      	nop
 8003ae0:	e7fd      	b.n	8003ade <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8003ae2:	f000 fa9b 	bl	800401c <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afa:	6a3a      	ldr	r2, [r7, #32]
 8003afc:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	3304      	adds	r3, #4
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd fe92 	bl	800182c <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <prvInitialiseNewTimer+0x6a>
        {
            pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b14:	f043 0304 	orr.w	r3, r3, #4
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8003b20:	bf00      	nop
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <xTimerGenericCommandFromTask>:
    BaseType_t xTimerGenericCommandFromTask( TimerHandle_t xTimer,
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	@ 0x28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
 8003b34:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	627b      	str	r3, [r7, #36]	@ 0x24

        ( void ) pxHigherPriorityTaskWoken;

        traceENTER_xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );

        configASSERT( xTimer );
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10b      	bne.n	8003b58 <xTimerGenericCommandFromTask+0x30>
    __asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	623b      	str	r3, [r7, #32]
}
 8003b52:	bf00      	nop
 8003b54:	bf00      	nop
 8003b56:	e7fd      	b.n	8003b54 <xTimerGenericCommandFromTask+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003b58:	4b1c      	ldr	r3, [pc, #112]	@ (8003bcc <xTimerGenericCommandFromTask+0xa4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d02f      	beq.n	8003bc0 <xTimerGenericCommandFromTask+0x98>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	61bb      	str	r3, [r7, #24]

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b05      	cmp	r3, #5
 8003b70:	dd0b      	ble.n	8003b8a <xTimerGenericCommandFromTask+0x62>
    __asm volatile
 8003b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	61fb      	str	r3, [r7, #28]
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop
 8003b88:	e7fd      	b.n	8003b86 <xTimerGenericCommandFromTask+0x5e>

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b05      	cmp	r3, #5
 8003b8e:	dc17      	bgt.n	8003bc0 <xTimerGenericCommandFromTask+0x98>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b90:	f7ff fac4 	bl	800311c <xTaskGetSchedulerState>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d109      	bne.n	8003bae <xTimerGenericCommandFromTask+0x86>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003bcc <xTimerGenericCommandFromTask+0xa4>)
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	f107 0110 	add.w	r1, r7, #16
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ba6:	f7fd ffaf 	bl	8001b08 <xQueueGenericSend>
 8003baa:	6278      	str	r0, [r7, #36]	@ 0x24
 8003bac:	e008      	b.n	8003bc0 <xTimerGenericCommandFromTask+0x98>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003bae:	4b07      	ldr	r3, [pc, #28]	@ (8003bcc <xTimerGenericCommandFromTask+0xa4>)
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	f107 0110 	add.w	r1, r7, #16
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f7fd ffa5 	bl	8001b08 <xQueueGenericSend>
 8003bbe:	6278      	str	r0, [r7, #36]	@ 0x24
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );

        return xReturn;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3728      	adds	r7, #40	@ 0x28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	200001a8 	.word	0x200001a8

08003bd0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003bdc:	e008      	b.n	8003bf0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	4413      	add	r3, r2
 8003be6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	18d1      	adds	r1, r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f8dd 	bl	8003dbc <prvInsertTimerInActiveList>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1ea      	bne.n	8003bde <prvReloadTimer+0xe>
        }
    }
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c1e:	4b14      	ldr	r3, [pc, #80]	@ (8003c70 <prvProcessExpiredTimer+0x5c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fd fe41 	bl	80018b4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f7ff ffc3 	bl	8003bd0 <prvReloadTimer>
 8003c4a:	e008      	b.n	8003c5e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	4798      	blx	r3
    }
 8003c66:	bf00      	nop
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	200001a0 	.word	0x200001a0

08003c74 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c7c:	f107 0308 	add.w	r3, r7, #8
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 f859 	bl	8003d38 <prvGetNextExpireTime>
 8003c86:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f805 	bl	8003c9c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003c92:	f000 f8d5 	bl	8003e40 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c96:	bf00      	nop
 8003c98:	e7f0      	b.n	8003c7c <prvTimerTask+0x8>
	...

08003c9c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003ca6:	f7fe fd17 	bl	80026d8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003caa:	f107 0308 	add.w	r3, r7, #8
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 f864 	bl	8003d7c <prvSampleTimeNow>
 8003cb4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d130      	bne.n	8003d1e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <prvProcessTimerOrBlockTask+0x3c>
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d806      	bhi.n	8003cd8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003cca:	f7fe fd13 	bl	80026f4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003cce:	68f9      	ldr	r1, [r7, #12]
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff ff9f 	bl	8003c14 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003cd6:	e024      	b.n	8003d22 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003cde:	4b13      	ldr	r3, [pc, #76]	@ (8003d2c <prvProcessTimerOrBlockTask+0x90>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <prvProcessTimerOrBlockTask+0x50>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <prvProcessTimerOrBlockTask+0x52>
 8003cec:	2300      	movs	r3, #0
 8003cee:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d30 <prvProcessTimerOrBlockTask+0x94>)
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f7fe faad 	bl	800225c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003d02:	f7fe fcf7 	bl	80026f4 <xTaskResumeAll>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8003d0c:	4b09      	ldr	r3, [pc, #36]	@ (8003d34 <prvProcessTimerOrBlockTask+0x98>)
 8003d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	f3bf 8f6f 	isb	sy
    }
 8003d1c:	e001      	b.n	8003d22 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003d1e:	f7fe fce9 	bl	80026f4 <xTaskResumeAll>
    }
 8003d22:	bf00      	nop
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	200001a4 	.word	0x200001a4
 8003d30:	200001a8 	.word	0x200001a8
 8003d34:	e000ed04 	.word	0xe000ed04

08003d38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d40:	4b0d      	ldr	r3, [pc, #52]	@ (8003d78 <prvGetNextExpireTime+0x40>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <prvGetNextExpireTime+0x16>
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	e000      	b.n	8003d50 <prvGetNextExpireTime+0x18>
 8003d4e:	2200      	movs	r2, #0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d105      	bne.n	8003d68 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d5c:	4b06      	ldr	r3, [pc, #24]	@ (8003d78 <prvGetNextExpireTime+0x40>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	e001      	b.n	8003d6c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
    }
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	200001a0 	.word	0x200001a0

08003d7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8003d84:	f7fe fdbe 	bl	8002904 <xTaskGetTickCount>
 8003d88:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003db8 <prvSampleTimeNow+0x3c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d205      	bcs.n	8003da0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003d94:	f000 f91c 	bl	8003fd0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	e002      	b.n	8003da6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003da6:	4a04      	ldr	r2, [pc, #16]	@ (8003db8 <prvSampleTimeNow+0x3c>)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003dac:	68fb      	ldr	r3, [r7, #12]
    }
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	200001b0 	.word	0x200001b0

08003dbc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d812      	bhi.n	8003e08 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	1ad2      	subs	r2, r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d302      	bcc.n	8003df6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003df0:	2301      	movs	r3, #1
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	e01b      	b.n	8003e2e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003df6:	4b10      	ldr	r3, [pc, #64]	@ (8003e38 <prvInsertTimerInActiveList+0x7c>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4610      	mov	r0, r2
 8003e02:	f7fd fd1f 	bl	8001844 <vListInsert>
 8003e06:	e012      	b.n	8003e2e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d206      	bcs.n	8003e1e <prvInsertTimerInActiveList+0x62>
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d302      	bcc.n	8003e1e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	e007      	b.n	8003e2e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e1e:	4b07      	ldr	r3, [pc, #28]	@ (8003e3c <prvInsertTimerInActiveList+0x80>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3304      	adds	r3, #4
 8003e26:	4619      	mov	r1, r3
 8003e28:	4610      	mov	r0, r2
 8003e2a:	f7fd fd0b 	bl	8001844 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003e2e:	697b      	ldr	r3, [r7, #20]
    }
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	200001a4 	.word	0x200001a4
 8003e3c:	200001a0 	.word	0x200001a0

08003e40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8003e46:	f107 0308 	add.w	r3, r7, #8
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	605a      	str	r2, [r3, #4]
 8003e50:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003e52:	e0a9      	b.n	8003fa8 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f2c0 80a6 	blt.w	8003fa8 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d004      	beq.n	8003e72 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fd fd21 	bl	80018b4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e72:	1d3b      	adds	r3, r7, #4
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ff81 	bl	8003d7c <prvSampleTimeNow>
 8003e7a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	f200 808e 	bhi.w	8003fa2 <prvProcessReceivedCommands+0x162>
 8003e86:	a201      	add	r2, pc, #4	@ (adr r2, 8003e8c <prvProcessReceivedCommands+0x4c>)
 8003e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8c:	08003eb1 	.word	0x08003eb1
 8003e90:	08003eb1 	.word	0x08003eb1
 8003e94:	08003f19 	.word	0x08003f19
 8003e98:	08003f2d 	.word	0x08003f2d
 8003e9c:	08003f79 	.word	0x08003f79
 8003ea0:	08003eb1 	.word	0x08003eb1
 8003ea4:	08003eb1 	.word	0x08003eb1
 8003ea8:	08003f19 	.word	0x08003f19
 8003eac:	08003f2d 	.word	0x08003f2d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	18d1      	adds	r1, r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	69f8      	ldr	r0, [r7, #28]
 8003ed0:	f7ff ff74 	bl	8003dbc <prvInsertTimerInActiveList>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d065      	beq.n	8003fa6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d009      	beq.n	8003efc <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	4413      	add	r3, r2
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	69f8      	ldr	r0, [r7, #28]
 8003ef6:	f7ff fe6b 	bl	8003bd0 <prvReloadTimer>
 8003efa:	e008      	b.n	8003f0e <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	69f8      	ldr	r0, [r7, #28]
 8003f14:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003f16:	e046      	b.n	8003fa6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8003f2a:	e03d      	b.n	8003fa8 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10b      	bne.n	8003f64 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	617b      	str	r3, [r7, #20]
}
 8003f5e:	bf00      	nop
 8003f60:	bf00      	nop
 8003f62:	e7fd      	b.n	8003f60 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	699a      	ldr	r2, [r3, #24]
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	18d1      	adds	r1, r2, r3
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	69f8      	ldr	r0, [r7, #28]
 8003f72:	f7ff ff23 	bl	8003dbc <prvInsertTimerInActiveList>
                        break;
 8003f76:	e017      	b.n	8003fa8 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d103      	bne.n	8003f8e <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8003f86:	69f8      	ldr	r0, [r7, #28]
 8003f88:	f000 fbdc 	bl	8004744 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003f8c:	e00c      	b.n	8003fa8 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8003fa0:	e002      	b.n	8003fa8 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003fa2:	bf00      	nop
 8003fa4:	e000      	b.n	8003fa8 <prvProcessReceivedCommands+0x168>
                        break;
 8003fa6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003fa8:	4b08      	ldr	r3, [pc, #32]	@ (8003fcc <prvProcessReceivedCommands+0x18c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f107 0108 	add.w	r1, r7, #8
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fd ff60 	bl	8001e78 <xQueueReceive>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f47f af4a 	bne.w	8003e54 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	3720      	adds	r7, #32
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	200001a8 	.word	0x200001a8

08003fd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fd6:	e009      	b.n	8003fec <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8004014 <prvSwitchTimerLists+0x44>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003fe2:	f04f 31ff 	mov.w	r1, #4294967295
 8003fe6:	6838      	ldr	r0, [r7, #0]
 8003fe8:	f7ff fe14 	bl	8003c14 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fec:	4b09      	ldr	r3, [pc, #36]	@ (8004014 <prvSwitchTimerLists+0x44>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003ff6:	4b07      	ldr	r3, [pc, #28]	@ (8004014 <prvSwitchTimerLists+0x44>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003ffc:	4b06      	ldr	r3, [pc, #24]	@ (8004018 <prvSwitchTimerLists+0x48>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a04      	ldr	r2, [pc, #16]	@ (8004014 <prvSwitchTimerLists+0x44>)
 8004002:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004004:	4a04      	ldr	r2, [pc, #16]	@ (8004018 <prvSwitchTimerLists+0x48>)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6013      	str	r3, [r2, #0]
    }
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	200001a0 	.word	0x200001a0
 8004018:	200001a4 	.word	0x200001a4

0800401c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004020:	f000 f962 	bl	80042e8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004024:	4b0d      	ldr	r3, [pc, #52]	@ (800405c <prvCheckForValidListAndQueue+0x40>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d113      	bne.n	8004054 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 800402c:	480c      	ldr	r0, [pc, #48]	@ (8004060 <prvCheckForValidListAndQueue+0x44>)
 800402e:	f7fd fbde 	bl	80017ee <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004032:	480c      	ldr	r0, [pc, #48]	@ (8004064 <prvCheckForValidListAndQueue+0x48>)
 8004034:	f7fd fbdb 	bl	80017ee <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004038:	4b0b      	ldr	r3, [pc, #44]	@ (8004068 <prvCheckForValidListAndQueue+0x4c>)
 800403a:	4a09      	ldr	r2, [pc, #36]	@ (8004060 <prvCheckForValidListAndQueue+0x44>)
 800403c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800403e:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <prvCheckForValidListAndQueue+0x50>)
 8004040:	4a08      	ldr	r2, [pc, #32]	@ (8004064 <prvCheckForValidListAndQueue+0x48>)
 8004042:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8004044:	2200      	movs	r2, #0
 8004046:	210c      	movs	r1, #12
 8004048:	200a      	movs	r0, #10
 800404a:	f7fd fcef 	bl	8001a2c <xQueueGenericCreate>
 800404e:	4603      	mov	r3, r0
 8004050:	4a02      	ldr	r2, [pc, #8]	@ (800405c <prvCheckForValidListAndQueue+0x40>)
 8004052:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004054:	f000 f978 	bl	8004348 <vPortExitCritical>
    }
 8004058:	bf00      	nop
 800405a:	bd80      	pop	{r7, pc}
 800405c:	200001a8 	.word	0x200001a8
 8004060:	20000178 	.word	0x20000178
 8004064:	2000018c 	.word	0x2000018c
 8004068:	200001a0 	.word	0x200001a0
 800406c:	200001a4 	.word	0x200001a4

08004070 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3b04      	subs	r3, #4
 8004080:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004088:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3b04      	subs	r3, #4
 800408e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f023 0201 	bic.w	r2, r3, #1
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3b04      	subs	r3, #4
 800409e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80040a0:	4a08      	ldr	r2, [pc, #32]	@ (80040c4 <pxPortInitialiseStack+0x54>)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3b14      	subs	r3, #20
 80040aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3b20      	subs	r3, #32
 80040b6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80040b8:	68fb      	ldr	r3, [r7, #12]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr
 80040c4:	080040c9 	.word	0x080040c9

080040c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80040d2:	4b12      	ldr	r3, [pc, #72]	@ (800411c <prvTaskExitError+0x54>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040da:	d00b      	beq.n	80040f4 <prvTaskExitError+0x2c>
    __asm volatile
 80040dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	60fb      	str	r3, [r7, #12]
}
 80040ee:	bf00      	nop
 80040f0:	bf00      	nop
 80040f2:	e7fd      	b.n	80040f0 <prvTaskExitError+0x28>
    __asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	60bb      	str	r3, [r7, #8]
}
 8004106:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004108:	bf00      	nop
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0fc      	beq.n	800410a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr
 800411c:	20000030 	.word	0x20000030

08004120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004120:	4b07      	ldr	r3, [pc, #28]	@ (8004140 <pxCurrentTCBConst2>)
 8004122:	6819      	ldr	r1, [r3, #0]
 8004124:	6808      	ldr	r0, [r1, #0]
 8004126:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800412a:	f380 8809 	msr	PSP, r0
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f04f 0000 	mov.w	r0, #0
 8004136:	f380 8811 	msr	BASEPRI, r0
 800413a:	f04e 0e0d 	orr.w	lr, lr, #13
 800413e:	4770      	bx	lr

08004140 <pxCurrentTCBConst2>:
 8004140:	20000074 	.word	0x20000074
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop

08004148 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8004148:	4806      	ldr	r0, [pc, #24]	@ (8004164 <prvPortStartFirstTask+0x1c>)
 800414a:	6800      	ldr	r0, [r0, #0]
 800414c:	6800      	ldr	r0, [r0, #0]
 800414e:	f380 8808 	msr	MSP, r0
 8004152:	b662      	cpsie	i
 8004154:	b661      	cpsie	f
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	df00      	svc	0
 8004160:	bf00      	nop
 8004162:	0000      	.short	0x0000
 8004164:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004168:	bf00      	nop
 800416a:	bf00      	nop

0800416c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08a      	sub	sp, #40	@ 0x28
 8004170:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8004172:	4b54      	ldr	r3, [pc, #336]	@ (80042c4 <xPortStartScheduler+0x158>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417a:	332c      	adds	r3, #44	@ 0x2c
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a52      	ldr	r2, [pc, #328]	@ (80042c8 <xPortStartScheduler+0x15c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00b      	beq.n	800419c <xPortStartScheduler+0x30>
    __asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	61fb      	str	r3, [r7, #28]
}
 8004196:	bf00      	nop
 8004198:	bf00      	nop
 800419a:	e7fd      	b.n	8004198 <xPortStartScheduler+0x2c>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 800419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419e:	3338      	adds	r3, #56	@ 0x38
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a4a      	ldr	r2, [pc, #296]	@ (80042cc <xPortStartScheduler+0x160>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00b      	beq.n	80041c0 <xPortStartScheduler+0x54>
    __asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	61bb      	str	r3, [r7, #24]
}
 80041ba:	bf00      	nop
 80041bc:	bf00      	nop
 80041be:	e7fd      	b.n	80041bc <xPortStartScheduler+0x50>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041c4:	4b42      	ldr	r3, [pc, #264]	@ (80042d0 <xPortStartScheduler+0x164>)
 80041c6:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	22ff      	movs	r2, #255	@ 0xff
 80041d4:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	4b3a      	ldr	r3, [pc, #232]	@ (80042d4 <xPortStartScheduler+0x168>)
 80041ea:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80041ec:	4b39      	ldr	r3, [pc, #228]	@ (80042d4 <xPortStartScheduler+0x168>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10b      	bne.n	800420c <xPortStartScheduler+0xa0>
    __asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	617b      	str	r3, [r7, #20]
}
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	e7fd      	b.n	8004208 <xPortStartScheduler+0x9c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004216:	2b00      	cmp	r3, #0
 8004218:	d013      	beq.n	8004242 <xPortStartScheduler+0xd6>
    __asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	613b      	str	r3, [r7, #16]
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	e7fd      	b.n	800422e <xPortStartScheduler+0xc2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	3301      	adds	r3, #1
 8004236:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004238:	79fb      	ldrb	r3, [r7, #7]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	b2db      	uxtb	r3, r3
 8004240:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800424a:	2b80      	cmp	r3, #128	@ 0x80
 800424c:	d0f1      	beq.n	8004232 <xPortStartScheduler+0xc6>
        }

        if( ulImplementedPrioBits == 8 )
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b08      	cmp	r3, #8
 8004252:	d103      	bne.n	800425c <xPortStartScheduler+0xf0>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8004254:	4b20      	ldr	r3, [pc, #128]	@ (80042d8 <xPortStartScheduler+0x16c>)
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	e004      	b.n	8004266 <xPortStartScheduler+0xfa>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f1c3 0307 	rsb	r3, r3, #7
 8004262:	4a1d      	ldr	r2, [pc, #116]	@ (80042d8 <xPortStartScheduler+0x16c>)
 8004264:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004266:	4b1c      	ldr	r3, [pc, #112]	@ (80042d8 <xPortStartScheduler+0x16c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	021b      	lsls	r3, r3, #8
 800426c:	4a1a      	ldr	r2, [pc, #104]	@ (80042d8 <xPortStartScheduler+0x16c>)
 800426e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004270:	4b19      	ldr	r3, [pc, #100]	@ (80042d8 <xPortStartScheduler+0x16c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004278:	4a17      	ldr	r2, [pc, #92]	@ (80042d8 <xPortStartScheduler+0x16c>)
 800427a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	b2da      	uxtb	r2, r3
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004284:	4b15      	ldr	r3, [pc, #84]	@ (80042dc <xPortStartScheduler+0x170>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a14      	ldr	r2, [pc, #80]	@ (80042dc <xPortStartScheduler+0x170>)
 800428a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800428e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004290:	4b12      	ldr	r3, [pc, #72]	@ (80042dc <xPortStartScheduler+0x170>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a11      	ldr	r2, [pc, #68]	@ (80042dc <xPortStartScheduler+0x170>)
 8004296:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800429a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800429c:	4b10      	ldr	r3, [pc, #64]	@ (80042e0 <xPortStartScheduler+0x174>)
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80042a2:	f000 f8c3 	bl	800442c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80042a6:	4b0f      	ldr	r3, [pc, #60]	@ (80042e4 <xPortStartScheduler+0x178>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80042ac:	f7ff ff4c 	bl	8004148 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80042b0:	f7fe fc5a 	bl	8002b68 <vTaskSwitchContext>
    prvTaskExitError();
 80042b4:	f7ff ff08 	bl	80040c8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3728      	adds	r7, #40	@ 0x28
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	e000ed08 	.word	0xe000ed08
 80042c8:	08004121 	.word	0x08004121
 80042cc:	080043a1 	.word	0x080043a1
 80042d0:	e000e400 	.word	0xe000e400
 80042d4:	200001b4 	.word	0x200001b4
 80042d8:	200001b8 	.word	0x200001b8
 80042dc:	e000ed20 	.word	0xe000ed20
 80042e0:	e000ed1c 	.word	0xe000ed1c
 80042e4:	20000030 	.word	0x20000030

080042e8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
    __asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	607b      	str	r3, [r7, #4]
}
 8004300:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004302:	4b0f      	ldr	r3, [pc, #60]	@ (8004340 <vPortEnterCritical+0x58>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3301      	adds	r3, #1
 8004308:	4a0d      	ldr	r2, [pc, #52]	@ (8004340 <vPortEnterCritical+0x58>)
 800430a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800430c:	4b0c      	ldr	r3, [pc, #48]	@ (8004340 <vPortEnterCritical+0x58>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d110      	bne.n	8004336 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004314:	4b0b      	ldr	r3, [pc, #44]	@ (8004344 <vPortEnterCritical+0x5c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <vPortEnterCritical+0x4e>
    __asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	603b      	str	r3, [r7, #0]
}
 8004330:	bf00      	nop
 8004332:	bf00      	nop
 8004334:	e7fd      	b.n	8004332 <vPortEnterCritical+0x4a>
    }
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr
 8004340:	20000030 	.word	0x20000030
 8004344:	e000ed04 	.word	0xe000ed04

08004348 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800434e:	4b12      	ldr	r3, [pc, #72]	@ (8004398 <vPortExitCritical+0x50>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10b      	bne.n	800436e <vPortExitCritical+0x26>
    __asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	607b      	str	r3, [r7, #4]
}
 8004368:	bf00      	nop
 800436a:	bf00      	nop
 800436c:	e7fd      	b.n	800436a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800436e:	4b0a      	ldr	r3, [pc, #40]	@ (8004398 <vPortExitCritical+0x50>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3b01      	subs	r3, #1
 8004374:	4a08      	ldr	r2, [pc, #32]	@ (8004398 <vPortExitCritical+0x50>)
 8004376:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004378:	4b07      	ldr	r3, [pc, #28]	@ (8004398 <vPortExitCritical+0x50>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d105      	bne.n	800438c <vPortExitCritical+0x44>
 8004380:	2300      	movs	r3, #0
 8004382:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	f383 8811 	msr	BASEPRI, r3
}
 800438a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000030 	.word	0x20000030
 800439c:	00000000 	.word	0x00000000

080043a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80043a0:	f3ef 8009 	mrs	r0, PSP
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	4b0d      	ldr	r3, [pc, #52]	@ (80043e0 <pxCurrentTCBConst>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80043b0:	6010      	str	r0, [r2, #0]
 80043b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80043b6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80043ba:	f380 8811 	msr	BASEPRI, r0
 80043be:	f7fe fbd3 	bl	8002b68 <vTaskSwitchContext>
 80043c2:	f04f 0000 	mov.w	r0, #0
 80043c6:	f380 8811 	msr	BASEPRI, r0
 80043ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80043ce:	6819      	ldr	r1, [r3, #0]
 80043d0:	6808      	ldr	r0, [r1, #0]
 80043d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80043d6:	f380 8809 	msr	PSP, r0
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	4770      	bx	lr

080043e0 <pxCurrentTCBConst>:
 80043e0:	20000074 	.word	0x20000074
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop

080043e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
    __asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	607b      	str	r3, [r7, #4]
}
 8004400:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004402:	f7fe fa97 	bl	8002934 <xTaskIncrementTick>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800440c:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <SysTick_Handler+0x40>)
 800440e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	2300      	movs	r3, #0
 8004416:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	f383 8811 	msr	BASEPRI, r3
}
 800441e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	e000ed04 	.word	0xe000ed04

0800442c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004430:	4b07      	ldr	r3, [pc, #28]	@ (8004450 <vPortSetupTimerInterrupt+0x24>)
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004436:	4b07      	ldr	r3, [pc, #28]	@ (8004454 <vPortSetupTimerInterrupt+0x28>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800443c:	4b06      	ldr	r3, [pc, #24]	@ (8004458 <vPortSetupTimerInterrupt+0x2c>)
 800443e:	4a07      	ldr	r2, [pc, #28]	@ (800445c <vPortSetupTimerInterrupt+0x30>)
 8004440:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004442:	4b03      	ldr	r3, [pc, #12]	@ (8004450 <vPortSetupTimerInterrupt+0x24>)
 8004444:	2207      	movs	r2, #7
 8004446:	601a      	str	r2, [r3, #0]
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr
 8004450:	e000e010 	.word	0xe000e010
 8004454:	e000e018 	.word	0xe000e018
 8004458:	e000e014 	.word	0xe000e014
 800445c:	0001193f 	.word	0x0001193f

08004460 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004466:	f3ef 8305 	mrs	r3, IPSR
 800446a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b0f      	cmp	r3, #15
 8004470:	d915      	bls.n	800449e <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004472:	4a17      	ldr	r2, [pc, #92]	@ (80044d0 <vPortValidateInterruptPriority+0x70>)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800447c:	4b15      	ldr	r3, [pc, #84]	@ (80044d4 <vPortValidateInterruptPriority+0x74>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	7afa      	ldrb	r2, [r7, #11]
 8004482:	429a      	cmp	r2, r3
 8004484:	d20b      	bcs.n	800449e <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	607b      	str	r3, [r7, #4]
}
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	e7fd      	b.n	800449a <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800449e:	4b0e      	ldr	r3, [pc, #56]	@ (80044d8 <vPortValidateInterruptPriority+0x78>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80044a6:	4b0d      	ldr	r3, [pc, #52]	@ (80044dc <vPortValidateInterruptPriority+0x7c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d90b      	bls.n	80044c6 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	603b      	str	r3, [r7, #0]
}
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	e7fd      	b.n	80044c2 <vPortValidateInterruptPriority+0x62>
    }
 80044c6:	bf00      	nop
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr
 80044d0:	e000e3f0 	.word	0xe000e3f0
 80044d4:	200001b4 	.word	0x200001b4
 80044d8:	e000ed0c 	.word	0xe000ed0c
 80044dc:	200001b8 	.word	0x200001b8

080044e0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08e      	sub	sp, #56	@ 0x38
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d022      	beq.n	8004538 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80044f2:	2308      	movs	r3, #8
 80044f4:	43db      	mvns	r3, r3
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d81b      	bhi.n	8004534 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80044fc:	2208      	movs	r2, #8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4413      	add	r3, r2
 8004502:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	2b00      	cmp	r3, #0
 800450c:	d014      	beq.n	8004538 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	f1c3 0308 	rsb	r3, r3, #8
 8004518:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800451a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451c:	43db      	mvns	r3, r3
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	429a      	cmp	r2, r3
 8004522:	d804      	bhi.n	800452e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004528:	4413      	add	r3, r2
 800452a:	607b      	str	r3, [r7, #4]
 800452c:	e004      	b.n	8004538 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	607b      	str	r3, [r7, #4]
 8004532:	e001      	b.n	8004538 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8004538:	f7fe f8ce 	bl	80026d8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800453c:	4b7a      	ldr	r3, [pc, #488]	@ (8004728 <pvPortMalloc+0x248>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8004544:	f000 f978 	bl	8004838 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f2c0 80d3 	blt.w	80046f6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80cf 	beq.w	80046f6 <pvPortMalloc+0x216>
 8004558:	4b74      	ldr	r3, [pc, #464]	@ (800472c <pvPortMalloc+0x24c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	429a      	cmp	r2, r3
 8004560:	f200 80c9 	bhi.w	80046f6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004564:	4b72      	ldr	r3, [pc, #456]	@ (8004730 <pvPortMalloc+0x250>)
 8004566:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8004568:	4b71      	ldr	r3, [pc, #452]	@ (8004730 <pvPortMalloc+0x250>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800456e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004570:	4a70      	ldr	r2, [pc, #448]	@ (8004734 <pvPortMalloc+0x254>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d305      	bcc.n	8004582 <pvPortMalloc+0xa2>
 8004576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004578:	4a6f      	ldr	r2, [pc, #444]	@ (8004738 <pvPortMalloc+0x258>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d801      	bhi.n	8004582 <pvPortMalloc+0xa2>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <pvPortMalloc+0xa4>
 8004582:	2300      	movs	r3, #0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d129      	bne.n	80045dc <pvPortMalloc+0xfc>
    __asm volatile
 8004588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	623b      	str	r3, [r7, #32]
}
 800459a:	bf00      	nop
 800459c:	bf00      	nop
 800459e:	e7fd      	b.n	800459c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80045a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80045a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80045aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ac:	4a61      	ldr	r2, [pc, #388]	@ (8004734 <pvPortMalloc+0x254>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d305      	bcc.n	80045be <pvPortMalloc+0xde>
 80045b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b4:	4a60      	ldr	r2, [pc, #384]	@ (8004738 <pvPortMalloc+0x258>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d801      	bhi.n	80045be <pvPortMalloc+0xde>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <pvPortMalloc+0xe0>
 80045be:	2300      	movs	r3, #0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10b      	bne.n	80045dc <pvPortMalloc+0xfc>
    __asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	61fb      	str	r3, [r7, #28]
}
 80045d6:	bf00      	nop
 80045d8:	bf00      	nop
 80045da:	e7fd      	b.n	80045d8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80045dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d903      	bls.n	80045ee <pvPortMalloc+0x10e>
 80045e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1d8      	bne.n	80045a0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80045ee:	4b4e      	ldr	r3, [pc, #312]	@ (8004728 <pvPortMalloc+0x248>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d07e      	beq.n	80046f6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80045f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2208      	movs	r2, #8
 80045fe:	4413      	add	r3, r2
 8004600:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8004602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004604:	4a4b      	ldr	r2, [pc, #300]	@ (8004734 <pvPortMalloc+0x254>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d305      	bcc.n	8004616 <pvPortMalloc+0x136>
 800460a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460c:	4a4a      	ldr	r2, [pc, #296]	@ (8004738 <pvPortMalloc+0x258>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d801      	bhi.n	8004616 <pvPortMalloc+0x136>
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <pvPortMalloc+0x138>
 8004616:	2300      	movs	r3, #0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10b      	bne.n	8004634 <pvPortMalloc+0x154>
    __asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	61bb      	str	r3, [r7, #24]
}
 800462e:	bf00      	nop
 8004630:	bf00      	nop
 8004632:	e7fd      	b.n	8004630 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800463c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	429a      	cmp	r2, r3
 8004644:	d90b      	bls.n	800465e <pvPortMalloc+0x17e>
    __asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	617b      	str	r3, [r7, #20]
}
 8004658:	bf00      	nop
 800465a:	bf00      	nop
 800465c:	e7fd      	b.n	800465a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800465e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	1ad2      	subs	r2, r2, r3
 8004666:	2308      	movs	r3, #8
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	429a      	cmp	r2, r3
 800466c:	d924      	bls.n	80046b8 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800466e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4413      	add	r3, r2
 8004674:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <pvPortMalloc+0x1b8>
    __asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	613b      	str	r3, [r7, #16]
}
 8004692:	bf00      	nop
 8004694:	bf00      	nop
 8004696:	e7fd      	b.n	8004694 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	1ad2      	subs	r2, r2, r3
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80046a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80046aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80046b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046b8:	4b1c      	ldr	r3, [pc, #112]	@ (800472c <pvPortMalloc+0x24c>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	4a1a      	ldr	r2, [pc, #104]	@ (800472c <pvPortMalloc+0x24c>)
 80046c4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046c6:	4b19      	ldr	r3, [pc, #100]	@ (800472c <pvPortMalloc+0x24c>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4b1c      	ldr	r3, [pc, #112]	@ (800473c <pvPortMalloc+0x25c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d203      	bcs.n	80046da <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046d2:	4b16      	ldr	r3, [pc, #88]	@ (800472c <pvPortMalloc+0x24c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a19      	ldr	r2, [pc, #100]	@ (800473c <pvPortMalloc+0x25c>)
 80046d8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80046da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80046e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80046e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80046ec:	4b14      	ldr	r3, [pc, #80]	@ (8004740 <pvPortMalloc+0x260>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	4a13      	ldr	r2, [pc, #76]	@ (8004740 <pvPortMalloc+0x260>)
 80046f4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80046f6:	f7fd fffd 	bl	80026f4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00b      	beq.n	800471c <pvPortMalloc+0x23c>
    __asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	60fb      	str	r3, [r7, #12]
}
 8004716:	bf00      	nop
 8004718:	bf00      	nop
 800471a:	e7fd      	b.n	8004718 <pvPortMalloc+0x238>
    return pvReturn;
 800471c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800471e:	4618      	mov	r0, r3
 8004720:	3738      	adds	r7, #56	@ 0x38
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	200031c4 	.word	0x200031c4
 800472c:	200031c8 	.word	0x200031c8
 8004730:	200031bc 	.word	0x200031bc
 8004734:	200001bc 	.word	0x200001bc
 8004738:	200031bb 	.word	0x200031bb
 800473c:	200031cc 	.word	0x200031cc
 8004740:	200031d0 	.word	0x200031d0

08004744 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d064      	beq.n	8004820 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004756:	2308      	movs	r3, #8
 8004758:	425b      	negs	r3, r3
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	4413      	add	r3, r2
 800475e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	4a30      	ldr	r2, [pc, #192]	@ (8004828 <vPortFree+0xe4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d305      	bcc.n	8004778 <vPortFree+0x34>
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	4a2f      	ldr	r2, [pc, #188]	@ (800482c <vPortFree+0xe8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d801      	bhi.n	8004778 <vPortFree+0x34>
 8004774:	2301      	movs	r3, #1
 8004776:	e000      	b.n	800477a <vPortFree+0x36>
 8004778:	2300      	movs	r3, #0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10b      	bne.n	8004796 <vPortFree+0x52>
    __asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	617b      	str	r3, [r7, #20]
}
 8004790:	bf00      	nop
 8004792:	bf00      	nop
 8004794:	e7fd      	b.n	8004792 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	db0b      	blt.n	80047b6 <vPortFree+0x72>
    __asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	613b      	str	r3, [r7, #16]
}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	e7fd      	b.n	80047b2 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00b      	beq.n	80047d6 <vPortFree+0x92>
    __asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	60fb      	str	r3, [r7, #12]
}
 80047d0:	bf00      	nop
 80047d2:	bf00      	nop
 80047d4:	e7fd      	b.n	80047d2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	0fdb      	lsrs	r3, r3, #31
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d01c      	beq.n	8004820 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d118      	bne.n	8004820 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80047fa:	f7fd ff6d 	bl	80026d8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <vPortFree+0xec>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4413      	add	r3, r2
 8004808:	4a09      	ldr	r2, [pc, #36]	@ (8004830 <vPortFree+0xec>)
 800480a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800480c:	69b8      	ldr	r0, [r7, #24]
 800480e:	f000 f86d 	bl	80048ec <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004812:	4b08      	ldr	r3, [pc, #32]	@ (8004834 <vPortFree+0xf0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3301      	adds	r3, #1
 8004818:	4a06      	ldr	r2, [pc, #24]	@ (8004834 <vPortFree+0xf0>)
 800481a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800481c:	f7fd ff6a 	bl	80026f4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004820:	bf00      	nop
 8004822:	3720      	adds	r7, #32
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	200001bc 	.word	0x200001bc
 800482c:	200031bb 	.word	0x200031bb
 8004830:	200031c8 	.word	0x200031c8
 8004834:	200031d4 	.word	0x200031d4

08004838 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800483e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004842:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004844:	4b24      	ldr	r3, [pc, #144]	@ (80048d8 <prvHeapInit+0xa0>)
 8004846:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00c      	beq.n	800486c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	3307      	adds	r3, #7
 8004856:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0307 	bic.w	r3, r3, #7
 800485e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	4a1c      	ldr	r2, [pc, #112]	@ (80048d8 <prvHeapInit+0xa0>)
 8004868:	4413      	add	r3, r2
 800486a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4a1b      	ldr	r2, [pc, #108]	@ (80048dc <prvHeapInit+0xa4>)
 8004870:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004872:	4b1a      	ldr	r3, [pc, #104]	@ (80048dc <prvHeapInit+0xa4>)
 8004874:	2200      	movs	r2, #0
 8004876:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4413      	add	r3, r2
 800487e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004880:	2208      	movs	r2, #8
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	1a9b      	subs	r3, r3, r2
 8004886:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f023 0307 	bic.w	r3, r3, #7
 800488e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a13      	ldr	r2, [pc, #76]	@ (80048e0 <prvHeapInit+0xa8>)
 8004894:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004896:	4b12      	ldr	r3, [pc, #72]	@ (80048e0 <prvHeapInit+0xa8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2200      	movs	r2, #0
 800489c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800489e:	4b10      	ldr	r3, [pc, #64]	@ (80048e0 <prvHeapInit+0xa8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	1ad2      	subs	r2, r2, r3
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80048b4:	4b0a      	ldr	r3, [pc, #40]	@ (80048e0 <prvHeapInit+0xa8>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	4a08      	ldr	r2, [pc, #32]	@ (80048e4 <prvHeapInit+0xac>)
 80048c2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	4a07      	ldr	r2, [pc, #28]	@ (80048e8 <prvHeapInit+0xb0>)
 80048ca:	6013      	str	r3, [r2, #0]
}
 80048cc:	bf00      	nop
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	200001bc 	.word	0x200001bc
 80048dc:	200031bc 	.word	0x200031bc
 80048e0:	200031c4 	.word	0x200031c4
 80048e4:	200031cc 	.word	0x200031cc
 80048e8:	200031c8 	.word	0x200031c8

080048ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80048f4:	4b36      	ldr	r3, [pc, #216]	@ (80049d0 <prvInsertBlockIntoFreeList+0xe4>)
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	e002      	b.n	8004900 <prvInsertBlockIntoFreeList+0x14>
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	429a      	cmp	r2, r3
 8004908:	d8f7      	bhi.n	80048fa <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	4a30      	ldr	r2, [pc, #192]	@ (80049d0 <prvInsertBlockIntoFreeList+0xe4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d018      	beq.n	8004944 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	4a2f      	ldr	r2, [pc, #188]	@ (80049d4 <prvInsertBlockIntoFreeList+0xe8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d305      	bcc.n	8004926 <prvInsertBlockIntoFreeList+0x3a>
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	4a2e      	ldr	r2, [pc, #184]	@ (80049d8 <prvInsertBlockIntoFreeList+0xec>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d801      	bhi.n	8004926 <prvInsertBlockIntoFreeList+0x3a>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <prvInsertBlockIntoFreeList+0x3c>
 8004926:	2300      	movs	r3, #0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10b      	bne.n	8004944 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800492c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	60fb      	str	r3, [r7, #12]
}
 800493e:	bf00      	nop
 8004940:	bf00      	nop
 8004942:	e7fd      	b.n	8004940 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4413      	add	r3, r2
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	429a      	cmp	r2, r3
 8004954:	d108      	bne.n	8004968 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	441a      	add	r2, r3
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	441a      	add	r2, r3
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d118      	bne.n	80049ae <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	4b16      	ldr	r3, [pc, #88]	@ (80049dc <prvInsertBlockIntoFreeList+0xf0>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d00d      	beq.n	80049a4 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	441a      	add	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	e008      	b.n	80049b6 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80049a4:	4b0d      	ldr	r3, [pc, #52]	@ (80049dc <prvInsertBlockIntoFreeList+0xf0>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	e003      	b.n	80049b6 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d002      	beq.n	80049c4 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80049c4:	bf00      	nop
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	200031bc 	.word	0x200031bc
 80049d4:	200001bc 	.word	0x200001bc
 80049d8:	200031bb 	.word	0x200031bb
 80049dc:	200031c4 	.word	0x200031c4

080049e0 <memset>:
 80049e0:	4603      	mov	r3, r0
 80049e2:	4402      	add	r2, r0
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d100      	bne.n	80049ea <memset+0xa>
 80049e8:	4770      	bx	lr
 80049ea:	f803 1b01 	strb.w	r1, [r3], #1
 80049ee:	e7f9      	b.n	80049e4 <memset+0x4>

080049f0 <__libc_init_array>:
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	2600      	movs	r6, #0
 80049f4:	4d0c      	ldr	r5, [pc, #48]	@ (8004a28 <__libc_init_array+0x38>)
 80049f6:	4c0d      	ldr	r4, [pc, #52]	@ (8004a2c <__libc_init_array+0x3c>)
 80049f8:	1b64      	subs	r4, r4, r5
 80049fa:	10a4      	asrs	r4, r4, #2
 80049fc:	42a6      	cmp	r6, r4
 80049fe:	d109      	bne.n	8004a14 <__libc_init_array+0x24>
 8004a00:	f000 f828 	bl	8004a54 <_init>
 8004a04:	2600      	movs	r6, #0
 8004a06:	4d0a      	ldr	r5, [pc, #40]	@ (8004a30 <__libc_init_array+0x40>)
 8004a08:	4c0a      	ldr	r4, [pc, #40]	@ (8004a34 <__libc_init_array+0x44>)
 8004a0a:	1b64      	subs	r4, r4, r5
 8004a0c:	10a4      	asrs	r4, r4, #2
 8004a0e:	42a6      	cmp	r6, r4
 8004a10:	d105      	bne.n	8004a1e <__libc_init_array+0x2e>
 8004a12:	bd70      	pop	{r4, r5, r6, pc}
 8004a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a18:	4798      	blx	r3
 8004a1a:	3601      	adds	r6, #1
 8004a1c:	e7ee      	b.n	80049fc <__libc_init_array+0xc>
 8004a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a22:	4798      	blx	r3
 8004a24:	3601      	adds	r6, #1
 8004a26:	e7f2      	b.n	8004a0e <__libc_init_array+0x1e>
 8004a28:	08004b70 	.word	0x08004b70
 8004a2c:	08004b70 	.word	0x08004b70
 8004a30:	08004b70 	.word	0x08004b70
 8004a34:	08004b74 	.word	0x08004b74

08004a38 <memcpy>:
 8004a38:	440a      	add	r2, r1
 8004a3a:	4291      	cmp	r1, r2
 8004a3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a40:	d100      	bne.n	8004a44 <memcpy+0xc>
 8004a42:	4770      	bx	lr
 8004a44:	b510      	push	{r4, lr}
 8004a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a4a:	4291      	cmp	r1, r2
 8004a4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a50:	d1f9      	bne.n	8004a46 <memcpy+0xe>
 8004a52:	bd10      	pop	{r4, pc}

08004a54 <_init>:
 8004a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a56:	bf00      	nop
 8004a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5a:	bc08      	pop	{r3}
 8004a5c:	469e      	mov	lr, r3
 8004a5e:	4770      	bx	lr

08004a60 <_fini>:
 8004a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a62:	bf00      	nop
 8004a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a66:	bc08      	pop	{r3}
 8004a68:	469e      	mov	lr, r3
 8004a6a:	4770      	bx	lr
