
001_Task_Create_Delete_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002170  08000130  08000130  00001130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080022a0  080022a0  000032a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022d4  080022d4  00004008  2**0
                  CONTENTS
  4 .ARM          00000000  080022d4  080022d4  00004008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022d4  080022d4  00004008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022d4  080022d4  000032d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022d8  080022d8  000032d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  080022dc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000315c  20000008  080022e4  00004008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003164  080022e4  00004164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d24  00000000  00000000  00004031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e81  00000000  00000000  00008d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000570  00000000  00000000  00009bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000437  00000000  00000000  0000a148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003486  00000000  00000000  0000a57f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005ef7  00000000  00000000  0000da05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00015ef1  00000000  00000000  000138fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000297ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015b8  00000000  00000000  00029830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0002ade8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08002288 	.word	0x08002288

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08002288 	.word	0x08002288

08000170 <SystemClock_Config>:

#include <stdint.h>
#include "stm32f103Driver.h"


void SystemClock_Config(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
      //enable HSE (8 MHz external crystal)
      RCC->CR |= (1<<16);
 8000174:	4b20      	ldr	r3, [pc, #128]	@ (80001f8 <SystemClock_Config+0x88>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a1f      	ldr	r2, [pc, #124]	@ (80001f8 <SystemClock_Config+0x88>)
 800017a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800017e:	6013      	str	r3, [r2, #0]
      while (!(RCC->CR & (1 << 17)));
 8000180:	bf00      	nop
 8000182:	4b1d      	ldr	r3, [pc, #116]	@ (80001f8 <SystemClock_Config+0x88>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800018a:	2b00      	cmp	r3, #0
 800018c:	d0f9      	beq.n	8000182 <SystemClock_Config+0x12>

      // Set Flash latency for 72 MHz
      FLASH->ACR |= (0x2 << 0) ;//flash latency 2
 800018e:	4b1b      	ldr	r3, [pc, #108]	@ (80001fc <SystemClock_Config+0x8c>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a1a      	ldr	r2, [pc, #104]	@ (80001fc <SystemClock_Config+0x8c>)
 8000194:	f043 0302 	orr.w	r3, r3, #2
 8000198:	6013      	str	r3, [r2, #0]

      // Configure PLL: HSE (8MHz) ×9 = 72 MHz
      RCC->CFGR |=  (0x1 << 16) |(0x7 << 18); //HSE as PLL input| PLL multiplier ×9
 800019a:	4b17      	ldr	r3, [pc, #92]	@ (80001f8 <SystemClock_Config+0x88>)
 800019c:	685b      	ldr	r3, [r3, #4]
 800019e:	4a16      	ldr	r2, [pc, #88]	@ (80001f8 <SystemClock_Config+0x88>)
 80001a0:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 80001a4:	6053      	str	r3, [r2, #4]

    // Enable PLL and wait until ready
    RCC->CR |= (1 << 24);   // PLL enable
 80001a6:	4b14      	ldr	r3, [pc, #80]	@ (80001f8 <SystemClock_Config+0x88>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a13      	ldr	r2, [pc, #76]	@ (80001f8 <SystemClock_Config+0x88>)
 80001ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001b0:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & (1 << 25)  )); // PLL ready flag
 80001b2:	bf00      	nop
 80001b4:	4b10      	ldr	r3, [pc, #64]	@ (80001f8 <SystemClock_Config+0x88>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d0f9      	beq.n	80001b4 <SystemClock_Config+0x44>

    // Switch to PLL system clock
    RCC->CFGR |=  (0x2 << 0) ; // PLL as system clock
 80001c0:	4b0d      	ldr	r3, [pc, #52]	@ (80001f8 <SystemClock_Config+0x88>)
 80001c2:	685b      	ldr	r3, [r3, #4]
 80001c4:	4a0c      	ldr	r2, [pc, #48]	@ (80001f8 <SystemClock_Config+0x88>)
 80001c6:	f043 0302 	orr.w	r3, r3, #2
 80001ca:	6053      	str	r3, [r2, #4]
    while (((RCC->CFGR) & (0x2 << 2)) != (0x2 << 2));
 80001cc:	bf00      	nop
 80001ce:	4b0a      	ldr	r3, [pc, #40]	@ (80001f8 <SystemClock_Config+0x88>)
 80001d0:	685b      	ldr	r3, [r3, #4]
 80001d2:	f003 0308 	and.w	r3, r3, #8
 80001d6:	2b08      	cmp	r3, #8
 80001d8:	d1f9      	bne.n	80001ce <SystemClock_Config+0x5e>

    // APB1 Prescaler: HCLK divided by 2 (36 MHz for USART2/3)
    RCC->CFGR |= (0x4 << 8); // PPRE1 = 0b100 (HCLK/2)
 80001da:	4b07      	ldr	r3, [pc, #28]	@ (80001f8 <SystemClock_Config+0x88>)
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	4a06      	ldr	r2, [pc, #24]	@ (80001f8 <SystemClock_Config+0x88>)
 80001e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001e4:	6053      	str	r3, [r2, #4]
    // APB2 Prescaler: HCLK not divided (72 MHz for USART1)
    RCC->CFGR |= (0x0 << 11); // PPRE2 = 0b000 (HCLK/1)
 80001e6:	4b04      	ldr	r3, [pc, #16]	@ (80001f8 <SystemClock_Config+0x88>)
 80001e8:	4a03      	ldr	r2, [pc, #12]	@ (80001f8 <SystemClock_Config+0x88>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	6053      	str	r3, [r2, #4]



   }
 80001ee:	bf00      	nop
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	40021000 	.word	0x40021000
 80001fc:	40022000 	.word	0x40022000

08000200 <NVIC_SetPriorityGrouping>:
}



/* Set Priority Grouping */
 void NVIC_SetPriorityGrouping(uint32_t priority_group) {
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
    uint32_t reg_value;

    reg_value  = SCB_AIRCR;
 8000208:	4b0b      	ldr	r3, [pc, #44]	@ (8000238 <NVIC_SetPriorityGrouping+0x38>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	60fb      	str	r3, [r7, #12]
    reg_value &= ~(SCB_AIRCR_VECTKEY_MASK | SCB_AIRCR_PRIGROUP_MASK); // Clear fields
 800020e:	68fa      	ldr	r2, [r7, #12]
 8000210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000214:	4013      	ands	r3, r2
 8000216:	60fb      	str	r3, [r7, #12]
    reg_value |= (SCB_AIRCR_VECTKEY | priority_group);                // Set key and group
 8000218:	687a      	ldr	r2, [r7, #4]
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	4313      	orrs	r3, r2
 800021e:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000222:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000226:	60fb      	str	r3, [r7, #12]
    SCB_AIRCR  = reg_value;
 8000228:	4a03      	ldr	r2, [pc, #12]	@ (8000238 <NVIC_SetPriorityGrouping+0x38>)
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	6013      	str	r3, [r2, #0]
}
 800022e:	bf00      	nop
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	e000ed0c 	.word	0xe000ed0c

0800023c <Select_GPIO>:
/**********************************************************/
/*************************__GPIO__*************************/
/**********************************************************/

// Function to select GPIO port
GPIO_TypeDef* Select_GPIO(uint8_t port) {
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
    switch (port) {
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	3b01      	subs	r3, #1
 800024a:	2b04      	cmp	r3, #4
 800024c:	d816      	bhi.n	800027c <Select_GPIO+0x40>
 800024e:	a201      	add	r2, pc, #4	@ (adr r2, 8000254 <Select_GPIO+0x18>)
 8000250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000254:	08000269 	.word	0x08000269
 8000258:	0800026d 	.word	0x0800026d
 800025c:	08000271 	.word	0x08000271
 8000260:	08000275 	.word	0x08000275
 8000264:	08000279 	.word	0x08000279
        case 1: return GPIOA;
 8000268:	4b07      	ldr	r3, [pc, #28]	@ (8000288 <Select_GPIO+0x4c>)
 800026a:	e008      	b.n	800027e <Select_GPIO+0x42>
        case 2: return GPIOB;
 800026c:	4b07      	ldr	r3, [pc, #28]	@ (800028c <Select_GPIO+0x50>)
 800026e:	e006      	b.n	800027e <Select_GPIO+0x42>
        case 3: return GPIOC;
 8000270:	4b07      	ldr	r3, [pc, #28]	@ (8000290 <Select_GPIO+0x54>)
 8000272:	e004      	b.n	800027e <Select_GPIO+0x42>
        case 4: return GPIOD;
 8000274:	4b07      	ldr	r3, [pc, #28]	@ (8000294 <Select_GPIO+0x58>)
 8000276:	e002      	b.n	800027e <Select_GPIO+0x42>
        case 5: return GPIOE;
 8000278:	4b07      	ldr	r3, [pc, #28]	@ (8000298 <Select_GPIO+0x5c>)
 800027a:	e000      	b.n	800027e <Select_GPIO+0x42>
        default: return 0; // Return NULL for invalid port
 800027c:	2300      	movs	r3, #0
    }
}
 800027e:	4618      	mov	r0, r3
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr
 8000288:	40010800 	.word	0x40010800
 800028c:	40010c00 	.word	0x40010c00
 8000290:	40011000 	.word	0x40011000
 8000294:	40011400 	.word	0x40011400
 8000298:	40011800 	.word	0x40011800

0800029c <Config_GPIO>:




// Function to configure GPIO 
void Config_GPIO(uint8_t port, uint8_t pin, uint8_t mode, uint8_t config) {
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b087      	sub	sp, #28
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4604      	mov	r4, r0
 80002a4:	4608      	mov	r0, r1
 80002a6:	4611      	mov	r1, r2
 80002a8:	461a      	mov	r2, r3
 80002aa:	4623      	mov	r3, r4
 80002ac:	71fb      	strb	r3, [r7, #7]
 80002ae:	4603      	mov	r3, r0
 80002b0:	71bb      	strb	r3, [r7, #6]
 80002b2:	460b      	mov	r3, r1
 80002b4:	717b      	strb	r3, [r7, #5]
 80002b6:	4613      	mov	r3, r2
 80002b8:	713b      	strb	r3, [r7, #4]
    GPIO_TypeDef *GPIOx = Select_GPIO(port);
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ffbd 	bl	800023c <Select_GPIO>
 80002c2:	6178      	str	r0, [r7, #20]
    if (!GPIOx) return; // Return if invalid port
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d031      	beq.n	800032e <Config_GPIO+0x92>

    // Enable the corresponding GPIO clock
    RCC->APB2ENR |= (1 << (port + 1));
 80002ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000338 <Config_GPIO+0x9c>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	79fa      	ldrb	r2, [r7, #7]
 80002d0:	3201      	adds	r2, #1
 80002d2:	2101      	movs	r1, #1
 80002d4:	fa01 f202 	lsl.w	r2, r1, r2
 80002d8:	4611      	mov	r1, r2
 80002da:	4a17      	ldr	r2, [pc, #92]	@ (8000338 <Config_GPIO+0x9c>)
 80002dc:	430b      	orrs	r3, r1
 80002de:	6193      	str	r3, [r2, #24]

    volatile uint32_t *reg = (pin < 8) ? &GPIOx->CRL : &GPIOx->CRH;
 80002e0:	79bb      	ldrb	r3, [r7, #6]
 80002e2:	2b07      	cmp	r3, #7
 80002e4:	d801      	bhi.n	80002ea <Config_GPIO+0x4e>
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	e001      	b.n	80002ee <Config_GPIO+0x52>
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	3304      	adds	r3, #4
 80002ee:	613b      	str	r3, [r7, #16]
    uint8_t pos = (pin % 8) * 4;
 80002f0:	79bb      	ldrb	r3, [r7, #6]
 80002f2:	f003 0307 	and.w	r3, r3, #7
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	73fb      	strb	r3, [r7, #15]

    *reg &= ~(0xF << pos); // Clear bits
 80002fc:	693b      	ldr	r3, [r7, #16]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	7bfa      	ldrb	r2, [r7, #15]
 8000302:	210f      	movs	r1, #15
 8000304:	fa01 f202 	lsl.w	r2, r1, r2
 8000308:	43d2      	mvns	r2, r2
 800030a:	401a      	ands	r2, r3
 800030c:	693b      	ldr	r3, [r7, #16]
 800030e:	601a      	str	r2, [r3, #0]
    *reg |= ((mode) << pos) | ((config) << (pos + 2)); // Set mode and config
 8000310:	693b      	ldr	r3, [r7, #16]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	7979      	ldrb	r1, [r7, #5]
 8000316:	7bfa      	ldrb	r2, [r7, #15]
 8000318:	4091      	lsls	r1, r2
 800031a:	7938      	ldrb	r0, [r7, #4]
 800031c:	7bfa      	ldrb	r2, [r7, #15]
 800031e:	3202      	adds	r2, #2
 8000320:	fa00 f202 	lsl.w	r2, r0, r2
 8000324:	430a      	orrs	r2, r1
 8000326:	431a      	orrs	r2, r3
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	e000      	b.n	8000330 <Config_GPIO+0x94>
    if (!GPIOx) return; // Return if invalid port
 800032e:	bf00      	nop
}
 8000330:	371c      	adds	r7, #28
 8000332:	46bd      	mov	sp, r7
 8000334:	bd90      	pop	{r4, r7, pc}
 8000336:	bf00      	nop
 8000338:	40021000 	.word	0x40021000

0800033c <Write_GPIO>:

//function to write into gpio pin
void Write_GPIO (uint8_t port, uint8_t pin, uint8_t state){
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
 8000346:	460b      	mov	r3, r1
 8000348:	71bb      	strb	r3, [r7, #6]
 800034a:	4613      	mov	r3, r2
 800034c:	717b      	strb	r3, [r7, #5]
	
		GPIO_TypeDef *GPIOx = Select_GPIO(port);
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff73 	bl	800023c <Select_GPIO>
 8000356:	60f8      	str	r0, [r7, #12]
    
		volatile uint32_t *odr = &GPIOx ->ODR;
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	330c      	adds	r3, #12
 800035c:	60bb      	str	r3, [r7, #8]
		
		//write the desired state to the desired pin
		state ? ((*odr |= 1 << pin)) : ((*odr &= ~(1 << pin)));
 800035e:	797b      	ldrb	r3, [r7, #5]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d009      	beq.n	8000378 <Write_GPIO+0x3c>
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	79ba      	ldrb	r2, [r7, #6]
 800036a:	2101      	movs	r1, #1
 800036c:	fa01 f202 	lsl.w	r2, r1, r2
 8000370:	431a      	orrs	r2, r3
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	601a      	str	r2, [r3, #0]

	
}
 8000376:	e009      	b.n	800038c <Write_GPIO+0x50>
		state ? ((*odr |= 1 << pin)) : ((*odr &= ~(1 << pin)));
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	79ba      	ldrb	r2, [r7, #6]
 800037e:	2101      	movs	r1, #1
 8000380:	fa01 f202 	lsl.w	r2, r1, r2
 8000384:	43d2      	mvns	r2, r2
 8000386:	401a      	ands	r2, r3
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	601a      	str	r2, [r3, #0]
}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <Read_GPIO_Pin>:

//function to read a single gpio pin
uint32_t Read_GPIO_Pin (uint8_t port, uint8_t pin){
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	460a      	mov	r2, r1
 800039e:	71fb      	strb	r3, [r7, #7]
 80003a0:	4613      	mov	r3, r2
 80003a2:	71bb      	strb	r3, [r7, #6]
	GPIO_TypeDef *GPIOx = Select_GPIO(port);
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff ff48 	bl	800023c <Select_GPIO>
 80003ac:	6178      	str	r0, [r7, #20]
	volatile uint32_t *idr = &GPIOx->IDR;
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	3308      	adds	r3, #8
 80003b2:	613b      	str	r3, [r7, #16]
	uint32_t state;

	state = ((*idr & (1 << pin)) >> pin);
 80003b4:	693b      	ldr	r3, [r7, #16]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	79ba      	ldrb	r2, [r7, #6]
 80003ba:	2101      	movs	r1, #1
 80003bc:	fa01 f202 	lsl.w	r2, r1, r2
 80003c0:	401a      	ands	r2, r3
 80003c2:	79bb      	ldrb	r3, [r7, #6]
 80003c4:	fa22 f303 	lsr.w	r3, r2, r3
 80003c8:	60fb      	str	r3, [r7, #12]
	return state;
 80003ca:	68fb      	ldr	r3, [r7, #12]
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3718      	adds	r7, #24
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <toggle_gpio>:
		return *idr;
		
}

//function to toggle gpio pin
void toggle_gpio (uint8_t port, uint8_t pin){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	460a      	mov	r2, r1
 80003de:	71fb      	strb	r3, [r7, #7]
 80003e0:	4613      	mov	r3, r2
 80003e2:	71bb      	strb	r3, [r7, #6]
	GPIO_TypeDef *GPIOx = Select_GPIO(port);  
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff28 	bl	800023c <Select_GPIO>
 80003ec:	60f8      	str	r0, [r7, #12]
  // toggle the bit in the Output Data Register (ODR)
  GPIOx->ODR ^= (1 << pin);
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	68db      	ldr	r3, [r3, #12]
 80003f2:	79ba      	ldrb	r2, [r7, #6]
 80003f4:	2101      	movs	r1, #1
 80003f6:	fa01 f202 	lsl.w	r2, r1, r2
 80003fa:	405a      	eors	r2, r3
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	60da      	str	r2, [r3, #12]
}
 8000400:	bf00      	nop
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <Task1_Handler>:

TaskHandle_t volatile NextTask_To_Handle = NULL;
BaseType_t status;


static void (Task1_Handler) (void* parameters) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af02      	add	r7, sp, #8
 800040e:	6078      	str	r0, [r7, #4]
	//TickType_t last_wakeup_time;
	//last_wakeup_time = xTaskGetTickCount();
	BaseType_t status;
	while (1){
		toggle_gpio (portC, 0);
 8000410:	2100      	movs	r1, #0
 8000412:	2003      	movs	r0, #3
 8000414:	f7ff ffde 	bl	80003d4 <toggle_gpio>
		//vTaskDelay(pdMS_TO_TICKS(1000));
		//vTaskDelayUntil( &last_wakeup_time, pdMS_TO_TICKS(1000));
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000) );
 8000418:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800041c:	9300      	str	r3, [sp, #0]
 800041e:	2300      	movs	r3, #0
 8000420:	2200      	movs	r2, #0
 8000422:	2100      	movs	r1, #0
 8000424:	2000      	movs	r0, #0
 8000426:	f001 f841 	bl	80014ac <xTaskGenericNotifyWait>
 800042a:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	2b01      	cmp	r3, #1
 8000430:	d1ee      	bne.n	8000410 <Task1_Handler+0x8>
			Write_GPIO (portC , 0 ,  HIGH);
 8000432:	2201      	movs	r2, #1
 8000434:	2100      	movs	r1, #0
 8000436:	2003      	movs	r0, #3
 8000438:	f7ff ff80 	bl	800033c <Write_GPIO>
			vTaskSuspendAll();
 800043c:	f000 fcfa 	bl	8000e34 <vTaskSuspendAll>
			NextTask_To_Handle = task2_Handle;
 8000440:	4b04      	ldr	r3, [pc, #16]	@ (8000454 <Task1_Handler+0x4c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a04      	ldr	r2, [pc, #16]	@ (8000458 <Task1_Handler+0x50>)
 8000446:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000448:	f000 fd02 	bl	8000e50 <xTaskResumeAll>
			vTaskDelete(NULL);
 800044c:	2000      	movs	r0, #0
 800044e:	f000 fb91 	bl	8000b74 <vTaskDelete>
		toggle_gpio (portC, 0);
 8000452:	e7dd      	b.n	8000410 <Task1_Handler+0x8>
 8000454:	20000028 	.word	0x20000028
 8000458:	20000034 	.word	0x20000034

0800045c <Task2_Handler>:
		}

	}
	}

static void (Task2_Handler) (void* parameters) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af02      	add	r7, sp, #8
 8000462:	6078      	str	r0, [r7, #4]

	//TickType_t last_wakeup_time;
	//last_wakeup_time = xTaskGetTickCount();
	BaseType_t status;
	while (1){
		toggle_gpio (portC, 1);
 8000464:	2101      	movs	r1, #1
 8000466:	2003      	movs	r0, #3
 8000468:	f7ff ffb4 	bl	80003d4 <toggle_gpio>
		//vTaskDelay(pdMS_TO_TICKS(800));
		//vTaskDelayUntil( &last_wakeup_time, pdMS_TO_TICKS(1000));
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800) );
 800046c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	2300      	movs	r3, #0
 8000474:	2200      	movs	r2, #0
 8000476:	2100      	movs	r1, #0
 8000478:	2000      	movs	r0, #0
 800047a:	f001 f817 	bl	80014ac <xTaskGenericNotifyWait>
 800047e:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d1ee      	bne.n	8000464 <Task2_Handler+0x8>
			Write_GPIO (portC , 1 ,  HIGH);
 8000486:	2201      	movs	r2, #1
 8000488:	2101      	movs	r1, #1
 800048a:	2003      	movs	r0, #3
 800048c:	f7ff ff56 	bl	800033c <Write_GPIO>
			vTaskSuspendAll();
 8000490:	f000 fcd0 	bl	8000e34 <vTaskSuspendAll>
			NextTask_To_Handle = task3_Handle;
 8000494:	4b04      	ldr	r3, [pc, #16]	@ (80004a8 <Task2_Handler+0x4c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a04      	ldr	r2, [pc, #16]	@ (80004ac <Task2_Handler+0x50>)
 800049a:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 800049c:	f000 fcd8 	bl	8000e50 <xTaskResumeAll>

			vTaskDelete(NULL);
 80004a0:	2000      	movs	r0, #0
 80004a2:	f000 fb67 	bl	8000b74 <vTaskDelete>
		toggle_gpio (portC, 1);
 80004a6:	e7dd      	b.n	8000464 <Task2_Handler+0x8>
 80004a8:	2000002c 	.word	0x2000002c
 80004ac:	20000034 	.word	0x20000034

080004b0 <Task3_Handler>:
			}
	}
	}

static void (Task3_Handler) (void* parameters) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af02      	add	r7, sp, #8
 80004b6:	6078      	str	r0, [r7, #4]

	//TickType_t last_wakeup_time;
	//last_wakeup_time = xTaskGetTickCount();
	BaseType_t status;
	while (1){
		toggle_gpio (portB, 0);
 80004b8:	2100      	movs	r1, #0
 80004ba:	2002      	movs	r0, #2
 80004bc:	f7ff ff8a 	bl	80003d4 <toggle_gpio>
		//vTaskDelay(pdMS_TO_TICKS(400));
		//vTaskDelayUntil( &last_wakeup_time, pdMS_TO_TICKS(1000));
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400) );
 80004c0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	2300      	movs	r3, #0
 80004c8:	2200      	movs	r2, #0
 80004ca:	2100      	movs	r1, #0
 80004cc:	2000      	movs	r0, #0
 80004ce:	f000 ffed 	bl	80014ac <xTaskGenericNotifyWait>
 80004d2:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d1ee      	bne.n	80004b8 <Task3_Handler+0x8>
			Write_GPIO (portB , 0 ,  HIGH);
 80004da:	2201      	movs	r2, #1
 80004dc:	2100      	movs	r1, #0
 80004de:	2002      	movs	r0, #2
 80004e0:	f7ff ff2c 	bl	800033c <Write_GPIO>
			vTaskSuspendAll();
 80004e4:	f000 fca6 	bl	8000e34 <vTaskSuspendAll>
			NextTask_To_Handle = NULL;
 80004e8:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <Task3_Handler+0x54>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 80004ee:	f000 fcaf 	bl	8000e50 <xTaskResumeAll>
			vTaskDelete(task4_Handle);
 80004f2:	4b05      	ldr	r3, [pc, #20]	@ (8000508 <Task3_Handler+0x58>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 fb3c 	bl	8000b74 <vTaskDelete>
			vTaskDelete(NULL);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fb39 	bl	8000b74 <vTaskDelete>
		toggle_gpio (portB, 0);
 8000502:	e7d9      	b.n	80004b8 <Task3_Handler+0x8>
 8000504:	20000034 	.word	0x20000034
 8000508:	20000030 	.word	0x20000030

0800050c <Task4_Handler>:
//		//vTaskDelay(pdMS_TO_TICKS(400));
//		vTaskDelayUntil( &last_wakeup_time, pdMS_TO_TICKS(1000));
//	}
//	}

static void Task4_Handler(void* parameters) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af02      	add	r7, sp, #8
 8000512:	6078      	str	r0, [r7, #4]
    uint8_t btn_previous = 1;  // Track previous state
 8000514:	2301      	movs	r3, #1
 8000516:	73fb      	strb	r3, [r7, #15]
    uint8_t btn_current;

    while (1) {
        btn_current = Read_GPIO_Pin(portC, 13);
 8000518:	210d      	movs	r1, #13
 800051a:	2003      	movs	r0, #3
 800051c:	f7ff ff3a 	bl	8000394 <Read_GPIO_Pin>
 8000520:	4603      	mov	r3, r0
 8000522:	73bb      	strb	r3, [r7, #14]

        // Trigger only on falling edge (button press)
        if (btn_previous == 1 && btn_current == 0) {
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d10f      	bne.n	800054a <Task4_Handler+0x3e>
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10c      	bne.n	800054a <Task4_Handler+0x3e>
            if (NextTask_To_Handle != NULL) {
 8000530:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <Task4_Handler+0x4c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d008      	beq.n	800054a <Task4_Handler+0x3e>
                xTaskNotify(NextTask_To_Handle, 0, eSetValueWithOverwrite);
 8000538:	4b07      	ldr	r3, [pc, #28]	@ (8000558 <Task4_Handler+0x4c>)
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	2300      	movs	r3, #0
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	2303      	movs	r3, #3
 8000542:	2200      	movs	r2, #0
 8000544:	2100      	movs	r1, #0
 8000546:	f001 f849 	bl	80015dc <xTaskGenericNotify>
            }

        }

        btn_previous = btn_current;
 800054a:	7bbb      	ldrb	r3, [r7, #14]
 800054c:	73fb      	strb	r3, [r7, #15]
        vTaskDelay(pdMS_TO_TICKS(20));  // Debounce
 800054e:	2014      	movs	r0, #20
 8000550:	f000 fbb2 	bl	8000cb8 <vTaskDelay>
        btn_current = Read_GPIO_Pin(portC, 13);
 8000554:	e7e0      	b.n	8000518 <Task4_Handler+0xc>
 8000556:	bf00      	nop
 8000558:	20000034 	.word	0x20000034

0800055c <main>:
    }
}

int main(void){
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af02      	add	r7, sp, #8
	SystemClock_Config();
 8000562:	f7ff fe05 	bl	8000170 <SystemClock_Config>
	NVIC_SetPriorityGrouping(NVIC_PRIORITY_GROUP_0); // 0 bits for subpriority, 4 bits for preemption
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff fe4a 	bl	8000200 <NVIC_SetPriorityGrouping>


	//configure gpio pins
	Config_GPIO(portC, 0, output_50Mhz, gp_output );
 800056c:	2300      	movs	r3, #0
 800056e:	2203      	movs	r2, #3
 8000570:	2100      	movs	r1, #0
 8000572:	2003      	movs	r0, #3
 8000574:	f7ff fe92 	bl	800029c <Config_GPIO>
	Config_GPIO(portC, 1, output_50Mhz, gp_output );
 8000578:	2300      	movs	r3, #0
 800057a:	2203      	movs	r2, #3
 800057c:	2101      	movs	r1, #1
 800057e:	2003      	movs	r0, #3
 8000580:	f7ff fe8c 	bl	800029c <Config_GPIO>
	Config_GPIO(portB, 0, output_50Mhz, gp_output );
 8000584:	2300      	movs	r3, #0
 8000586:	2203      	movs	r2, #3
 8000588:	2100      	movs	r1, #0
 800058a:	2002      	movs	r0, #2
 800058c:	f7ff fe86 	bl	800029c <Config_GPIO>
	Config_GPIO(portC, 13, input, pp_in );
 8000590:	2302      	movs	r3, #2
 8000592:	2200      	movs	r2, #0
 8000594:	210d      	movs	r1, #13
 8000596:	2003      	movs	r0, #3
 8000598:	f7ff fe80 	bl	800029c <Config_GPIO>




    // Task Creation
    status = xTaskCreate(Task1_Handler, "Green LED", 128, NULL, 3, &task1_Handle);
 800059c:	4b3d      	ldr	r3, [pc, #244]	@ (8000694 <main+0x138>)
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	2303      	movs	r3, #3
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	2300      	movs	r3, #0
 80005a6:	2280      	movs	r2, #128	@ 0x80
 80005a8:	493b      	ldr	r1, [pc, #236]	@ (8000698 <main+0x13c>)
 80005aa:	483c      	ldr	r0, [pc, #240]	@ (800069c <main+0x140>)
 80005ac:	f000 f9a2 	bl	80008f4 <xTaskCreate>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a3b      	ldr	r2, [pc, #236]	@ (80006a0 <main+0x144>)
 80005b4:	6013      	str	r3, [r2, #0]
    configASSERT(status == pdPASS);
 80005b6:	4b3a      	ldr	r3, [pc, #232]	@ (80006a0 <main+0x144>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d00b      	beq.n	80005d6 <main+0x7a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005c2:	f383 8811 	msr	BASEPRI, r3
 80005c6:	f3bf 8f6f 	isb	sy
 80005ca:	f3bf 8f4f 	dsb	sy
 80005ce:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	e7fd      	b.n	80005d2 <main+0x76>

    status = xTaskCreate(Task2_Handler, "RED_LED", 128, NULL, 2, &task2_Handle);
 80005d6:	4b33      	ldr	r3, [pc, #204]	@ (80006a4 <main+0x148>)
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2302      	movs	r3, #2
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	2280      	movs	r2, #128	@ 0x80
 80005e2:	4931      	ldr	r1, [pc, #196]	@ (80006a8 <main+0x14c>)
 80005e4:	4831      	ldr	r0, [pc, #196]	@ (80006ac <main+0x150>)
 80005e6:	f000 f985 	bl	80008f4 <xTaskCreate>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a2c      	ldr	r2, [pc, #176]	@ (80006a0 <main+0x144>)
 80005ee:	6013      	str	r3, [r2, #0]
    configASSERT(status == pdPASS);
 80005f0:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <main+0x144>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d00b      	beq.n	8000610 <main+0xb4>
    __asm volatile
 80005f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005fc:	f383 8811 	msr	BASEPRI, r3
 8000600:	f3bf 8f6f 	isb	sy
 8000604:	f3bf 8f4f 	dsb	sy
 8000608:	60bb      	str	r3, [r7, #8]
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <main+0xb0>

    status = xTaskCreate(Task3_Handler, "Blue_LED", 128, NULL, 1, &task3_Handle);
 8000610:	4b27      	ldr	r3, [pc, #156]	@ (80006b0 <main+0x154>)
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	2301      	movs	r3, #1
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2300      	movs	r3, #0
 800061a:	2280      	movs	r2, #128	@ 0x80
 800061c:	4925      	ldr	r1, [pc, #148]	@ (80006b4 <main+0x158>)
 800061e:	4826      	ldr	r0, [pc, #152]	@ (80006b8 <main+0x15c>)
 8000620:	f000 f968 	bl	80008f4 <xTaskCreate>
 8000624:	4603      	mov	r3, r0
 8000626:	4a1e      	ldr	r2, [pc, #120]	@ (80006a0 <main+0x144>)
 8000628:	6013      	str	r3, [r2, #0]
    configASSERT(status == pdPASS);
 800062a:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <main+0x144>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d00b      	beq.n	800064a <main+0xee>
    __asm volatile
 8000632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000636:	f383 8811 	msr	BASEPRI, r3
 800063a:	f3bf 8f6f 	isb	sy
 800063e:	f3bf 8f4f 	dsb	sy
 8000642:	607b      	str	r3, [r7, #4]
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	e7fd      	b.n	8000646 <main+0xea>

    status = xTaskCreate(Task4_Handler, "User_Button", 128, NULL, 4, &task4_Handle);
 800064a:	4b1c      	ldr	r3, [pc, #112]	@ (80006bc <main+0x160>)
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	2304      	movs	r3, #4
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2300      	movs	r3, #0
 8000654:	2280      	movs	r2, #128	@ 0x80
 8000656:	491a      	ldr	r1, [pc, #104]	@ (80006c0 <main+0x164>)
 8000658:	481a      	ldr	r0, [pc, #104]	@ (80006c4 <main+0x168>)
 800065a:	f000 f94b 	bl	80008f4 <xTaskCreate>
 800065e:	4603      	mov	r3, r0
 8000660:	4a0f      	ldr	r2, [pc, #60]	@ (80006a0 <main+0x144>)
 8000662:	6013      	str	r3, [r2, #0]
    configASSERT(status == pdPASS);
 8000664:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <main+0x144>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d00b      	beq.n	8000684 <main+0x128>
    __asm volatile
 800066c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000670:	f383 8811 	msr	BASEPRI, r3
 8000674:	f3bf 8f6f 	isb	sy
 8000678:	f3bf 8f4f 	dsb	sy
 800067c:	603b      	str	r3, [r7, #0]
}
 800067e:	bf00      	nop
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <main+0x124>
    NextTask_To_Handle = task1_Handle;
 8000684:	4b03      	ldr	r3, [pc, #12]	@ (8000694 <main+0x138>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a0f      	ldr	r2, [pc, #60]	@ (80006c8 <main+0x16c>)
 800068a:	6013      	str	r3, [r2, #0]

    vTaskStartScheduler();
 800068c:	f000 fb94 	bl	8000db8 <vTaskStartScheduler>



    /* Loop forever */
	for(;;){
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <main+0x134>
 8000694:	20000024 	.word	0x20000024
 8000698:	080022a0 	.word	0x080022a0
 800069c:	08000409 	.word	0x08000409
 80006a0:	20000038 	.word	0x20000038
 80006a4:	20000028 	.word	0x20000028
 80006a8:	080022ac 	.word	0x080022ac
 80006ac:	0800045d 	.word	0x0800045d
 80006b0:	2000002c 	.word	0x2000002c
 80006b4:	080022b4 	.word	0x080022b4
 80006b8:	080004b1 	.word	0x080004b1
 80006bc:	20000030 	.word	0x20000030
 80006c0:	080022c0 	.word	0x080022c0
 80006c4:	0800050d 	.word	0x0800050d
 80006c8:	20000034 	.word	0x20000034

080006cc <Reset_Handler>:
 80006cc:	480d      	ldr	r0, [pc, #52]	@ (8000704 <LoopForever+0x2>)
 80006ce:	4685      	mov	sp, r0
 80006d0:	f3af 8000 	nop.w
 80006d4:	480c      	ldr	r0, [pc, #48]	@ (8000708 <LoopForever+0x6>)
 80006d6:	490d      	ldr	r1, [pc, #52]	@ (800070c <LoopForever+0xa>)
 80006d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000710 <LoopForever+0xe>)
 80006da:	2300      	movs	r3, #0
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:
 80006de:	58d4      	ldr	r4, [r2, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:
 80006e4:	18c4      	adds	r4, r0, r3
 80006e6:	428c      	cmp	r4, r1
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>
 80006ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000714 <LoopForever+0x12>)
 80006ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000718 <LoopForever+0x16>)
 80006ee:	2300      	movs	r3, #0
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:
 80006f6:	42a2      	cmp	r2, r4
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>
 80006fa:	f001 fda1 	bl	8002240 <__libc_init_array>
 80006fe:	f7ff ff2d 	bl	800055c <main>

08000702 <LoopForever>:
 8000702:	e7fe      	b.n	8000702 <LoopForever>
 8000704:	20005000 	.word	0x20005000
 8000708:	20000000 	.word	0x20000000
 800070c:	20000008 	.word	0x20000008
 8000710:	080022dc 	.word	0x080022dc
 8000714:	20000008 	.word	0x20000008
 8000718:	20003164 	.word	0x20003164

0800071c <ADC1_2_IRQHandler>:
 800071c:	e7fe      	b.n	800071c <ADC1_2_IRQHandler>

0800071e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f103 0208 	add.w	r2, r3, #8
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f04f 32ff 	mov.w	r2, #4294967295
 8000736:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f103 0208 	add.w	r2, r3, #8
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f103 0208 	add.w	r2, r3, #8
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	689a      	ldr	r2, [r3, #8]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr

080007ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80007ba:	b480      	push	{r7}
 80007bc:	b085      	sub	sp, #20
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d0:	d103      	bne.n	80007da <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	691b      	ldr	r3, [r3, #16]
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	e00c      	b.n	80007f4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	3308      	adds	r3, #8
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	e002      	b.n	80007e8 <vListInsert+0x2e>
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d2f6      	bcs.n	80007e2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	685a      	ldr	r2, [r3, #4]
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	683a      	ldr	r2, [r7, #0]
 8000802:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr

0800082a <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800082a:	b480      	push	{r7}
 800082c:	b085      	sub	sp, #20
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	691b      	ldr	r3, [r3, #16]
 8000836:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	6892      	ldr	r2, [r2, #8]
 8000840:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	6852      	ldr	r2, [r2, #4]
 800084a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	429a      	cmp	r2, r3
 8000854:	d103      	bne.n	800085e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	689a      	ldr	r2, [r3, #8]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	1e5a      	subs	r2, r3, #1
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	681b      	ldr	r3, [r3, #0]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	@ 0x28
 8000880:	af04      	add	r7, sp, #16
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
 8000888:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	4618      	mov	r0, r3
 8000890:	f001 fa4e 	bl	8001d30 <pvPortMalloc>
 8000894:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d013      	beq.n	80008c4 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800089c:	2054      	movs	r0, #84	@ 0x54
 800089e:	f001 fa47 	bl	8001d30 <pvPortMalloc>
 80008a2:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d008      	beq.n	80008bc <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80008aa:	2254      	movs	r2, #84	@ 0x54
 80008ac:	2100      	movs	r1, #0
 80008ae:	6978      	ldr	r0, [r7, #20]
 80008b0:	f001 fcbe 	bl	8002230 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80008ba:	e005      	b.n	80008c8 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80008bc:	6938      	ldr	r0, [r7, #16]
 80008be:	f001 fb69 	bl	8001f94 <vPortFree>
 80008c2:	e001      	b.n	80008c8 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d00d      	beq.n	80008ea <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80008ce:	2300      	movs	r3, #0
 80008d0:	9303      	str	r3, [sp, #12]
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	9302      	str	r3, [sp, #8]
 80008d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d8:	9301      	str	r3, [sp, #4]
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	68b9      	ldr	r1, [r7, #8]
 80008e4:	68f8      	ldr	r0, [r7, #12]
 80008e6:	f000 f828 	bl	800093a <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80008ea:	697b      	ldr	r3, [r7, #20]
    }
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af02      	add	r7, sp, #8
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
 8000900:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8000902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	6a3b      	ldr	r3, [r7, #32]
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	68b9      	ldr	r1, [r7, #8]
 8000910:	68f8      	ldr	r0, [r7, #12]
 8000912:	f7ff ffb3 	bl	800087c <prvCreateTask>
 8000916:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d005      	beq.n	800092a <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800091e:	6938      	ldr	r0, [r7, #16]
 8000920:	f000 f894 	bl	8000a4c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000924:	2301      	movs	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	e002      	b.n	8000930 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8000930:	697b      	ldr	r3, [r7, #20]
    }
 8000932:	4618      	mov	r0, r3
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b088      	sub	sp, #32
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8000948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800094a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000952:	3b01      	subs	r3, #1
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	4413      	add	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	f023 0307 	bic.w	r3, r3, #7
 8000960:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	f003 0307 	and.w	r3, r3, #7
 8000968:	2b00      	cmp	r3, #0
 800096a:	d00b      	beq.n	8000984 <prvInitialiseNewTask+0x4a>
    __asm volatile
 800096c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000970:	f383 8811 	msr	BASEPRI, r3
 8000974:	f3bf 8f6f 	isb	sy
 8000978:	f3bf 8f4f 	dsb	sy
 800097c:	617b      	str	r3, [r7, #20]
}
 800097e:	bf00      	nop
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d01e      	beq.n	80009c8 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
 800098e:	e012      	b.n	80009b6 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	4413      	add	r3, r2
 8000996:	7819      	ldrb	r1, [r3, #0]
 8000998:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	4413      	add	r3, r2
 800099e:	3334      	adds	r3, #52	@ 0x34
 80009a0:	460a      	mov	r2, r1
 80009a2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80009a4:	68ba      	ldr	r2, [r7, #8]
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	4413      	add	r3, r2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d006      	beq.n	80009be <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	3301      	adds	r3, #1
 80009b4:	61fb      	str	r3, [r7, #28]
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	2b0f      	cmp	r3, #15
 80009ba:	d9e9      	bls.n	8000990 <prvInitialiseNewTask+0x56>
 80009bc:	e000      	b.n	80009c0 <prvInitialiseNewTask+0x86>
            {
                break;
 80009be:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80009c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009c2:	2200      	movs	r2, #0
 80009c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80009c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d90b      	bls.n	80009e6 <prvInitialiseNewTask+0xac>
    __asm volatile
 80009ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009d2:	f383 8811 	msr	BASEPRI, r3
 80009d6:	f3bf 8f6f 	isb	sy
 80009da:	f3bf 8f4f 	dsb	sy
 80009de:	613b      	str	r3, [r7, #16]
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	e7fd      	b.n	80009e2 <prvInitialiseNewTask+0xa8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80009e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009e8:	2b04      	cmp	r3, #4
 80009ea:	d901      	bls.n	80009f0 <prvInitialiseNewTask+0xb6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80009ec:	2304      	movs	r3, #4
 80009ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80009f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80009f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80009fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009fe:	3304      	adds	r3, #4
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff feab 	bl	800075c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a08:	3318      	adds	r3, #24
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fea6 	bl	800075c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a14:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8000a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a18:	f1c3 0205 	rsb	r2, r3, #5
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a1e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a24:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	68f9      	ldr	r1, [r7, #12]
 8000a2a:	69b8      	ldr	r0, [r7, #24]
 8000a2c:	f000 ff88 	bl	8001940 <pxPortInitialiseStack>
 8000a30:	4602      	mov	r2, r0
 8000a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a34:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8000a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d002      	beq.n	8000a42 <prvInitialiseNewTask+0x108>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a40:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000a42:	bf00      	nop
 8000a44:	3720      	adds	r7, #32
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8000a54:	f001 f8b0 	bl	8001bb8 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8000a58:	4b3f      	ldr	r3, [pc, #252]	@ (8000b58 <prvAddNewTaskToReadyList+0x10c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b58 <prvAddNewTaskToReadyList+0x10c>)
 8000a60:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8000a62:	4b3e      	ldr	r3, [pc, #248]	@ (8000b5c <prvAddNewTaskToReadyList+0x110>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d109      	bne.n	8000a7e <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8000a6a:	4a3c      	ldr	r2, [pc, #240]	@ (8000b5c <prvAddNewTaskToReadyList+0x110>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000a70:	4b39      	ldr	r3, [pc, #228]	@ (8000b58 <prvAddNewTaskToReadyList+0x10c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d110      	bne.n	8000a9a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8000a78:	f000 fc80 	bl	800137c <prvInitialiseTaskLists>
 8000a7c:	e00d      	b.n	8000a9a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8000a7e:	4b38      	ldr	r3, [pc, #224]	@ (8000b60 <prvAddNewTaskToReadyList+0x114>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d109      	bne.n	8000a9a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000a86:	4b35      	ldr	r3, [pc, #212]	@ (8000b5c <prvAddNewTaskToReadyList+0x110>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d802      	bhi.n	8000a9a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8000a94:	4a31      	ldr	r2, [pc, #196]	@ (8000b5c <prvAddNewTaskToReadyList+0x110>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8000a9a:	4b32      	ldr	r3, [pc, #200]	@ (8000b64 <prvAddNewTaskToReadyList+0x118>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	4a30      	ldr	r2, [pc, #192]	@ (8000b64 <prvAddNewTaskToReadyList+0x118>)
 8000aa2:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	409a      	lsls	r2, r3
 8000aac:	4b2e      	ldr	r3, [pc, #184]	@ (8000b68 <prvAddNewTaskToReadyList+0x11c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8000b68 <prvAddNewTaskToReadyList+0x11c>)
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <prvAddNewTaskToReadyList+0x120>)
 8000abc:	4613      	mov	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4413      	add	r3, r2
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	3304      	adds	r3, #4
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	689a      	ldr	r2, [r3, #8]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	3204      	adds	r2, #4
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	1d1a      	adds	r2, r3, #4
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000af0:	4613      	mov	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4413      	add	r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b6c <prvAddNewTaskToReadyList+0x120>)
 8000afa:	441a      	add	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	615a      	str	r2, [r3, #20]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b04:	4919      	ldr	r1, [pc, #100]	@ (8000b6c <prvAddNewTaskToReadyList+0x120>)
 8000b06:	4613      	mov	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	4413      	add	r3, r2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	440b      	add	r3, r1
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000b16:	1c59      	adds	r1, r3, #1
 8000b18:	4814      	ldr	r0, [pc, #80]	@ (8000b6c <prvAddNewTaskToReadyList+0x120>)
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4403      	add	r3, r0
 8000b24:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8000b26:	f001 f877 	bl	8001c18 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <prvAddNewTaskToReadyList+0x114>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d00e      	beq.n	8000b50 <prvAddNewTaskToReadyList+0x104>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8000b32:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <prvAddNewTaskToReadyList+0x110>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <prvAddNewTaskToReadyList+0x104>
 8000b40:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <prvAddNewTaskToReadyList+0x124>)
 8000b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	f3bf 8f4f 	dsb	sy
 8000b4c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000114 	.word	0x20000114
 8000b5c:	2000003c 	.word	0x2000003c
 8000b60:	20000120 	.word	0x20000120
 8000b64:	20000130 	.word	0x20000130
 8000b68:	2000011c 	.word	0x2000011c
 8000b6c:	20000040 	.word	0x20000040
 8000b70:	e000ed04 	.word	0xe000ed04

08000b74 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8000b80:	f001 f81a 	bl	8001bb8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <vTaskDelete+0x1c>
 8000b8a:	4b41      	ldr	r3, [pc, #260]	@ (8000c90 <vTaskDelete+0x11c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	e000      	b.n	8000b92 <vTaskDelete+0x1e>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	3304      	adds	r3, #4
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fe46 	bl	800082a <uxListRemove>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d115      	bne.n	8000bd0 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ba8:	493a      	ldr	r1, [pc, #232]	@ (8000c94 <vTaskDelete+0x120>)
 8000baa:	4613      	mov	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4413      	add	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d10a      	bne.n	8000bd0 <vTaskDelete+0x5c>
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43da      	mvns	r2, r3
 8000bc6:	4b34      	ldr	r3, [pc, #208]	@ (8000c98 <vTaskDelete+0x124>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	4a32      	ldr	r2, [pc, #200]	@ (8000c98 <vTaskDelete+0x124>)
 8000bce:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d004      	beq.n	8000be2 <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	3318      	adds	r3, #24
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fe24 	bl	800082a <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8000be2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c9c <vTaskDelete+0x128>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	3301      	adds	r3, #1
 8000be8:	4a2c      	ldr	r2, [pc, #176]	@ (8000c9c <vTaskDelete+0x128>)
 8000bea:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8000bec:	4b28      	ldr	r3, [pc, #160]	@ (8000c90 <vTaskDelete+0x11c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d101      	bne.n	8000bfa <vTaskDelete+0x86>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <vTaskDelete+0x88>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8000bfe:	4b28      	ldr	r3, [pc, #160]	@ (8000ca0 <vTaskDelete+0x12c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d010      	beq.n	8000c28 <vTaskDelete+0xb4>
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d00d      	beq.n	8000c28 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	3304      	adds	r3, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4824      	ldr	r0, [pc, #144]	@ (8000ca4 <vTaskDelete+0x130>)
 8000c14:	f7ff fdae 	bl	8000774 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8000c18:	4b23      	ldr	r3, [pc, #140]	@ (8000ca8 <vTaskDelete+0x134>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	4a22      	ldr	r2, [pc, #136]	@ (8000ca8 <vTaskDelete+0x134>)
 8000c20:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8000c22:	2301      	movs	r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	e006      	b.n	8000c36 <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8000c28:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <vTaskDelete+0x138>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8000cac <vTaskDelete+0x138>)
 8000c30:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8000c32:	f000 fc21 	bl	8001478 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8000c36:	f000 ffef 	bl	8001c18 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d002      	beq.n	8000c46 <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 8000c40:	6938      	ldr	r0, [r7, #16]
 8000c42:	f000 fc09 	bl	8001458 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8000c46:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <vTaskDelete+0x12c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d01c      	beq.n	8000c88 <vTaskDelete+0x114>
            {
                if( pxTCB == pxCurrentTCB )
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <vTaskDelete+0x11c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d117      	bne.n	8000c88 <vTaskDelete+0x114>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8000c58:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <vTaskDelete+0x13c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d00b      	beq.n	8000c78 <vTaskDelete+0x104>
    __asm volatile
 8000c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c64:	f383 8811 	msr	BASEPRI, r3
 8000c68:	f3bf 8f6f 	isb	sy
 8000c6c:	f3bf 8f4f 	dsb	sy
 8000c70:	60bb      	str	r3, [r7, #8]
}
 8000c72:	bf00      	nop
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <vTaskDelete+0x100>
                    taskYIELD_WITHIN_API();
 8000c78:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <vTaskDelete+0x140>)
 8000c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	f3bf 8f4f 	dsb	sy
 8000c84:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 8000c88:	bf00      	nop
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	2000003c 	.word	0x2000003c
 8000c94:	20000040 	.word	0x20000040
 8000c98:	2000011c 	.word	0x2000011c
 8000c9c:	20000130 	.word	0x20000130
 8000ca0:	20000120 	.word	0x20000120
 8000ca4:	200000e8 	.word	0x200000e8
 8000ca8:	200000fc 	.word	0x200000fc
 8000cac:	20000114 	.word	0x20000114
 8000cb0:	2000013c 	.word	0x2000013c
 8000cb4:	e000ed04 	.word	0xe000ed04

08000cb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d018      	beq.n	8000cfc <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8000cca:	f000 f8b3 	bl	8000e34 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8000cce:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <vTaskDelay+0x64>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d00b      	beq.n	8000cee <vTaskDelay+0x36>
    __asm volatile
 8000cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cda:	f383 8811 	msr	BASEPRI, r3
 8000cde:	f3bf 8f6f 	isb	sy
 8000ce2:	f3bf 8f4f 	dsb	sy
 8000ce6:	60bb      	str	r3, [r7, #8]
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	e7fd      	b.n	8000cea <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000cee:	2100      	movs	r1, #0
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 fda3 	bl	800183c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000cf6:	f000 f8ab 	bl	8000e50 <xTaskResumeAll>
 8000cfa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d107      	bne.n	8000d12 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8000d02:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <vTaskDelay+0x68>)
 8000d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	f3bf 8f4f 	dsb	sy
 8000d0e:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000013c 	.word	0x2000013c
 8000d20:	e000ed04 	.word	0xe000ed04

08000d24 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	@ 0x28
 8000d28:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	e011      	b.n	8000d5c <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8000d38:	4a1c      	ldr	r2, [pc, #112]	@ (8000dac <prvCreateIdleTasks+0x88>)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	7819      	ldrb	r1, [r3, #0]
 8000d40:	463a      	mov	r2, r7
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	4413      	add	r3, r2
 8000d46:	460a      	mov	r2, r1
 8000d48:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8000d4a:	463a      	mov	r2, r7
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	4413      	add	r3, r2
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d006      	beq.n	8000d64 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	2b0f      	cmp	r3, #15
 8000d60:	ddea      	ble.n	8000d38 <prvCreateIdleTasks+0x14>
 8000d62:	e000      	b.n	8000d66 <prvCreateIdleTasks+0x42>
        {
            break;
 8000d64:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
 8000d6a:	e015      	b.n	8000d98 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8000d6c:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <prvCreateIdleTasks+0x8c>)
 8000d6e:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4a0f      	ldr	r2, [pc, #60]	@ (8000db4 <prvCreateIdleTasks+0x90>)
 8000d76:	4413      	add	r3, r2
 8000d78:	4639      	mov	r1, r7
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2300      	movs	r3, #0
 8000d82:	2280      	movs	r2, #128	@ 0x80
 8000d84:	6938      	ldr	r0, [r7, #16]
 8000d86:	f7ff fdb5 	bl	80008f4 <xTaskCreate>
 8000d8a:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d006      	beq.n	8000da0 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	3301      	adds	r3, #1
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	dde6      	ble.n	8000d6c <prvCreateIdleTasks+0x48>
 8000d9e:	e000      	b.n	8000da2 <prvCreateIdleTasks+0x7e>
        {
            break;
 8000da0:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8000da2:	69fb      	ldr	r3, [r7, #28]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3720      	adds	r7, #32
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	080022cc 	.word	0x080022cc
 8000db0:	0800134d 	.word	0x0800134d
 8000db4:	20000138 	.word	0x20000138

08000db8 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8000dbe:	f7ff ffb1 	bl	8000d24 <prvCreateIdleTasks>
 8000dc2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d116      	bne.n	8000df8 <vTaskStartScheduler+0x40>
    __asm volatile
 8000dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dce:	f383 8811 	msr	BASEPRI, r3
 8000dd2:	f3bf 8f6f 	isb	sy
 8000dd6:	f3bf 8f4f 	dsb	sy
 8000dda:	60bb      	str	r3, [r7, #8]
}
 8000ddc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <vTaskStartScheduler+0x6c>)
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <vTaskStartScheduler+0x70>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <vTaskStartScheduler+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8000df2:	f000 fe23 	bl	8001a3c <xPortStartScheduler>
 8000df6:	e00f      	b.n	8000e18 <vTaskStartScheduler+0x60>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfe:	d10b      	bne.n	8000e18 <vTaskStartScheduler+0x60>
    __asm volatile
 8000e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e04:	f383 8811 	msr	BASEPRI, r3
 8000e08:	f3bf 8f6f 	isb	sy
 8000e0c:	f3bf 8f4f 	dsb	sy
 8000e10:	607b      	str	r3, [r7, #4]
}
 8000e12:	bf00      	nop
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <vTaskStartScheduler+0x5c>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <vTaskStartScheduler+0x78>)
 8000e1a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000134 	.word	0x20000134
 8000e28:	20000120 	.word	0x20000120
 8000e2c:	20000118 	.word	0x20000118
 8000e30:	20000000 	.word	0x20000000

08000e34 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8000e38:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <vTaskSuspendAll+0x18>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	4a03      	ldr	r2, [pc, #12]	@ (8000e4c <vTaskSuspendAll+0x18>)
 8000e40:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	2000013c 	.word	0x2000013c

08000e50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8000e5e:	f000 feab 	bl	8001bb8 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8000e66:	4b75      	ldr	r3, [pc, #468]	@ (800103c <xTaskResumeAll+0x1ec>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10b      	bne.n	8000e86 <xTaskResumeAll+0x36>
    __asm volatile
 8000e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e72:	f383 8811 	msr	BASEPRI, r3
 8000e76:	f3bf 8f6f 	isb	sy
 8000e7a:	f3bf 8f4f 	dsb	sy
 8000e7e:	603b      	str	r3, [r7, #0]
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	e7fd      	b.n	8000e82 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8000e86:	4b6d      	ldr	r3, [pc, #436]	@ (800103c <xTaskResumeAll+0x1ec>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	4a6b      	ldr	r2, [pc, #428]	@ (800103c <xTaskResumeAll+0x1ec>)
 8000e8e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8000e90:	4b6a      	ldr	r3, [pc, #424]	@ (800103c <xTaskResumeAll+0x1ec>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f040 80ca 	bne.w	800102e <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000e9a:	4b69      	ldr	r3, [pc, #420]	@ (8001040 <xTaskResumeAll+0x1f0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 80c5 	beq.w	800102e <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ea4:	e08e      	b.n	8000fc4 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8000ea6:	4b67      	ldr	r3, [pc, #412]	@ (8001044 <xTaskResumeAll+0x1f4>)
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	69fa      	ldr	r2, [r7, #28]
 8000eba:	6a12      	ldr	r2, [r2, #32]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	6a1b      	ldr	r3, [r3, #32]
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	69d2      	ldr	r2, [r2, #28]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	3318      	adds	r3, #24
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d103      	bne.n	8000edc <xTaskResumeAll+0x8c>
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	6a1a      	ldr	r2, [r3, #32]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	1e5a      	subs	r2, r3, #1
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	69fa      	ldr	r2, [r7, #28]
 8000ef8:	68d2      	ldr	r2, [r2, #12]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	69fa      	ldr	r2, [r7, #28]
 8000f02:	6892      	ldr	r2, [r2, #8]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d103      	bne.n	8000f1a <xTaskResumeAll+0xca>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	68da      	ldr	r2, [r3, #12]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	615a      	str	r2, [r3, #20]
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	1e5a      	subs	r2, r3, #1
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f2e:	2201      	movs	r2, #1
 8000f30:	409a      	lsls	r2, r3
 8000f32:	4b45      	ldr	r3, [pc, #276]	@ (8001048 <xTaskResumeAll+0x1f8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	4a43      	ldr	r2, [pc, #268]	@ (8001048 <xTaskResumeAll+0x1f8>)
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f40:	4942      	ldr	r1, [pc, #264]	@ (800104c <xTaskResumeAll+0x1fc>)
 8000f42:	4613      	mov	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	69fa      	ldr	r2, [r7, #28]
 8000f66:	3204      	adds	r2, #4
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	1d1a      	adds	r2, r3, #4
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4a33      	ldr	r2, [pc, #204]	@ (800104c <xTaskResumeAll+0x1fc>)
 8000f80:	441a      	add	r2, r3
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	615a      	str	r2, [r3, #20]
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f8a:	4930      	ldr	r1, [pc, #192]	@ (800104c <xTaskResumeAll+0x1fc>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000f9c:	1c59      	adds	r1, r3, #1
 8000f9e:	482b      	ldr	r0, [pc, #172]	@ (800104c <xTaskResumeAll+0x1fc>)
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4403      	add	r3, r0
 8000faa:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fb0:	4b27      	ldr	r3, [pc, #156]	@ (8001050 <xTaskResumeAll+0x200>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d904      	bls.n	8000fc4 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8000fba:	4a26      	ldr	r2, [pc, #152]	@ (8001054 <xTaskResumeAll+0x204>)
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001044 <xTaskResumeAll+0x1f4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f47f af6c 	bne.w	8000ea6 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8000fd4:	f000 fa50 	bl	8001478 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <xTaskResumeAll+0x208>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d012      	beq.n	800100a <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8000fe4:	f000 f83c 	bl	8001060 <xTaskIncrementTick>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d004      	beq.n	8000ff8 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8000fee:	4a19      	ldr	r2, [pc, #100]	@ (8001054 <xTaskResumeAll+0x204>)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1ef      	bne.n	8000fe4 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8001004:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <xTaskResumeAll+0x208>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800100a:	4a12      	ldr	r2, [pc, #72]	@ (8001054 <xTaskResumeAll+0x204>)
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00b      	beq.n	800102e <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001016:	2301      	movs	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <xTaskResumeAll+0x200>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <xTaskResumeAll+0x20c>)
 8001020:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	f3bf 8f4f 	dsb	sy
 800102a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800102e:	f000 fdf3 	bl	8001c18 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8001032:	69bb      	ldr	r3, [r7, #24]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3720      	adds	r7, #32
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000013c 	.word	0x2000013c
 8001040:	20000114 	.word	0x20000114
 8001044:	200000d4 	.word	0x200000d4
 8001048:	2000011c 	.word	0x2000011c
 800104c:	20000040 	.word	0x20000040
 8001050:	2000003c 	.word	0x2000003c
 8001054:	20000128 	.word	0x20000128
 8001058:	20000124 	.word	0x20000124
 800105c:	e000ed04 	.word	0xe000ed04

08001060 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800106a:	4b7f      	ldr	r3, [pc, #508]	@ (8001268 <xTaskIncrementTick+0x208>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	f040 80ef 	bne.w	8001252 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001074:	4b7d      	ldr	r3, [pc, #500]	@ (800126c <xTaskIncrementTick+0x20c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800107c:	4a7b      	ldr	r2, [pc, #492]	@ (800126c <xTaskIncrementTick+0x20c>)
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d121      	bne.n	80010cc <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001088:	4b79      	ldr	r3, [pc, #484]	@ (8001270 <xTaskIncrementTick+0x210>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00b      	beq.n	80010aa <xTaskIncrementTick+0x4a>
    __asm volatile
 8001092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001096:	f383 8811 	msr	BASEPRI, r3
 800109a:	f3bf 8f6f 	isb	sy
 800109e:	f3bf 8f4f 	dsb	sy
 80010a2:	607b      	str	r3, [r7, #4]
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	e7fd      	b.n	80010a6 <xTaskIncrementTick+0x46>
 80010aa:	4b71      	ldr	r3, [pc, #452]	@ (8001270 <xTaskIncrementTick+0x210>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	4b70      	ldr	r3, [pc, #448]	@ (8001274 <xTaskIncrementTick+0x214>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a6e      	ldr	r2, [pc, #440]	@ (8001270 <xTaskIncrementTick+0x210>)
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001274 <xTaskIncrementTick+0x214>)
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	4b6e      	ldr	r3, [pc, #440]	@ (8001278 <xTaskIncrementTick+0x218>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	4a6c      	ldr	r2, [pc, #432]	@ (8001278 <xTaskIncrementTick+0x218>)
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	f000 f9d6 	bl	8001478 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80010cc:	4b6b      	ldr	r3, [pc, #428]	@ (800127c <xTaskIncrementTick+0x21c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6a3a      	ldr	r2, [r7, #32]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	f0c0 80a8 	bcc.w	8001228 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010d8:	4b65      	ldr	r3, [pc, #404]	@ (8001270 <xTaskIncrementTick+0x210>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d104      	bne.n	80010ec <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80010e2:	4b66      	ldr	r3, [pc, #408]	@ (800127c <xTaskIncrementTick+0x21c>)
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	601a      	str	r2, [r3, #0]
                    break;
 80010ea:	e09d      	b.n	8001228 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80010ec:	4b60      	ldr	r3, [pc, #384]	@ (8001270 <xTaskIncrementTick+0x210>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80010fc:	6a3a      	ldr	r2, [r7, #32]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	429a      	cmp	r2, r3
 8001102:	d203      	bcs.n	800110c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001104:	4a5d      	ldr	r2, [pc, #372]	@ (800127c <xTaskIncrementTick+0x21c>)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	6013      	str	r3, [r2, #0]
                        break;
 800110a:	e08d      	b.n	8001228 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	68d2      	ldr	r2, [r2, #12]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	6892      	ldr	r2, [r2, #8]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	3304      	adds	r3, #4
 800112e:	429a      	cmp	r2, r3
 8001130:	d103      	bne.n	800113a <xTaskIncrementTick+0xda>
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	1e5a      	subs	r2, r3, #1
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800114e:	2b00      	cmp	r3, #0
 8001150:	d01e      	beq.n	8001190 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	6a12      	ldr	r2, [r2, #32]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	69d2      	ldr	r2, [r2, #28]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	3318      	adds	r3, #24
 8001174:	429a      	cmp	r2, r3
 8001176:	d103      	bne.n	8001180 <xTaskIncrementTick+0x120>
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	6a1a      	ldr	r2, [r3, #32]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	2200      	movs	r2, #0
 8001184:	629a      	str	r2, [r3, #40]	@ 0x28
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	1e5a      	subs	r2, r3, #1
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001194:	2201      	movs	r2, #1
 8001196:	409a      	lsls	r2, r3
 8001198:	4b39      	ldr	r3, [pc, #228]	@ (8001280 <xTaskIncrementTick+0x220>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4313      	orrs	r3, r2
 800119e:	4a38      	ldr	r2, [pc, #224]	@ (8001280 <xTaskIncrementTick+0x220>)
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011a6:	4937      	ldr	r1, [pc, #220]	@ (8001284 <xTaskIncrementTick+0x224>)
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	3304      	adds	r3, #4
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	3204      	adds	r2, #4
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	1d1a      	adds	r2, r3, #4
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011dc:	4613      	mov	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4a27      	ldr	r2, [pc, #156]	@ (8001284 <xTaskIncrementTick+0x224>)
 80011e6:	441a      	add	r2, r3
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	615a      	str	r2, [r3, #20]
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011f0:	4924      	ldr	r1, [pc, #144]	@ (8001284 <xTaskIncrementTick+0x224>)
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001202:	1c59      	adds	r1, r3, #1
 8001204:	481f      	ldr	r0, [pc, #124]	@ (8001284 <xTaskIncrementTick+0x224>)
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4403      	add	r3, r0
 8001210:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001216:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <xTaskIncrementTick+0x228>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800121c:	429a      	cmp	r2, r3
 800121e:	f67f af5b 	bls.w	80010d8 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8001222:	2301      	movs	r3, #1
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001226:	e757      	b.n	80010d8 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8001228:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <xTaskIncrementTick+0x228>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800122e:	4915      	ldr	r1, [pc, #84]	@ (8001284 <xTaskIncrementTick+0x224>)
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d901      	bls.n	8001244 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8001240:	2301      	movs	r3, #1
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8001244:	4b11      	ldr	r3, [pc, #68]	@ (800128c <xTaskIncrementTick+0x22c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d007      	beq.n	800125c <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 800124c:	2301      	movs	r3, #1
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001250:	e004      	b.n	800125c <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8001252:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <xTaskIncrementTick+0x230>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <xTaskIncrementTick+0x230>)
 800125a:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 800125c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800125e:	4618      	mov	r0, r3
 8001260:	3728      	adds	r7, #40	@ 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000013c 	.word	0x2000013c
 800126c:	20000118 	.word	0x20000118
 8001270:	200000cc 	.word	0x200000cc
 8001274:	200000d0 	.word	0x200000d0
 8001278:	2000012c 	.word	0x2000012c
 800127c:	20000134 	.word	0x20000134
 8001280:	2000011c 	.word	0x2000011c
 8001284:	20000040 	.word	0x20000040
 8001288:	2000003c 	.word	0x2000003c
 800128c:	20000128 	.word	0x20000128
 8001290:	20000124 	.word	0x20000124

08001294 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800129a:	4b27      	ldr	r3, [pc, #156]	@ (8001338 <vTaskSwitchContext+0xa4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80012a2:	4b26      	ldr	r3, [pc, #152]	@ (800133c <vTaskSwitchContext+0xa8>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80012a8:	e041      	b.n	800132e <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 80012aa:	4b24      	ldr	r3, [pc, #144]	@ (800133c <vTaskSwitchContext+0xa8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80012b0:	4b23      	ldr	r3, [pc, #140]	@ (8001340 <vTaskSwitchContext+0xac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	fab3 f383 	clz	r3, r3
 80012bc:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 80012be:	7afb      	ldrb	r3, [r7, #11]
 80012c0:	f1c3 031f 	rsb	r3, r3, #31
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	491f      	ldr	r1, [pc, #124]	@ (8001344 <vTaskSwitchContext+0xb0>)
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10b      	bne.n	80012f2 <vTaskSwitchContext+0x5e>
    __asm volatile
 80012da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012de:	f383 8811 	msr	BASEPRI, r3
 80012e2:	f3bf 8f6f 	isb	sy
 80012e6:	f3bf 8f4f 	dsb	sy
 80012ea:	607b      	str	r3, [r7, #4]
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	e7fd      	b.n	80012ee <vTaskSwitchContext+0x5a>
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4a11      	ldr	r2, [pc, #68]	@ (8001344 <vTaskSwitchContext+0xb0>)
 80012fe:	4413      	add	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	3308      	adds	r3, #8
 8001314:	429a      	cmp	r2, r3
 8001316:	d103      	bne.n	8001320 <vTaskSwitchContext+0x8c>
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	4a08      	ldr	r2, [pc, #32]	@ (8001348 <vTaskSwitchContext+0xb4>)
 8001328:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800132a:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <vTaskSwitchContext+0xb4>)
 800132c:	681b      	ldr	r3, [r3, #0]
    }
 800132e:	bf00      	nop
 8001330:	371c      	adds	r7, #28
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	2000013c 	.word	0x2000013c
 800133c:	20000128 	.word	0x20000128
 8001340:	2000011c 	.word	0x2000011c
 8001344:	20000040 	.word	0x20000040
 8001348:	2000003c 	.word	0x2000003c

0800134c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001354:	f000 f852 	bl	80013fc <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <prvIdleTask+0x28>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d9f9      	bls.n	8001354 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001360:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <prvIdleTask+0x2c>)
 8001362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	f3bf 8f4f 	dsb	sy
 800136c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001370:	e7f0      	b.n	8001354 <prvIdleTask+0x8>
 8001372:	bf00      	nop
 8001374:	20000040 	.word	0x20000040
 8001378:	e000ed04 	.word	0xe000ed04

0800137c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	e00c      	b.n	80013a2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4a12      	ldr	r2, [pc, #72]	@ (80013dc <prvInitialiseTaskLists+0x60>)
 8001394:	4413      	add	r3, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f9c1 	bl	800071e <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3301      	adds	r3, #1
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d9ef      	bls.n	8001388 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80013a8:	480d      	ldr	r0, [pc, #52]	@ (80013e0 <prvInitialiseTaskLists+0x64>)
 80013aa:	f7ff f9b8 	bl	800071e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80013ae:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <prvInitialiseTaskLists+0x68>)
 80013b0:	f7ff f9b5 	bl	800071e <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80013b4:	480c      	ldr	r0, [pc, #48]	@ (80013e8 <prvInitialiseTaskLists+0x6c>)
 80013b6:	f7ff f9b2 	bl	800071e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80013ba:	480c      	ldr	r0, [pc, #48]	@ (80013ec <prvInitialiseTaskLists+0x70>)
 80013bc:	f7ff f9af 	bl	800071e <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80013c0:	480b      	ldr	r0, [pc, #44]	@ (80013f0 <prvInitialiseTaskLists+0x74>)
 80013c2:	f7ff f9ac 	bl	800071e <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <prvInitialiseTaskLists+0x78>)
 80013c8:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <prvInitialiseTaskLists+0x64>)
 80013ca:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80013cc:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <prvInitialiseTaskLists+0x7c>)
 80013ce:	4a05      	ldr	r2, [pc, #20]	@ (80013e4 <prvInitialiseTaskLists+0x68>)
 80013d0:	601a      	str	r2, [r3, #0]
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000040 	.word	0x20000040
 80013e0:	200000a4 	.word	0x200000a4
 80013e4:	200000b8 	.word	0x200000b8
 80013e8:	200000d4 	.word	0x200000d4
 80013ec:	200000e8 	.word	0x200000e8
 80013f0:	20000100 	.word	0x20000100
 80013f4:	200000cc 	.word	0x200000cc
 80013f8:	200000d0 	.word	0x200000d0

080013fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001402:	e019      	b.n	8001438 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8001404:	f000 fbd8 	bl	8001bb8 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001408:	4b10      	ldr	r3, [pc, #64]	@ (800144c <prvCheckTasksWaitingTermination+0x50>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3304      	adds	r3, #4
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fa08 	bl	800082a <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800141a:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <prvCheckTasksWaitingTermination+0x54>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3b01      	subs	r3, #1
 8001420:	4a0b      	ldr	r2, [pc, #44]	@ (8001450 <prvCheckTasksWaitingTermination+0x54>)
 8001422:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8001424:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <prvCheckTasksWaitingTermination+0x58>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3b01      	subs	r3, #1
 800142a:	4a0a      	ldr	r2, [pc, #40]	@ (8001454 <prvCheckTasksWaitingTermination+0x58>)
 800142c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800142e:	f000 fbf3 	bl	8001c18 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f810 	bl	8001458 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <prvCheckTasksWaitingTermination+0x58>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1e1      	bne.n	8001404 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200000e8 	.word	0x200000e8
 8001450:	20000114 	.word	0x20000114
 8001454:	200000fc 	.word	0x200000fc

08001458 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fd95 	bl	8001f94 <vPortFree>
            vPortFree( pxTCB );
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 fd92 	bl	8001f94 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800147c:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <prvResetNextTaskUnblockTime+0x2c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d104      	bne.n	8001490 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <prvResetNextTaskUnblockTime+0x30>)
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800148e:	e005      	b.n	800149c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001490:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <prvResetNextTaskUnblockTime+0x2c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a03      	ldr	r2, [pc, #12]	@ (80014a8 <prvResetNextTaskUnblockTime+0x30>)
 800149a:	6013      	str	r3, [r2, #0]
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	200000cc 	.word	0x200000cc
 80014a8:	20000134 	.word	0x20000134

080014ac <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00b      	beq.n	80014dc <xTaskGenericNotifyWait+0x30>
    __asm volatile
 80014c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014c8:	f383 8811 	msr	BASEPRI, r3
 80014cc:	f3bf 8f6f 	isb	sy
 80014d0:	f3bf 8f4f 	dsb	sy
 80014d4:	613b      	str	r3, [r7, #16]
}
 80014d6:	bf00      	nop
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <xTaskGenericNotifyWait+0x2c>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 80014dc:	f7ff fcaa 	bl	8000e34 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 80014e0:	f000 fb6a 	bl	8001bb8 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80014e4:	4b3b      	ldr	r3, [pc, #236]	@ (80015d4 <xTaskGenericNotifyWait+0x128>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	3350      	adds	r3, #80	@ 0x50
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d01a      	beq.n	800152c <xTaskGenericNotifyWait+0x80>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 80014f6:	4b37      	ldr	r3, [pc, #220]	@ (80015d4 <xTaskGenericNotifyWait+0x128>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	3312      	adds	r3, #18
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	6859      	ldr	r1, [r3, #4]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	43db      	mvns	r3, r3
 8001508:	4019      	ands	r1, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3312      	adds	r3, #18
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8001514:	4b2f      	ldr	r3, [pc, #188]	@ (80015d4 <xTaskGenericNotifyWait+0x128>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	3350      	adds	r3, #80	@ 0x50
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8001522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <xTaskGenericNotifyWait+0x80>
                    {
                        xShouldBlock = pdTRUE;
 8001528:	2301      	movs	r3, #1
 800152a:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800152c:	f000 fb74 	bl	8001c18 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d103      	bne.n	800153e <xTaskGenericNotifyWait+0x92>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001536:	2101      	movs	r1, #1
 8001538:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800153a:	f000 f97f 	bl	800183c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800153e:	f7ff fc87 	bl	8000e50 <xTaskResumeAll>
 8001542:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d10a      	bne.n	8001560 <xTaskGenericNotifyWait+0xb4>
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d107      	bne.n	8001560 <xTaskGenericNotifyWait+0xb4>
        {
            taskYIELD_WITHIN_API();
 8001550:	4b21      	ldr	r3, [pc, #132]	@ (80015d8 <xTaskGenericNotifyWait+0x12c>)
 8001552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	f3bf 8f4f 	dsb	sy
 800155c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8001560:	f000 fb2a 	bl	8001bb8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d008      	beq.n	800157c <xTaskGenericNotifyWait+0xd0>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 800156a:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <xTaskGenericNotifyWait+0x128>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3312      	adds	r3, #18
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800157c:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <xTaskGenericNotifyWait+0x128>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	3350      	adds	r3, #80	@ 0x50
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d002      	beq.n	8001594 <xTaskGenericNotifyWait+0xe8>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	e010      	b.n	80015b6 <xTaskGenericNotifyWait+0x10a>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <xTaskGenericNotifyWait+0x128>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3312      	adds	r3, #18
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	6859      	ldr	r1, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	4019      	ands	r1, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3312      	adds	r3, #18
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <xTaskGenericNotifyWait+0x128>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4413      	add	r3, r2
 80015be:	3350      	adds	r3, #80	@ 0x50
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80015c4:	f000 fb28 	bl	8001c18 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 80015c8:	69fb      	ldr	r3, [r7, #28]
    }
 80015ca:	4618      	mov	r0, r3
 80015cc:	3720      	adds	r7, #32
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000003c 	.word	0x2000003c
 80015d8:	e000ed04 	.word	0xe000ed04

080015dc <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08e      	sub	sp, #56	@ 0x38
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80015ea:	2301      	movs	r3, #1
 80015ec:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00b      	beq.n	800160c <xTaskGenericNotify+0x30>
    __asm volatile
 80015f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015f8:	f383 8811 	msr	BASEPRI, r3
 80015fc:	f3bf 8f6f 	isb	sy
 8001600:	f3bf 8f4f 	dsb	sy
 8001604:	623b      	str	r3, [r7, #32]
}
 8001606:	bf00      	nop
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10b      	bne.n	800162a <xTaskGenericNotify+0x4e>
    __asm volatile
 8001612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001616:	f383 8811 	msr	BASEPRI, r3
 800161a:	f3bf 8f6f 	isb	sy
 800161e:	f3bf 8f4f 	dsb	sy
 8001622:	61fb      	str	r3, [r7, #28]
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	e7fd      	b.n	8001626 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 800162e:	f000 fac3 	bl	8001bb8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8001632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001634:	2b00      	cmp	r3, #0
 8001636:	d007      	beq.n	8001648 <xTaskGenericNotify+0x6c>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	3312      	adds	r3, #18
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001646:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	4413      	add	r3, r2
 800164e:	3350      	adds	r3, #80	@ 0x50
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4413      	add	r3, r2
 800165c:	3350      	adds	r3, #80	@ 0x50
 800165e:	2202      	movs	r2, #2
 8001660:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	2b04      	cmp	r3, #4
 8001666:	d841      	bhi.n	80016ec <xTaskGenericNotify+0x110>
 8001668:	a201      	add	r2, pc, #4	@ (adr r2, 8001670 <xTaskGenericNotify+0x94>)
 800166a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166e:	bf00      	nop
 8001670:	0800170d 	.word	0x0800170d
 8001674:	08001685 	.word	0x08001685
 8001678:	080016a3 	.word	0x080016a3
 800167c:	080016bf 	.word	0x080016bf
 8001680:	080016cf 	.word	0x080016cf
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3312      	adds	r3, #18
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	431a      	orrs	r2, r3
 8001694:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	3312      	adds	r3, #18
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	605a      	str	r2, [r3, #4]
                    break;
 80016a0:	e037      	b.n	8001712 <xTaskGenericNotify+0x136>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80016a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	3312      	adds	r3, #18
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	3312      	adds	r3, #18
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	605a      	str	r2, [r3, #4]
                    break;
 80016bc:	e029      	b.n	8001712 <xTaskGenericNotify+0x136>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80016be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	3312      	adds	r3, #18
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	605a      	str	r2, [r3, #4]
                    break;
 80016cc:	e021      	b.n	8001712 <xTaskGenericNotify+0x136>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80016ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d007      	beq.n	80016e6 <xTaskGenericNotify+0x10a>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80016d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	3312      	adds	r3, #18
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80016e4:	e015      	b.n	8001712 <xTaskGenericNotify+0x136>
                        xReturn = pdFAIL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 80016ea:	e012      	b.n	8001712 <xTaskGenericNotify+0x136>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80016ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001828 <xTaskGenericNotify+0x24c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00d      	beq.n	8001710 <xTaskGenericNotify+0x134>
    __asm volatile
 80016f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016f8:	f383 8811 	msr	BASEPRI, r3
 80016fc:	f3bf 8f6f 	isb	sy
 8001700:	f3bf 8f4f 	dsb	sy
 8001704:	61bb      	str	r3, [r7, #24]
}
 8001706:	bf00      	nop
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <xTaskGenericNotify+0x12c>
                    break;
 800170c:	bf00      	nop
 800170e:	e000      	b.n	8001712 <xTaskGenericNotify+0x136>

                    break;
 8001710:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001712:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001716:	2b01      	cmp	r3, #1
 8001718:	d17e      	bne.n	8001818 <xTaskGenericNotify+0x23c>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800171a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001726:	68d2      	ldr	r2, [r2, #12]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001730:	6892      	ldr	r2, [r2, #8]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800173a:	3304      	adds	r3, #4
 800173c:	429a      	cmp	r2, r3
 800173e:	d103      	bne.n	8001748 <xTaskGenericNotify+0x16c>
 8001740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800174a:	2200      	movs	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
 800174e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	1e5a      	subs	r2, r3, #1
 8001754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001756:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8001758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800175a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175c:	2201      	movs	r2, #1
 800175e:	409a      	lsls	r2, r3
 8001760:	4b32      	ldr	r3, [pc, #200]	@ (800182c <xTaskGenericNotify+0x250>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4313      	orrs	r3, r2
 8001766:	4a31      	ldr	r2, [pc, #196]	@ (800182c <xTaskGenericNotify+0x250>)
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800176c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800176e:	4930      	ldr	r1, [pc, #192]	@ (8001830 <xTaskGenericNotify+0x254>)
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	3304      	adds	r3, #4
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001794:	3204      	adds	r2, #4
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800179a:	1d1a      	adds	r2, r3, #4
 800179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4a20      	ldr	r2, [pc, #128]	@ (8001830 <xTaskGenericNotify+0x254>)
 80017ae:	441a      	add	r2, r3
 80017b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017b2:	615a      	str	r2, [r3, #20]
 80017b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017b8:	491d      	ldr	r1, [pc, #116]	@ (8001830 <xTaskGenericNotify+0x254>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80017ca:	1c59      	adds	r1, r3, #1
 80017cc:	4818      	ldr	r0, [pc, #96]	@ (8001830 <xTaskGenericNotify+0x254>)
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4403      	add	r3, r0
 80017d8:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80017da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00b      	beq.n	80017fa <xTaskGenericNotify+0x21e>
    __asm volatile
 80017e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017e6:	f383 8811 	msr	BASEPRI, r3
 80017ea:	f3bf 8f6f 	isb	sy
 80017ee:	f3bf 8f4f 	dsb	sy
 80017f2:	617b      	str	r3, [r7, #20]
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	e7fd      	b.n	80017f6 <xTaskGenericNotify+0x21a>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 80017fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <xTaskGenericNotify+0x258>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	429a      	cmp	r2, r3
 8001806:	d207      	bcs.n	8001818 <xTaskGenericNotify+0x23c>
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <xTaskGenericNotify+0x25c>)
 800180a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	f3bf 8f4f 	dsb	sy
 8001814:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001818:	f000 f9fe 	bl	8001c18 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 800181c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800181e:	4618      	mov	r0, r3
 8001820:	3738      	adds	r7, #56	@ 0x38
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000118 	.word	0x20000118
 800182c:	2000011c 	.word	0x2000011c
 8001830:	20000040 	.word	0x20000040
 8001834:	2000003c 	.word	0x2000003c
 8001838:	e000ed04 	.word	0xe000ed04

0800183c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001846:	4b37      	ldr	r3, [pc, #220]	@ (8001924 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800184c:	4b36      	ldr	r3, [pc, #216]	@ (8001928 <prvAddCurrentTaskToDelayedList+0xec>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8001852:	4b36      	ldr	r3, [pc, #216]	@ (800192c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001858:	4b35      	ldr	r3, [pc, #212]	@ (8001930 <prvAddCurrentTaskToDelayedList+0xf4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3304      	adds	r3, #4
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe ffe3 	bl	800082a <uxListRemove>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10b      	bne.n	8001882 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800186a:	4b31      	ldr	r3, [pc, #196]	@ (8001930 <prvAddCurrentTaskToDelayedList+0xf4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	2201      	movs	r2, #1
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	4b2e      	ldr	r3, [pc, #184]	@ (8001934 <prvAddCurrentTaskToDelayedList+0xf8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4013      	ands	r3, r2
 800187e:	4a2d      	ldr	r2, [pc, #180]	@ (8001934 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001880:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d124      	bne.n	80018d4 <prvAddCurrentTaskToDelayedList+0x98>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d021      	beq.n	80018d4 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001890:	4b29      	ldr	r3, [pc, #164]	@ (8001938 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	4b26      	ldr	r3, [pc, #152]	@ (8001930 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <prvAddCurrentTaskToDelayedList+0xf4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	6892      	ldr	r2, [r2, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <prvAddCurrentTaskToDelayedList+0xf4>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	3204      	adds	r2, #4
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001930 <prvAddCurrentTaskToDelayedList+0xf4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	1d1a      	adds	r2, r3, #4
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	4b1c      	ldr	r3, [pc, #112]	@ (8001930 <prvAddCurrentTaskToDelayedList+0xf4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001938 <prvAddCurrentTaskToDelayedList+0xfc>)
 80018c4:	615a      	str	r2, [r3, #20]
 80018c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <prvAddCurrentTaskToDelayedList+0xfc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001938 <prvAddCurrentTaskToDelayedList+0xfc>)
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80018d2:	e022      	b.n	800191a <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80018dc:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <prvAddCurrentTaskToDelayedList+0xf4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d207      	bcs.n	80018fc <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80018ec:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <prvAddCurrentTaskToDelayedList+0xf4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3304      	adds	r3, #4
 80018f2:	4619      	mov	r1, r3
 80018f4:	6978      	ldr	r0, [r7, #20]
 80018f6:	f7fe ff60 	bl	80007ba <vListInsert>
}
 80018fa:	e00e      	b.n	800191a <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80018fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <prvAddCurrentTaskToDelayedList+0xf4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3304      	adds	r3, #4
 8001902:	4619      	mov	r1, r3
 8001904:	69b8      	ldr	r0, [r7, #24]
 8001906:	f7fe ff58 	bl	80007ba <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800190a:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <prvAddCurrentTaskToDelayedList+0x100>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	429a      	cmp	r2, r3
 8001912:	d202      	bcs.n	800191a <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8001914:	4a09      	ldr	r2, [pc, #36]	@ (800193c <prvAddCurrentTaskToDelayedList+0x100>)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6013      	str	r3, [r2, #0]
}
 800191a:	bf00      	nop
 800191c:	3720      	adds	r7, #32
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000118 	.word	0x20000118
 8001928:	200000cc 	.word	0x200000cc
 800192c:	200000d0 	.word	0x200000d0
 8001930:	2000003c 	.word	0x2000003c
 8001934:	2000011c 	.word	0x2000011c
 8001938:	20000100 	.word	0x20000100
 800193c:	20000134 	.word	0x20000134

08001940 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3b04      	subs	r3, #4
 8001950:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001958:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3b04      	subs	r3, #4
 800195e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f023 0201 	bic.w	r2, r3, #1
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	3b04      	subs	r3, #4
 800196e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001970:	4a08      	ldr	r2, [pc, #32]	@ (8001994 <pxPortInitialiseStack+0x54>)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3b14      	subs	r3, #20
 800197a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3b20      	subs	r3, #32
 8001986:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001988:	68fb      	ldr	r3, [r7, #12]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	08001999 	.word	0x08001999

08001998 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80019a2:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <prvTaskExitError+0x54>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019aa:	d00b      	beq.n	80019c4 <prvTaskExitError+0x2c>
    __asm volatile
 80019ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019b0:	f383 8811 	msr	BASEPRI, r3
 80019b4:	f3bf 8f6f 	isb	sy
 80019b8:	f3bf 8f4f 	dsb	sy
 80019bc:	60fb      	str	r3, [r7, #12]
}
 80019be:	bf00      	nop
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <prvTaskExitError+0x28>
    __asm volatile
 80019c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019c8:	f383 8811 	msr	BASEPRI, r3
 80019cc:	f3bf 8f6f 	isb	sy
 80019d0:	f3bf 8f4f 	dsb	sy
 80019d4:	60bb      	str	r3, [r7, #8]
}
 80019d6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80019d8:	bf00      	nop
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0fc      	beq.n	80019da <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	20000004 	.word	0x20000004

080019f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80019f0:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <pxCurrentTCBConst2>)
 80019f2:	6819      	ldr	r1, [r3, #0]
 80019f4:	6808      	ldr	r0, [r1, #0]
 80019f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80019fa:	f380 8809 	msr	PSP, r0
 80019fe:	f3bf 8f6f 	isb	sy
 8001a02:	f04f 0000 	mov.w	r0, #0
 8001a06:	f380 8811 	msr	BASEPRI, r0
 8001a0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8001a0e:	4770      	bx	lr

08001a10 <pxCurrentTCBConst2>:
 8001a10:	2000003c 	.word	0x2000003c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop

08001a18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001a18:	4806      	ldr	r0, [pc, #24]	@ (8001a34 <prvPortStartFirstTask+0x1c>)
 8001a1a:	6800      	ldr	r0, [r0, #0]
 8001a1c:	6800      	ldr	r0, [r0, #0]
 8001a1e:	f380 8808 	msr	MSP, r0
 8001a22:	b662      	cpsie	i
 8001a24:	b661      	cpsie	f
 8001a26:	f3bf 8f4f 	dsb	sy
 8001a2a:	f3bf 8f6f 	isb	sy
 8001a2e:	df00      	svc	0
 8001a30:	bf00      	nop
 8001a32:	0000      	.short	0x0000
 8001a34:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop

08001a3c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	@ 0x28
 8001a40:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8001a42:	4b54      	ldr	r3, [pc, #336]	@ (8001b94 <xPortStartScheduler+0x158>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8001a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4a:	332c      	adds	r3, #44	@ 0x2c
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a52      	ldr	r2, [pc, #328]	@ (8001b98 <xPortStartScheduler+0x15c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d00b      	beq.n	8001a6c <xPortStartScheduler+0x30>
    __asm volatile
 8001a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a58:	f383 8811 	msr	BASEPRI, r3
 8001a5c:	f3bf 8f6f 	isb	sy
 8001a60:	f3bf 8f4f 	dsb	sy
 8001a64:	61fb      	str	r3, [r7, #28]
}
 8001a66:	bf00      	nop
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <xPortStartScheduler+0x2c>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	3338      	adds	r3, #56	@ 0x38
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a4a      	ldr	r2, [pc, #296]	@ (8001b9c <xPortStartScheduler+0x160>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d00b      	beq.n	8001a90 <xPortStartScheduler+0x54>
    __asm volatile
 8001a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a7c:	f383 8811 	msr	BASEPRI, r3
 8001a80:	f3bf 8f6f 	isb	sy
 8001a84:	f3bf 8f4f 	dsb	sy
 8001a88:	61bb      	str	r3, [r7, #24]
}
 8001a8a:	bf00      	nop
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <xPortStartScheduler+0x50>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001a94:	4b42      	ldr	r3, [pc, #264]	@ (8001ba0 <xPortStartScheduler+0x164>)
 8001a96:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	22ff      	movs	r2, #255	@ 0xff
 8001aa4:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba4 <xPortStartScheduler+0x168>)
 8001aba:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8001abc:	4b39      	ldr	r3, [pc, #228]	@ (8001ba4 <xPortStartScheduler+0x168>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10b      	bne.n	8001adc <xPortStartScheduler+0xa0>
    __asm volatile
 8001ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ac8:	f383 8811 	msr	BASEPRI, r3
 8001acc:	f3bf 8f6f 	isb	sy
 8001ad0:	f3bf 8f4f 	dsb	sy
 8001ad4:	617b      	str	r3, [r7, #20]
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <xPortStartScheduler+0x9c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d013      	beq.n	8001b12 <xPortStartScheduler+0xd6>
    __asm volatile
 8001aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aee:	f383 8811 	msr	BASEPRI, r3
 8001af2:	f3bf 8f6f 	isb	sy
 8001af6:	f3bf 8f4f 	dsb	sy
 8001afa:	613b      	str	r3, [r7, #16]
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	e7fd      	b.n	8001afe <xPortStartScheduler+0xc2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	3301      	adds	r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b1a:	2b80      	cmp	r3, #128	@ 0x80
 8001b1c:	d0f1      	beq.n	8001b02 <xPortStartScheduler+0xc6>
        }

        if( ulImplementedPrioBits == 8 )
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d103      	bne.n	8001b2c <xPortStartScheduler+0xf0>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8001b24:	4b20      	ldr	r3, [pc, #128]	@ (8001ba8 <xPortStartScheduler+0x16c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e004      	b.n	8001b36 <xPortStartScheduler+0xfa>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f1c3 0307 	rsb	r3, r3, #7
 8001b32:	4a1d      	ldr	r2, [pc, #116]	@ (8001ba8 <xPortStartScheduler+0x16c>)
 8001b34:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001b36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba8 <xPortStartScheduler+0x16c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ba8 <xPortStartScheduler+0x16c>)
 8001b3e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001b40:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <xPortStartScheduler+0x16c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001b48:	4a17      	ldr	r2, [pc, #92]	@ (8001ba8 <xPortStartScheduler+0x16c>)
 8001b4a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001b54:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <xPortStartScheduler+0x170>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a14      	ldr	r2, [pc, #80]	@ (8001bac <xPortStartScheduler+0x170>)
 8001b5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b5e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <xPortStartScheduler+0x170>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a11      	ldr	r2, [pc, #68]	@ (8001bac <xPortStartScheduler+0x170>)
 8001b66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001b6a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8001b6c:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <xPortStartScheduler+0x174>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001b72:	f000 f8c3 	bl	8001cfc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001b76:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <xPortStartScheduler+0x178>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001b7c:	f7ff ff4c 	bl	8001a18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001b80:	f7ff fb88 	bl	8001294 <vTaskSwitchContext>
    prvTaskExitError();
 8001b84:	f7ff ff08 	bl	8001998 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3728      	adds	r7, #40	@ 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	e000ed08 	.word	0xe000ed08
 8001b98:	080019f1 	.word	0x080019f1
 8001b9c:	08001c71 	.word	0x08001c71
 8001ba0:	e000e400 	.word	0xe000e400
 8001ba4:	20000140 	.word	0x20000140
 8001ba8:	20000144 	.word	0x20000144
 8001bac:	e000ed20 	.word	0xe000ed20
 8001bb0:	e000ed1c 	.word	0xe000ed1c
 8001bb4:	20000004 	.word	0x20000004

08001bb8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
    __asm volatile
 8001bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bc2:	f383 8811 	msr	BASEPRI, r3
 8001bc6:	f3bf 8f6f 	isb	sy
 8001bca:	f3bf 8f4f 	dsb	sy
 8001bce:	607b      	str	r3, [r7, #4]
}
 8001bd0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <vPortEnterCritical+0x58>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c10 <vPortEnterCritical+0x58>)
 8001bda:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <vPortEnterCritical+0x58>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d110      	bne.n	8001c06 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <vPortEnterCritical+0x5c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00b      	beq.n	8001c06 <vPortEnterCritical+0x4e>
    __asm volatile
 8001bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bf2:	f383 8811 	msr	BASEPRI, r3
 8001bf6:	f3bf 8f6f 	isb	sy
 8001bfa:	f3bf 8f4f 	dsb	sy
 8001bfe:	603b      	str	r3, [r7, #0]
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	e7fd      	b.n	8001c02 <vPortEnterCritical+0x4a>
    }
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	20000004 	.word	0x20000004
 8001c14:	e000ed04 	.word	0xe000ed04

08001c18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001c1e:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <vPortExitCritical+0x50>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10b      	bne.n	8001c3e <vPortExitCritical+0x26>
    __asm volatile
 8001c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c2a:	f383 8811 	msr	BASEPRI, r3
 8001c2e:	f3bf 8f6f 	isb	sy
 8001c32:	f3bf 8f4f 	dsb	sy
 8001c36:	607b      	str	r3, [r7, #4]
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	e7fd      	b.n	8001c3a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <vPortExitCritical+0x50>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	4a08      	ldr	r2, [pc, #32]	@ (8001c68 <vPortExitCritical+0x50>)
 8001c46:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001c48:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <vPortExitCritical+0x50>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d105      	bne.n	8001c5c <vPortExitCritical+0x44>
 8001c50:	2300      	movs	r3, #0
 8001c52:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8001c5a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000004 	.word	0x20000004
 8001c6c:	00000000 	.word	0x00000000

08001c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001c70:	f3ef 8009 	mrs	r0, PSP
 8001c74:	f3bf 8f6f 	isb	sy
 8001c78:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb0 <pxCurrentTCBConst>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001c80:	6010      	str	r0, [r2, #0]
 8001c82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001c86:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001c8a:	f380 8811 	msr	BASEPRI, r0
 8001c8e:	f7ff fb01 	bl	8001294 <vTaskSwitchContext>
 8001c92:	f04f 0000 	mov.w	r0, #0
 8001c96:	f380 8811 	msr	BASEPRI, r0
 8001c9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001c9e:	6819      	ldr	r1, [r3, #0]
 8001ca0:	6808      	ldr	r0, [r1, #0]
 8001ca2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001ca6:	f380 8809 	msr	PSP, r0
 8001caa:	f3bf 8f6f 	isb	sy
 8001cae:	4770      	bx	lr

08001cb0 <pxCurrentTCBConst>:
 8001cb0:	2000003c 	.word	0x2000003c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop

08001cb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
    __asm volatile
 8001cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cc2:	f383 8811 	msr	BASEPRI, r3
 8001cc6:	f3bf 8f6f 	isb	sy
 8001cca:	f3bf 8f4f 	dsb	sy
 8001cce:	607b      	str	r3, [r7, #4]
}
 8001cd0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001cd2:	f7ff f9c5 	bl	8001060 <xTaskIncrementTick>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <SysTick_Handler+0x40>)
 8001cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	603b      	str	r3, [r7, #0]
    __asm volatile
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	f383 8811 	msr	BASEPRI, r3
}
 8001cee:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	e000ed04 	.word	0xe000ed04

08001cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001d00:	4b07      	ldr	r3, [pc, #28]	@ (8001d20 <vPortSetupTimerInterrupt+0x24>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001d06:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <vPortSetupTimerInterrupt+0x28>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <vPortSetupTimerInterrupt+0x2c>)
 8001d0e:	4a07      	ldr	r2, [pc, #28]	@ (8001d2c <vPortSetupTimerInterrupt+0x30>)
 8001d10:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001d12:	4b03      	ldr	r3, [pc, #12]	@ (8001d20 <vPortSetupTimerInterrupt+0x24>)
 8001d14:	2207      	movs	r2, #7
 8001d16:	601a      	str	r2, [r3, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	e000e010 	.word	0xe000e010
 8001d24:	e000e018 	.word	0xe000e018
 8001d28:	e000e014 	.word	0xe000e014
 8001d2c:	0001193f 	.word	0x0001193f

08001d30 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08e      	sub	sp, #56	@ 0x38
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d022      	beq.n	8001d88 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8001d42:	2308      	movs	r3, #8
 8001d44:	43db      	mvns	r3, r3
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d81b      	bhi.n	8001d84 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d014      	beq.n	8001d88 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	f1c3 0308 	rsb	r3, r3, #8
 8001d68:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8001d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d804      	bhi.n	8001d7e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d78:	4413      	add	r3, r2
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	e004      	b.n	8001d88 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	e001      	b.n	8001d88 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8001d88:	f7ff f854 	bl	8000e34 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001d8c:	4b7a      	ldr	r3, [pc, #488]	@ (8001f78 <pvPortMalloc+0x248>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8001d94:	f000 f978 	bl	8002088 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f2c0 80d3 	blt.w	8001f46 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 80cf 	beq.w	8001f46 <pvPortMalloc+0x216>
 8001da8:	4b74      	ldr	r3, [pc, #464]	@ (8001f7c <pvPortMalloc+0x24c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	f200 80c9 	bhi.w	8001f46 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001db4:	4b72      	ldr	r3, [pc, #456]	@ (8001f80 <pvPortMalloc+0x250>)
 8001db6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8001db8:	4b71      	ldr	r3, [pc, #452]	@ (8001f80 <pvPortMalloc+0x250>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8001dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dc0:	4a70      	ldr	r2, [pc, #448]	@ (8001f84 <pvPortMalloc+0x254>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d305      	bcc.n	8001dd2 <pvPortMalloc+0xa2>
 8001dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dc8:	4a6f      	ldr	r2, [pc, #444]	@ (8001f88 <pvPortMalloc+0x258>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d801      	bhi.n	8001dd2 <pvPortMalloc+0xa2>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <pvPortMalloc+0xa4>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d129      	bne.n	8001e2c <pvPortMalloc+0xfc>
    __asm volatile
 8001dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ddc:	f383 8811 	msr	BASEPRI, r3
 8001de0:	f3bf 8f6f 	isb	sy
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	623b      	str	r3, [r7, #32]
}
 8001dea:	bf00      	nop
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8001df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001df2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8001df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8001dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dfc:	4a61      	ldr	r2, [pc, #388]	@ (8001f84 <pvPortMalloc+0x254>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d305      	bcc.n	8001e0e <pvPortMalloc+0xde>
 8001e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e04:	4a60      	ldr	r2, [pc, #384]	@ (8001f88 <pvPortMalloc+0x258>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d801      	bhi.n	8001e0e <pvPortMalloc+0xde>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <pvPortMalloc+0xe0>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10b      	bne.n	8001e2c <pvPortMalloc+0xfc>
    __asm volatile
 8001e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e18:	f383 8811 	msr	BASEPRI, r3
 8001e1c:	f3bf 8f6f 	isb	sy
 8001e20:	f3bf 8f4f 	dsb	sy
 8001e24:	61fb      	str	r3, [r7, #28]
}
 8001e26:	bf00      	nop
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8001e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d903      	bls.n	8001e3e <pvPortMalloc+0x10e>
 8001e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1d8      	bne.n	8001df0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001e3e:	4b4e      	ldr	r3, [pc, #312]	@ (8001f78 <pvPortMalloc+0x248>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d07e      	beq.n	8001f46 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8001e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	4413      	add	r3, r2
 8001e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8001e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e54:	4a4b      	ldr	r2, [pc, #300]	@ (8001f84 <pvPortMalloc+0x254>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d305      	bcc.n	8001e66 <pvPortMalloc+0x136>
 8001e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e5c:	4a4a      	ldr	r2, [pc, #296]	@ (8001f88 <pvPortMalloc+0x258>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d801      	bhi.n	8001e66 <pvPortMalloc+0x136>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <pvPortMalloc+0x138>
 8001e66:	2300      	movs	r3, #0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10b      	bne.n	8001e84 <pvPortMalloc+0x154>
    __asm volatile
 8001e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e70:	f383 8811 	msr	BASEPRI, r3
 8001e74:	f3bf 8f6f 	isb	sy
 8001e78:	f3bf 8f4f 	dsb	sy
 8001e7c:	61bb      	str	r3, [r7, #24]
}
 8001e7e:	bf00      	nop
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e8a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8001e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d90b      	bls.n	8001eae <pvPortMalloc+0x17e>
    __asm volatile
 8001e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e9a:	f383 8811 	msr	BASEPRI, r3
 8001e9e:	f3bf 8f6f 	isb	sy
 8001ea2:	f3bf 8f4f 	dsb	sy
 8001ea6:	617b      	str	r3, [r7, #20]
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	e7fd      	b.n	8001eaa <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	1ad2      	subs	r2, r2, r3
 8001eb6:	2308      	movs	r3, #8
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d924      	bls.n	8001f08 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001ebe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00b      	beq.n	8001ee8 <pvPortMalloc+0x1b8>
    __asm volatile
 8001ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ed4:	f383 8811 	msr	BASEPRI, r3
 8001ed8:	f3bf 8f6f 	isb	sy
 8001edc:	f3bf 8f4f 	dsb	sy
 8001ee0:	613b      	str	r3, [r7, #16]
}
 8001ee2:	bf00      	nop
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	1ad2      	subs	r2, r2, r3
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8001efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f00:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8001f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f06:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001f08:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <pvPortMalloc+0x24c>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	4a1a      	ldr	r2, [pc, #104]	@ (8001f7c <pvPortMalloc+0x24c>)
 8001f14:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001f16:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <pvPortMalloc+0x24c>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f8c <pvPortMalloc+0x25c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d203      	bcs.n	8001f2a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001f22:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <pvPortMalloc+0x24c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a19      	ldr	r2, [pc, #100]	@ (8001f8c <pvPortMalloc+0x25c>)
 8001f28:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f34:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001f3c:	4b14      	ldr	r3, [pc, #80]	@ (8001f90 <pvPortMalloc+0x260>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3301      	adds	r3, #1
 8001f42:	4a13      	ldr	r2, [pc, #76]	@ (8001f90 <pvPortMalloc+0x260>)
 8001f44:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001f46:	f7fe ff83 	bl	8000e50 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00b      	beq.n	8001f6c <pvPortMalloc+0x23c>
    __asm volatile
 8001f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f58:	f383 8811 	msr	BASEPRI, r3
 8001f5c:	f3bf 8f6f 	isb	sy
 8001f60:	f3bf 8f4f 	dsb	sy
 8001f64:	60fb      	str	r3, [r7, #12]
}
 8001f66:	bf00      	nop
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <pvPortMalloc+0x238>
    return pvReturn;
 8001f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3738      	adds	r7, #56	@ 0x38
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20003150 	.word	0x20003150
 8001f7c:	20003154 	.word	0x20003154
 8001f80:	20003148 	.word	0x20003148
 8001f84:	20000148 	.word	0x20000148
 8001f88:	20003147 	.word	0x20003147
 8001f8c:	20003158 	.word	0x20003158
 8001f90:	2000315c 	.word	0x2000315c

08001f94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d064      	beq.n	8002070 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	425b      	negs	r3, r3
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	4413      	add	r3, r2
 8001fae:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	4a30      	ldr	r2, [pc, #192]	@ (8002078 <vPortFree+0xe4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d305      	bcc.n	8001fc8 <vPortFree+0x34>
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800207c <vPortFree+0xe8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d801      	bhi.n	8001fc8 <vPortFree+0x34>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <vPortFree+0x36>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10b      	bne.n	8001fe6 <vPortFree+0x52>
    __asm volatile
 8001fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fd2:	f383 8811 	msr	BASEPRI, r3
 8001fd6:	f3bf 8f6f 	isb	sy
 8001fda:	f3bf 8f4f 	dsb	sy
 8001fde:	617b      	str	r3, [r7, #20]
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	e7fd      	b.n	8001fe2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	db0b      	blt.n	8002006 <vPortFree+0x72>
    __asm volatile
 8001fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ff2:	f383 8811 	msr	BASEPRI, r3
 8001ff6:	f3bf 8f6f 	isb	sy
 8001ffa:	f3bf 8f4f 	dsb	sy
 8001ffe:	613b      	str	r3, [r7, #16]
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	e7fd      	b.n	8002002 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00b      	beq.n	8002026 <vPortFree+0x92>
    __asm volatile
 800200e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002012:	f383 8811 	msr	BASEPRI, r3
 8002016:	f3bf 8f6f 	isb	sy
 800201a:	f3bf 8f4f 	dsb	sy
 800201e:	60fb      	str	r3, [r7, #12]
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	e7fd      	b.n	8002022 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	0fdb      	lsrs	r3, r3, #31
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01c      	beq.n	8002070 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d118      	bne.n	8002070 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800204a:	f7fe fef3 	bl	8000e34 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <vPortFree+0xec>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4413      	add	r3, r2
 8002058:	4a09      	ldr	r2, [pc, #36]	@ (8002080 <vPortFree+0xec>)
 800205a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800205c:	69b8      	ldr	r0, [r7, #24]
 800205e:	f000 f86d 	bl	800213c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002062:	4b08      	ldr	r3, [pc, #32]	@ (8002084 <vPortFree+0xf0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3301      	adds	r3, #1
 8002068:	4a06      	ldr	r2, [pc, #24]	@ (8002084 <vPortFree+0xf0>)
 800206a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800206c:	f7fe fef0 	bl	8000e50 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002070:	bf00      	nop
 8002072:	3720      	adds	r7, #32
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000148 	.word	0x20000148
 800207c:	20003147 	.word	0x20003147
 8002080:	20003154 	.word	0x20003154
 8002084:	20003160 	.word	0x20003160

08002088 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800208e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002092:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002094:	4b24      	ldr	r3, [pc, #144]	@ (8002128 <prvHeapInit+0xa0>)
 8002096:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00c      	beq.n	80020bc <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3307      	adds	r3, #7
 80020a6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f023 0307 	bic.w	r3, r3, #7
 80020ae:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002128 <prvHeapInit+0xa0>)
 80020b8:	4413      	add	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4a1b      	ldr	r2, [pc, #108]	@ (800212c <prvHeapInit+0xa4>)
 80020c0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <prvHeapInit+0xa4>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	4413      	add	r3, r2
 80020ce:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80020d0:	2208      	movs	r2, #8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f023 0307 	bic.w	r3, r3, #7
 80020de:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a13      	ldr	r2, [pc, #76]	@ (8002130 <prvHeapInit+0xa8>)
 80020e4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80020e6:	4b12      	ldr	r3, [pc, #72]	@ (8002130 <prvHeapInit+0xa8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2200      	movs	r2, #0
 80020ec:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80020ee:	4b10      	ldr	r3, [pc, #64]	@ (8002130 <prvHeapInit+0xa8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	1ad2      	subs	r2, r2, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8002104:	4b0a      	ldr	r3, [pc, #40]	@ (8002130 <prvHeapInit+0xa8>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a08      	ldr	r2, [pc, #32]	@ (8002134 <prvHeapInit+0xac>)
 8002112:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a07      	ldr	r2, [pc, #28]	@ (8002138 <prvHeapInit+0xb0>)
 800211a:	6013      	str	r3, [r2, #0]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000148 	.word	0x20000148
 800212c:	20003148 	.word	0x20003148
 8002130:	20003150 	.word	0x20003150
 8002134:	20003158 	.word	0x20003158
 8002138:	20003154 	.word	0x20003154

0800213c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8002144:	4b36      	ldr	r3, [pc, #216]	@ (8002220 <prvInsertBlockIntoFreeList+0xe4>)
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	e002      	b.n	8002150 <prvInsertBlockIntoFreeList+0x14>
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	429a      	cmp	r2, r3
 8002158:	d8f7      	bhi.n	800214a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	4a30      	ldr	r2, [pc, #192]	@ (8002220 <prvInsertBlockIntoFreeList+0xe4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d018      	beq.n	8002194 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	4a2f      	ldr	r2, [pc, #188]	@ (8002224 <prvInsertBlockIntoFreeList+0xe8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d305      	bcc.n	8002176 <prvInsertBlockIntoFreeList+0x3a>
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	4a2e      	ldr	r2, [pc, #184]	@ (8002228 <prvInsertBlockIntoFreeList+0xec>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d801      	bhi.n	8002176 <prvInsertBlockIntoFreeList+0x3a>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <prvInsertBlockIntoFreeList+0x3c>
 8002176:	2300      	movs	r3, #0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10b      	bne.n	8002194 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800217c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	60fb      	str	r3, [r7, #12]
}
 800218e:	bf00      	nop
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4413      	add	r3, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d108      	bne.n	80021b8 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	441a      	add	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	441a      	add	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d118      	bne.n	80021fe <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b16      	ldr	r3, [pc, #88]	@ (800222c <prvInsertBlockIntoFreeList+0xf0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d00d      	beq.n	80021f4 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	441a      	add	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e008      	b.n	8002206 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80021f4:	4b0d      	ldr	r3, [pc, #52]	@ (800222c <prvInsertBlockIntoFreeList+0xf0>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e003      	b.n	8002206 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	d002      	beq.n	8002214 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002214:	bf00      	nop
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20003148 	.word	0x20003148
 8002224:	20000148 	.word	0x20000148
 8002228:	20003147 	.word	0x20003147
 800222c:	20003150 	.word	0x20003150

08002230 <memset>:
 8002230:	4603      	mov	r3, r0
 8002232:	4402      	add	r2, r0
 8002234:	4293      	cmp	r3, r2
 8002236:	d100      	bne.n	800223a <memset+0xa>
 8002238:	4770      	bx	lr
 800223a:	f803 1b01 	strb.w	r1, [r3], #1
 800223e:	e7f9      	b.n	8002234 <memset+0x4>

08002240 <__libc_init_array>:
 8002240:	b570      	push	{r4, r5, r6, lr}
 8002242:	2600      	movs	r6, #0
 8002244:	4d0c      	ldr	r5, [pc, #48]	@ (8002278 <__libc_init_array+0x38>)
 8002246:	4c0d      	ldr	r4, [pc, #52]	@ (800227c <__libc_init_array+0x3c>)
 8002248:	1b64      	subs	r4, r4, r5
 800224a:	10a4      	asrs	r4, r4, #2
 800224c:	42a6      	cmp	r6, r4
 800224e:	d109      	bne.n	8002264 <__libc_init_array+0x24>
 8002250:	f000 f81a 	bl	8002288 <_init>
 8002254:	2600      	movs	r6, #0
 8002256:	4d0a      	ldr	r5, [pc, #40]	@ (8002280 <__libc_init_array+0x40>)
 8002258:	4c0a      	ldr	r4, [pc, #40]	@ (8002284 <__libc_init_array+0x44>)
 800225a:	1b64      	subs	r4, r4, r5
 800225c:	10a4      	asrs	r4, r4, #2
 800225e:	42a6      	cmp	r6, r4
 8002260:	d105      	bne.n	800226e <__libc_init_array+0x2e>
 8002262:	bd70      	pop	{r4, r5, r6, pc}
 8002264:	f855 3b04 	ldr.w	r3, [r5], #4
 8002268:	4798      	blx	r3
 800226a:	3601      	adds	r6, #1
 800226c:	e7ee      	b.n	800224c <__libc_init_array+0xc>
 800226e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002272:	4798      	blx	r3
 8002274:	3601      	adds	r6, #1
 8002276:	e7f2      	b.n	800225e <__libc_init_array+0x1e>
 8002278:	080022d4 	.word	0x080022d4
 800227c:	080022d4 	.word	0x080022d4
 8002280:	080022d4 	.word	0x080022d4
 8002284:	080022d8 	.word	0x080022d8

08002288 <_init>:
 8002288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228a:	bf00      	nop
 800228c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800228e:	bc08      	pop	{r3}
 8002290:	469e      	mov	lr, r3
 8002292:	4770      	bx	lr

08002294 <_fini>:
 8002294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002296:	bf00      	nop
 8002298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229a:	bc08      	pop	{r3}
 800229c:	469e      	mov	lr, r3
 800229e:	4770      	bx	lr
